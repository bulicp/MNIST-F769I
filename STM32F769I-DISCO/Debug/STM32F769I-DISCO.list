
STM32F769I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       00000eb0  20000000  20000000  00039000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007598  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0002ea6c  080077a0  080077a0  000087a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0803620c  0803620c  00039eb0  2**0
                  CONTENTS
  5 .ARM          00000008  0803620c  0803620c  0003720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08036214  08036214  00039eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08036214  08036214  00037214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08036218  08036218  00037218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000804  20000eb0  0803621c  00037eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000814  200016b8  08036a20  000386b8  2**3
                  ALLOC
 11 ._user_heap_stack 00001004  20001ecc  08036a20  00038ecc  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00039eb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2ef  00000000  00000000  00039ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d75  00000000  00000000  000551cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000905c  00000000  00000000  00058f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  00061fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f47  00000000  00000000  00062f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032e48  00000000  00000000  00063eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a41f  00000000  00000000  00096cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012eb99  00000000  00000000  000b111e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000086  00000000  00000000  001dfcb7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003870  00000000  00000000  001dfd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007b  00000000  00000000  001e35b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200016b8 	.word	0x200016b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007780 	.word	0x08007780

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200016bc 	.word	0x200016bc
 800023c:	08007780 	.word	0x08007780

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e4:	2210      	movs	r2, #16
 80005e6:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	a809      	add	r0, sp, #36	@ 0x24
 80005ec:	f005 f9ba 	bl	8005964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	2214      	movs	r2, #20
 80005f2:	2100      	movs	r1, #0
 80005f4:	a802      	add	r0, sp, #8
 80005f6:	f005 f9b5 	bl	8005964 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005fe:	2019      	movs	r0, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000602:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000606:	641a      	str	r2, [r3, #64]	@ 0x40
 8000608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <SystemClock_Config+0xa8>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061e:	9411      	str	r4, [sp, #68]	@ 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000630:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000634:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000638:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800063c:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000640:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000644:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f001 fb0a 	bl	8001c60 <HAL_RCC_OscConfig>
 800064c:	b108      	cbz	r0, 8000652 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000652:	f001 facd 	bl	8001bf0 <HAL_PWREx_EnableOverDrive>
 8000656:	b108      	cbz	r0, 800065c <SystemClock_Config+0x7c>
 8000658:	b672      	cpsid	i
  while (1)
 800065a:	e7fe      	b.n	800065a <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000664:	2107      	movs	r1, #7
 8000666:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000670:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000674:	f001 fce6 	bl	8002044 <HAL_RCC_ClockConfig>
 8000678:	b108      	cbz	r0, 800067e <SystemClock_Config+0x9e>
 800067a:	b672      	cpsid	i
  while (1)
 800067c:	e7fe      	b.n	800067c <SystemClock_Config+0x9c>
}
 800067e:	b014      	add	sp, #80	@ 0x50
 8000680:	bd10      	pop	{r4, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART1_UART_Init>:
{
 800068c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800068e:	480b      	ldr	r0, [pc, #44]	@ (80006bc <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8000690:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000694:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <MX_USART1_UART_Init+0x34>)
 8000696:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ae:	f002 fbb5 	bl	8002e1c <HAL_UART_Init>
 80006b2:	b108      	cbz	r0, 80006b8 <MX_USART1_UART_Init+0x2c>
 80006b4:	b672      	cpsid	i
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <MX_USART1_UART_Init+0x2a>
}
 80006b8:	bd08      	pop	{r3, pc}
 80006ba:	bf00      	nop
 80006bc:	20001ba4 	.word	0x20001ba4
 80006c0:	40011000 	.word	0x40011000

080006c4 <pa3_ai_network_init>:
{
 80006c4:	b510      	push	{r4, lr}
    ai_error err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80006c6:	2100      	movs	r1, #0
{
 80006c8:	b08e      	sub	sp, #56	@ 0x38
    ai_error err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80006ca:	4810      	ldr	r0, [pc, #64]	@ (800070c <pa3_ai_network_init+0x48>)
 80006cc:	f002 fcf6 	bl	80030bc <ai_network_create>
    if ((err.code != AI_ERROR_CODE_NONE) && (err.type != AI_ERROR_NONE)) {
 80006d0:	28ff      	cmp	r0, #255	@ 0xff
 80006d2:	d905      	bls.n	80006e0 <pa3_ai_network_init+0x1c>
 80006d4:	b2c0      	uxtb	r0, r0
 80006d6:	b118      	cbz	r0, 80006e0 <pa3_ai_network_init+0x1c>
    	__NOP();
 80006d8:	bf00      	nop
        return false;
 80006da:	2000      	movs	r0, #0
}
 80006dc:	b00e      	add	sp, #56	@ 0x38
 80006de:	bd10      	pop	{r4, pc}
    		AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),  	// Macro for getting weights
 80006e0:	f002 fdc6 	bl	8003270 <ai_network_data_weights_get>
 80006e4:	4601      	mov	r1, r0
 80006e6:	4668      	mov	r0, sp
    if (!ai_network_init(network, &params)) {
 80006e8:	4c08      	ldr	r4, [pc, #32]	@ (800070c <pa3_ai_network_init+0x48>)
    		AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),  	// Macro for getting weights
 80006ea:	f002 fdad 	bl	8003248 <ai_network_data_weights_buffer_get>
    		AI_NETWORK_DATA_ACTIVATIONS(data_activations0[0])  					// Macro for setting activations buffer
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <pa3_ai_network_init+0x4c>)
 80006f0:	a807      	add	r0, sp, #28
 80006f2:	6819      	ldr	r1, [r3, #0]
 80006f4:	f002 fd94 	bl	8003220 <ai_network_data_activations_buffer_get>
    if (!ai_network_init(network, &params)) {
 80006f8:	4669      	mov	r1, sp
 80006fa:	6820      	ldr	r0, [r4, #0]
 80006fc:	f002 fcec 	bl	80030d8 <ai_network_init>
 8000700:	2800      	cmp	r0, #0
 8000702:	d1eb      	bne.n	80006dc <pa3_ai_network_init+0x18>
    	ai_error err = ai_network_get_error(network);
 8000704:	6820      	ldr	r0, [r4, #0]
 8000706:	f002 fcd7 	bl	80030b8 <ai_network_get_error>
 800070a:	e7e5      	b.n	80006d8 <pa3_ai_network_init+0x14>
 800070c:	20001ba0 	.word	0x20001ba0
 8000710:	20000ec8 	.word	0x20000ec8

08000714 <pa3_ai_network_inference>:
{
 8000714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ai_shape_dimension input_shape_data[] = { 1, 28, 28, 1 };
 8000718:	4c20      	ldr	r4, [pc, #128]	@ (800079c <pa3_ai_network_inference+0x88>)
{
 800071a:	b096      	sub	sp, #88	@ 0x58
 800071c:	4607      	mov	r7, r0
 800071e:	460e      	mov	r6, r1
	ai_shape_dimension input_shape_data[] = { 1, 28, 28, 1 };
 8000720:	466d      	mov	r5, sp
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 8000722:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 80007a4 <pa3_ai_network_inference+0x90>
	ai_shape_dimension input_shape_data[] = { 1, 28, 28, 1 };
 8000726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800072a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 800072e:	220d      	movs	r2, #13
 8000730:	2100      	movs	r1, #0
 8000732:	a80a      	add	r0, sp, #40	@ 0x28
	ai_shape_dimension output_shape_data[] = { 1, AI_NETWORK_OUT_1_SIZE, 1, 1};
 8000734:	3410      	adds	r4, #16
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 8000736:	f005 f915 	bl	8005964 <memset>
 800073a:	f44f 7344 	mov.w	r3, #784	@ 0x310
 800073e:	e9cd 8708 	strd	r8, r7, [sp, #32]
 8000742:	930c      	str	r3, [sp, #48]	@ 0x30
 8000744:	2704      	movs	r7, #4
 8000746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000748:	f367 231f 	bfi	r3, r7, #8, #24
 800074c:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
	ai_shape_dimension output_shape_data[] = { 1, AI_NETWORK_OUT_1_SIZE, 1, 1};
 8000750:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000754:	ad04      	add	r5, sp, #16
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 8000756:	4c12      	ldr	r4, [pc, #72]	@ (80007a0 <pa3_ai_network_inference+0x8c>)
	ai_shape_dimension output_shape_data[] = { 1, AI_NETWORK_OUT_1_SIZE, 1, 1};
 8000758:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 800075c:	220d      	movs	r2, #13
 800075e:	2100      	movs	r1, #0
 8000760:	a811      	add	r0, sp, #68	@ 0x44
 8000762:	f005 f8ff 	bl	8005964 <memset>
 8000766:	230a      	movs	r3, #10
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 8000768:	aa0f      	add	r2, sp, #60	@ 0x3c
 800076a:	a908      	add	r1, sp, #32
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 800076c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800076e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8000770:	f367 231f 	bfi	r3, r7, #8, #24
 8000774:	e9cd 3514 	strd	r3, r5, [sp, #80]	@ 0x50
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 8000778:	6820      	ldr	r0, [r4, #0]
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 800077a:	e9cd 860f 	strd	r8, r6, [sp, #60]	@ 0x3c
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 800077e:	f002 fd4d 	bl	800321c <ai_network_run>
    if (nbatch != 1) {
 8000782:	2801      	cmp	r0, #1
 8000784:	d008      	beq.n	8000798 <pa3_ai_network_inference+0x84>
    	ai_error err = ai_network_get_error(network);
 8000786:	6820      	ldr	r0, [r4, #0]
 8000788:	f002 fc96 	bl	80030b8 <ai_network_get_error>
    	__NOP();
 800078c:	bf00      	nop
        return -1;
 800078e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000792:	b016      	add	sp, #88	@ 0x58
 8000794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;  // Inference successful
 8000798:	2000      	movs	r0, #0
 800079a:	e7fa      	b.n	8000792 <pa3_ai_network_inference+0x7e>
 800079c:	080077a0 	.word	0x080077a0
 80007a0:	20001ba0 	.word	0x20001ba0
 80007a4:	00840440 	.word	0x00840440

080007a8 <UART_SendString>:
void UART_SendString(UART_HandleTypeDef* huart, const char *str) {
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	4605      	mov	r5, r0
 80007ac:	460c      	mov	r4, r1
    size_t len = strlen(str);
 80007ae:	4608      	mov	r0, r1
 80007b0:	f7ff fd96 	bl	80002e0 <strlen>
    HAL_UART_Transmit(huart, (uint8_t *)str, len, HAL_MAX_DELAY);
 80007b4:	4621      	mov	r1, r4
 80007b6:	b282      	uxth	r2, r0
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007bc:	4628      	mov	r0, r5
}
 80007be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, (uint8_t *)str, len, HAL_MAX_DELAY);
 80007c2:	f002 baa8 	b.w	8002d16 <HAL_UART_Transmit>
	...

080007c8 <pa3_run_model_on_test_dataset>:
void pa3_run_model_on_test_dataset(void){
 80007c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007cc:	4e57      	ldr	r6, [pc, #348]	@ (800092c <pa3_run_model_on_test_dataset+0x164>)
	for (int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 80007ce:	2500      	movs	r5, #0
	UART_SendString(&huart1, "\n\nRunning inference...\n");
 80007d0:	4957      	ldr	r1, [pc, #348]	@ (8000930 <pa3_run_model_on_test_dataset+0x168>)
 80007d2:	4858      	ldr	r0, [pc, #352]	@ (8000934 <pa3_run_model_on_test_dataset+0x16c>)
	UART_SendString(&huart1, buffer);
 80007d4:	46b0      	mov	r8, r6
	UART_SendString(&huart1, "\n\nRunning inference...\n");
 80007d6:	f7ff ffe7 	bl	80007a8 <UART_SendString>
		  network_input[j] = (ai_i8)(mnist_test[i][j]);
 80007da:	f8df 919c 	ldr.w	r9, [pc, #412]	@ 8000978 <pa3_run_model_on_test_dataset+0x1b0>
	sprintf(buffer, "   MNIST test dataset size: %d \n", MNIST_TEST_SUBSET_SIZE);
 80007de:	2264      	movs	r2, #100	@ 0x64
 80007e0:	4955      	ldr	r1, [pc, #340]	@ (8000938 <pa3_run_model_on_test_dataset+0x170>)
 80007e2:	4856      	ldr	r0, [pc, #344]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
	  sprintf(buffer, "   Data %d: Recognized character: %d Label: %d", i, digit, mnist_test_labels[i]);
 80007e4:	4f56      	ldr	r7, [pc, #344]	@ (8000940 <pa3_run_model_on_test_dataset+0x178>)
	sprintf(buffer, "   MNIST test dataset size: %d \n", MNIST_TEST_SUBSET_SIZE);
 80007e6:	f004 ffad 	bl	8005744 <siprintf>
	UART_SendString(&huart1, buffer);
 80007ea:	4954      	ldr	r1, [pc, #336]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
 80007ec:	4851      	ldr	r0, [pc, #324]	@ (8000934 <pa3_run_model_on_test_dataset+0x16c>)
 80007ee:	f7ff ffdb 	bl	80007a8 <UART_SendString>
		  network_input[j] = (ai_i8)(mnist_test[i][j]);
 80007f2:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80007f6:	f8d9 3000 	ldr.w	r3, [r9]
 80007fa:	4952      	ldr	r1, [pc, #328]	@ (8000944 <pa3_run_model_on_test_dataset+0x17c>)
 80007fc:	fb02 3305 	mla	r3, r2, r5, r3
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	f203 330f 	addw	r3, r3, #783	@ 0x30f
 8000806:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
	  for (int j = 0; j < AI_NETWORK_IN_1_SIZE; j++) {
 800080a:	429a      	cmp	r2, r3
		  network_input[j] = (ai_i8)(mnist_test[i][j]);
 800080c:	f801 0b01 	strb.w	r0, [r1], #1
	  for (int j = 0; j < AI_NETWORK_IN_1_SIZE; j++) {
 8000810:	d1f9      	bne.n	8000806 <pa3_run_model_on_test_dataset+0x3e>
	  __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the counter to 0
 8000812:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800097c <pa3_run_model_on_test_dataset+0x1b4>
 8000816:	2200      	movs	r2, #0
	  start = __HAL_TIM_GET_COUNTER(&htim2); // Read start time
 8000818:	f8df a164 	ldr.w	sl, [pc, #356]	@ 8000980 <pa3_run_model_on_test_dataset+0x1b8>
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_SET);
 800081c:	2108      	movs	r1, #8
	  __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the counter to 0
 800081e:	f8db 3000 	ldr.w	r3, [fp]
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_SET);
 8000822:	4849      	ldr	r0, [pc, #292]	@ (8000948 <pa3_run_model_on_test_dataset+0x180>)
	  __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the counter to 0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
	  start = __HAL_TIM_GET_COUNTER(&htim2); // Read start time
 8000828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082a:	f8ca 3000 	str.w	r3, [sl]
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_SET);
 800082e:	f001 f9d9 	bl	8001be4 <HAL_GPIO_WritePin>
	  if (pa3_ai_network_inference(network_input, network_output) != 0) {
 8000832:	4946      	ldr	r1, [pc, #280]	@ (800094c <pa3_run_model_on_test_dataset+0x184>)
 8000834:	4843      	ldr	r0, [pc, #268]	@ (8000944 <pa3_run_model_on_test_dataset+0x17c>)
 8000836:	f7ff ff6d 	bl	8000714 <pa3_ai_network_inference>
 800083a:	4604      	mov	r4, r0
 800083c:	b138      	cbz	r0, 800084e <pa3_run_model_on_test_dataset+0x86>
		  __NOP();
 800083e:	bf00      	nop
		  UART_SendString(&huart1, "Error running inference.");
 8000840:	4943      	ldr	r1, [pc, #268]	@ (8000950 <pa3_run_model_on_test_dataset+0x188>)
	UART_SendString(&huart1, buffer);
 8000842:	483c      	ldr	r0, [pc, #240]	@ (8000934 <pa3_run_model_on_test_dataset+0x16c>)
}
 8000844:	b003      	add	sp, #12
 8000846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UART_SendString(&huart1, buffer);
 800084a:	f7ff bfad 	b.w	80007a8 <UART_SendString>
	  stop = __HAL_TIM_GET_COUNTER(&htim2); // Read stop time
 800084e:	f8db 3000 	ldr.w	r3, [fp]
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 8000852:	4602      	mov	r2, r0
	  stop = __HAL_TIM_GET_COUNTER(&htim2); // Read stop time
 8000854:	f8df b12c 	ldr.w	fp, [pc, #300]	@ 8000984 <pa3_run_model_on_test_dataset+0x1bc>
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 8000858:	2108      	movs	r1, #8
	  stop = __HAL_TIM_GET_COUNTER(&htim2); // Read stop time
 800085a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 800085c:	483a      	ldr	r0, [pc, #232]	@ (8000948 <pa3_run_model_on_test_dataset+0x180>)
	  stop = __HAL_TIM_GET_COUNTER(&htim2); // Read stop time
 800085e:	f8cb 3000 	str.w	r3, [fp]
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 8000862:	f001 f9bf 	bl	8001be4 <HAL_GPIO_WritePin>
	  elapsed_time = stop - start; // Calculate elapsed time in µs
 8000866:	f8da 3000 	ldr.w	r3, [sl]
	  int8_t digit = 0;
 800086a:	46a2      	mov	sl, r4
	  elapsed_time = stop - start; // Calculate elapsed time in µs
 800086c:	f8db 2000 	ldr.w	r2, [fp]
	  sprintf(buffer, "   Inference time: %d \n", elapsed_time);
 8000870:	4938      	ldr	r1, [pc, #224]	@ (8000954 <pa3_run_model_on_test_dataset+0x18c>)
	  elapsed_time = stop - start; // Calculate elapsed time in µs
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <pa3_run_model_on_test_dataset+0x190>)
	  sprintf(buffer, "   Inference time: %d \n", elapsed_time);
 8000876:	4831      	ldr	r0, [pc, #196]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
	  elapsed_time = stop - start; // Calculate elapsed time in µs
 8000878:	601a      	str	r2, [r3, #0]
	  sprintf(buffer, "   Inference time: %d \n", elapsed_time);
 800087a:	f004 ff63 	bl	8005744 <siprintf>
	  UART_SendString(&huart1, buffer);
 800087e:	492f      	ldr	r1, [pc, #188]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
 8000880:	482c      	ldr	r0, [pc, #176]	@ (8000934 <pa3_run_model_on_test_dataset+0x16c>)
 8000882:	f7ff ff91 	bl	80007a8 <UART_SendString>
	  for(int k = 0; k < AI_NETWORK_OUT_1_SIZE ; k++) {
 8000886:	4a31      	ldr	r2, [pc, #196]	@ (800094c <pa3_run_model_on_test_dataset+0x184>)
	  int8_t max = -127;
 8000888:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
		  if (network_output[k] >= max){
 800088c:	f912 1b01 	ldrsb.w	r1, [r2], #1
 8000890:	4299      	cmp	r1, r3
			  digit = k;
 8000892:	bfa8      	it	ge
 8000894:	fa4f fa84 	sxtbge.w	sl, r4
	  for(int k = 0; k < AI_NETWORK_OUT_1_SIZE ; k++) {
 8000898:	f104 0401 	add.w	r4, r4, #1
			  digit = k;
 800089c:	bfa8      	it	ge
 800089e:	460b      	movge	r3, r1
	  for(int k = 0; k < AI_NETWORK_OUT_1_SIZE ; k++) {
 80008a0:	2c0a      	cmp	r4, #10
 80008a2:	d1f3      	bne.n	800088c <pa3_run_model_on_test_dataset+0xc4>
	  sprintf(buffer, "   Data %d: Recognized character: %d Label: %d", i, digit, mnist_test_labels[i]);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	462a      	mov	r2, r5
	  recognized_digits[i] = digit;
 80008a8:	f808 ab01 	strb.w	sl, [r8], #1
	  sprintf(buffer, "   Data %d: Recognized character: %d Label: %d", i, digit, mnist_test_labels[i]);
 80008ac:	5d5b      	ldrb	r3, [r3, r5]
 80008ae:	492b      	ldr	r1, [pc, #172]	@ (800095c <pa3_run_model_on_test_dataset+0x194>)
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	4653      	mov	r3, sl
 80008b4:	4821      	ldr	r0, [pc, #132]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
 80008b6:	f004 ff45 	bl	8005744 <siprintf>
	  UART_SendString(&huart1, buffer);
 80008ba:	4920      	ldr	r1, [pc, #128]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
 80008bc:	481d      	ldr	r0, [pc, #116]	@ (8000934 <pa3_run_model_on_test_dataset+0x16c>)
 80008be:	f7ff ff73 	bl	80007a8 <UART_SendString>
	  if (digit != mnist_test_labels[i]){
 80008c2:	683b      	ldr	r3, [r7, #0]
	  else UART_SendString(&huart1, "\n");
 80008c4:	481b      	ldr	r0, [pc, #108]	@ (8000934 <pa3_run_model_on_test_dataset+0x16c>)
	  if (digit != mnist_test_labels[i]){
 80008c6:	5d5b      	ldrb	r3, [r3, r5]
	for (int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 80008c8:	3501      	adds	r5, #1
	  if (digit != mnist_test_labels[i]){
 80008ca:	459a      	cmp	sl, r3
		  UART_SendString(&huart1, " *** Error \n");
 80008cc:	bf14      	ite	ne
 80008ce:	4924      	ldrne	r1, [pc, #144]	@ (8000960 <pa3_run_model_on_test_dataset+0x198>)
	  else UART_SendString(&huart1, "\n");
 80008d0:	4924      	ldreq	r1, [pc, #144]	@ (8000964 <pa3_run_model_on_test_dataset+0x19c>)
 80008d2:	f7ff ff69 	bl	80007a8 <UART_SendString>
	  HAL_Delay(20);
 80008d6:	2014      	movs	r0, #20
 80008d8:	f000 ff20 	bl	800171c <HAL_Delay>
	for (int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 80008dc:	2d64      	cmp	r5, #100	@ 0x64
 80008de:	d188      	bne.n	80007f2 <pa3_run_model_on_test_dataset+0x2a>
	  if (recognized_digits[i] == mnist_test_labels[i]) {
 80008e0:	683b      	ldr	r3, [r7, #0]
		  success ++;
 80008e2:	4821      	ldr	r0, [pc, #132]	@ (8000968 <pa3_run_model_on_test_dataset+0x1a0>)
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	3363      	adds	r3, #99	@ 0x63
	  if (recognized_digits[i] == mnist_test_labels[i]) {
 80008e8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80008ec:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80008f0:	428c      	cmp	r4, r1
		  success ++;
 80008f2:	bf02      	ittt	eq
 80008f4:	6801      	ldreq	r1, [r0, #0]
 80008f6:	3101      	addeq	r1, #1
 80008f8:	6001      	streq	r1, [r0, #0]
	for(int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d1f4      	bne.n	80008e8 <pa3_run_model_on_test_dataset+0x120>
	accuracy = (float)success / (float)MNIST_TEST_SUBSET_SIZE;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <pa3_run_model_on_test_dataset+0x1a0>)
 8000900:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800096c <pa3_run_model_on_test_dataset+0x1a4>
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <pa3_run_model_on_test_dataset+0x1a8>)
 800090a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sprintf(buffer, "\n\nNetwork accuracy: %f", accuracy);
 800090e:	4919      	ldr	r1, [pc, #100]	@ (8000974 <pa3_run_model_on_test_dataset+0x1ac>)
 8000910:	480a      	ldr	r0, [pc, #40]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
	accuracy = (float)success / (float)MNIST_TEST_SUBSET_SIZE;
 8000912:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000916:	ed83 7a00 	vstr	s14, [r3]
	sprintf(buffer, "\n\nNetwork accuracy: %f", accuracy);
 800091a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800091e:	ec53 2b17 	vmov	r2, r3, d7
 8000922:	f004 ff0f 	bl	8005744 <siprintf>
	UART_SendString(&huart1, buffer);
 8000926:	4905      	ldr	r1, [pc, #20]	@ (800093c <pa3_run_model_on_test_dataset+0x174>)
 8000928:	e78b      	b.n	8000842 <pa3_run_model_on_test_dataset+0x7a>
 800092a:	bf00      	nop
 800092c:	20001798 	.word	0x20001798
 8000930:	080077d0 	.word	0x080077d0
 8000934:	20001ba4 	.word	0x20001ba4
 8000938:	080077e8 	.word	0x080077e8
 800093c:	2000172c 	.word	0x2000172c
 8000940:	20000eb0 	.word	0x20000eb0
 8000944:	200017fc 	.word	0x200017fc
 8000948:	40022400 	.word	0x40022400
 800094c:	20001b0c 	.word	0x20001b0c
 8000950:	08007809 	.word	0x08007809
 8000954:	08007822 	.word	0x08007822
 8000958:	200016d4 	.word	0x200016d4
 800095c:	0800783a 	.word	0x0800783a
 8000960:	08007869 	.word	0x08007869
 8000964:	08007838 	.word	0x08007838
 8000968:	20001794 	.word	0x20001794
 800096c:	42c80000 	.word	0x42c80000
 8000970:	20001790 	.word	0x20001790
 8000974:	08007876 	.word	0x08007876
 8000978:	20000eb4 	.word	0x20000eb4
 800097c:	200016e0 	.word	0x200016e0
 8000980:	200016dc 	.word	0x200016dc
 8000984:	200016d8 	.word	0x200016d8

08000988 <TIM2_Init_1us>:
void TIM2_Init_1us(void) {
 8000988:	b513      	push	{r0, r1, r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800098a:	4c23      	ldr	r4, [pc, #140]	@ (8000a18 <TIM2_Init_1us+0x90>)
 800098c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6423      	str	r3, [r4, #64]	@ 0x40
 8000994:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	9b01      	ldr	r3, [sp, #4]
    SystemCoreClockUpdate();
 800099e:	f000 fcd5 	bl	800134c <SystemCoreClockUpdate>
	uint32_t tmp = RCC->CFGR & RCC_CFGR_PPRE1; // Get PPRE1 value
 80009a2:	68a3      	ldr	r3, [r4, #8]
	if (tmp == RCC_CFGR_PPRE1_DIV1) {
 80009a4:	f413 53e0 	ands.w	r3, r3, #7168	@ 0x1c00
 80009a8:	d028      	beq.n	80009fc <TIM2_Init_1us+0x74>
	} else if (tmp == RCC_CFGR_PPRE1_DIV2) {
 80009aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009ae:	d027      	beq.n	8000a00 <TIM2_Init_1us+0x78>
	} else if (tmp == RCC_CFGR_PPRE1_DIV4) {
 80009b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80009b4:	d026      	beq.n	8000a04 <TIM2_Init_1us+0x7c>
	} else if (tmp == RCC_CFGR_PPRE1_DIV8) {
 80009b6:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80009ba:	d025      	beq.n	8000a08 <TIM2_Init_1us+0x80>
		apb1_prescaler = 16; // Division by 16
 80009bc:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80009c0:	bf14      	ite	ne
 80009c2:	2201      	movne	r2, #1
 80009c4:	2210      	moveq	r2, #16
    uint32_t timer_clock = (SystemCoreClock / apb1_prescaler) * 2;
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <TIM2_Init_1us+0x94>)
    htim2.Instance = TIM2;
 80009c8:	4c15      	ldr	r4, [pc, #84]	@ (8000a20 <TIM2_Init_1us+0x98>)
    uint32_t timer_clock = (SystemCoreClock / apb1_prescaler) * 2;
 80009ca:	681b      	ldr	r3, [r3, #0]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009cc:	4620      	mov	r0, r4
    uint32_t timer_clock = (SystemCoreClock / apb1_prescaler) * 2;
 80009ce:	fbb3 f3f2 	udiv	r3, r3, r2
    htim2.Instance = TIM2;
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
    uint32_t timer_clock = (SystemCoreClock / apb1_prescaler) * 2;
 80009d6:	005b      	lsls	r3, r3, #1
    htim2.Instance = TIM2;
 80009d8:	6022      	str	r2, [r4, #0]
    htim2.Init.Prescaler = (timer_clock / 1000000) - 1; // Set for 1 µs tick
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <TIM2_Init_1us+0x9c>)
 80009dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80009e0:	3b01      	subs	r3, #1
    htim2.Init.Period = 0xFFFFFFFF; // Max period for 32-bit counter
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
    htim2.Init.Prescaler = (timer_clock / 1000000) - 1; // Set for 1 µs tick
 80009e6:	6063      	str	r3, [r4, #4]
    htim2.Init.Period = 0xFFFFFFFF; // Max period for 32-bit counter
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c4 3202 	strd	r3, r2, [r4, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	6123      	str	r3, [r4, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	61a3      	str	r3, [r4, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009f2:	f001 ff8d 	bl	8002910 <HAL_TIM_Base_Init>
 80009f6:	b148      	cbz	r0, 8000a0c <TIM2_Init_1us+0x84>
 80009f8:	b672      	cpsid	i
  while (1)
 80009fa:	e7fe      	b.n	80009fa <TIM2_Init_1us+0x72>
		apb1_prescaler = 1; // No division
 80009fc:	2201      	movs	r2, #1
 80009fe:	e7e2      	b.n	80009c6 <TIM2_Init_1us+0x3e>
		apb1_prescaler = 2; // Division by 2
 8000a00:	2202      	movs	r2, #2
 8000a02:	e7e0      	b.n	80009c6 <TIM2_Init_1us+0x3e>
		apb1_prescaler = 4; // Division by 4
 8000a04:	2204      	movs	r2, #4
 8000a06:	e7de      	b.n	80009c6 <TIM2_Init_1us+0x3e>
		apb1_prescaler = 8; // Division by 8
 8000a08:	2208      	movs	r2, #8
 8000a0a:	e7dc      	b.n	80009c6 <TIM2_Init_1us+0x3e>
    HAL_TIM_Base_Start(&htim2);
 8000a0c:	4620      	mov	r0, r4
}
 8000a0e:	b002      	add	sp, #8
 8000a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_TIM_Base_Start(&htim2);
 8000a14:	f001 bedc 	b.w	80027d0 <HAL_TIM_Base_Start>
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	20000eb8 	.word	0x20000eb8
 8000a20:	200016e0 	.word	0x200016e0
 8000a24:	000f4240 	.word	0x000f4240

08000a28 <main>:
{
 8000a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a2c:	b093      	sub	sp, #76	@ 0x4c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2e:	2210      	movs	r2, #16
 8000a30:	2100      	movs	r1, #0
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000a32:	f04f 4940 	mov.w	r9, #3221225472	@ 0xc0000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a36:	a80d      	add	r0, sp, #52	@ 0x34
 8000a38:	f004 ff94 	bl	8005964 <memset>
  HAL_MPU_Disable();
 8000a3c:	f000 fee6 	bl	800180c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a40:	2301      	movs	r3, #1
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a42:	a80d      	add	r0, sp, #52	@ 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a44:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000a48:	4bc5      	ldr	r3, [pc, #788]	@ (8000d60 <main+0x338>)
 8000a4a:	e9cd 930e 	strd	r9, r3, [sp, #56]	@ 0x38
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a4e:	4bc5      	ldr	r3, [pc, #788]	@ (8000d64 <main+0x33c>)
 8000a50:	9310      	str	r3, [sp, #64]	@ 0x40
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a52:	f000 fef9 	bl	8001848 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a56:	2004      	movs	r0, #4
 8000a58:	f000 fee6 	bl	8001828 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a60:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a64:	4ac0      	ldr	r2, [pc, #768]	@ (8000d68 <main+0x340>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a70:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a74:	6953      	ldr	r3, [r2, #20]
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a84:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a88:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a8c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a90:	f643 70e0 	movw	r0, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a94:	f3c3 01c9 	ubfx	r1, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a98:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a9c:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a9e:	ea03 0500 	and.w	r5, r3, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aa2:	468b      	mov	fp, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aa4:	ea45 748b 	orr.w	r4, r5, fp, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000aa8:	f1bb 0b01 	subs.w	fp, fp, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aac:	f8c2 4260 	str.w	r4, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000ab0:	d2f8      	bcs.n	8000aa4 <main+0x7c>
    } while(sets-- != 0U);
 8000ab2:	3b20      	subs	r3, #32
 8000ab4:	f113 0f20 	cmn.w	r3, #32
 8000ab8:	d1f1      	bne.n	8000a9e <main+0x76>
 8000aba:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000abe:	6953      	ldr	r3, [r2, #20]
 8000ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000aca:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000ace:	f000 fe07 	bl	80016e0 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2502      	movs	r5, #2
  SystemClock_Config();
 8000ad4:	f7ff fd84 	bl	80005e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	2214      	movs	r2, #20
 8000ada:	2100      	movs	r1, #0
 8000adc:	a80d      	add	r0, sp, #52	@ 0x34
 8000ade:	f004 ff41 	bl	8005964 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	4ba2      	ldr	r3, [pc, #648]	@ (8000d6c <main+0x344>)
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000ae4:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000ae8:	48a1      	ldr	r0, [pc, #644]	@ (8000d70 <main+0x348>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2400      	movs	r4, #0
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aee:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000af0:	2704      	movs	r7, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af6:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afa:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000afe:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b06:	f002 0210 	and.w	r2, r2, #16
 8000b0a:	9202      	str	r2, [sp, #8]
 8000b0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b14:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b18:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000b1c:	9203      	str	r2, [sp, #12]
 8000b1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b22:	f042 0202 	orr.w	r2, r2, #2
 8000b26:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b2a:	f002 0202 	and.w	r2, r2, #2
 8000b2e:	9204      	str	r2, [sp, #16]
 8000b30:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b34:	f042 0208 	orr.w	r2, r2, #8
 8000b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b3c:	f002 0208 	and.w	r2, r2, #8
 8000b40:	9205      	str	r2, [sp, #20]
 8000b42:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b46:	f042 0204 	orr.w	r2, r2, #4
 8000b4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b4e:	f002 0204 	and.w	r2, r2, #4
 8000b52:	9206      	str	r2, [sp, #24]
 8000b54:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b58:	f042 0201 	orr.w	r2, r2, #1
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b60:	f002 0201 	and.w	r2, r2, #1
 8000b64:	9207      	str	r2, [sp, #28]
 8000b66:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b72:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000b76:	9208      	str	r2, [sp, #32]
 8000b78:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b84:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b92:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b96:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000b9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8000b9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ba0:	f042 0220 	orr.w	r2, r2, #32
 8000ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ba8:	f002 0220 	and.w	r2, r2, #32
 8000bac:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8000bc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000bc4:	f001 f80e 	bl	8001be4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2378      	movs	r3, #120	@ 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bca:	a90d      	add	r1, sp, #52	@ 0x34
 8000bcc:	4869      	ldr	r0, [pc, #420]	@ (8000d74 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bd2:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bd8:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bda:	f000 ff1f 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bde:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000be0:	a90d      	add	r1, sp, #52	@ 0x34
 8000be2:	4864      	ldr	r0, [pc, #400]	@ (8000d74 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000be6:	e9cd 6310 	strd	r6, r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f000 ff15 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000bf2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf6:	a90d      	add	r1, sp, #52	@ 0x34
 8000bf8:	485f      	ldr	r0, [pc, #380]	@ (8000d78 <main+0x350>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfa:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f000 ff09 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c0a:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0e:	a90d      	add	r1, sp, #52	@ 0x34
 8000c10:	4858      	ldr	r0, [pc, #352]	@ (8000d74 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c12:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1e:	f000 fefd 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c26:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	a90d      	add	r1, sp, #52	@ 0x34
 8000c2a:	4854      	ldr	r0, [pc, #336]	@ (8000d7c <main+0x354>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2c:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f000 fef1 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000c3a:	f643 4323 	movw	r3, #15395	@ 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	a90d      	add	r1, sp, #52	@ 0x34
 8000c40:	484e      	ldr	r0, [pc, #312]	@ (8000d7c <main+0x354>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c42:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f000 fee5 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8000c52:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	a90d      	add	r1, sp, #52	@ 0x34
 8000c56:	4849      	ldr	r0, [pc, #292]	@ (8000d7c <main+0x354>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000c58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f000 feda 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8000c68:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6a:	a90d      	add	r1, sp, #52	@ 0x34
 8000c6c:	4844      	ldr	r0, [pc, #272]	@ (8000d80 <main+0x358>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000c6e:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7a:	f000 fecf 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000c82:	a90d      	add	r1, sp, #52	@ 0x34
 8000c84:	483f      	ldr	r0, [pc, #252]	@ (8000d84 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c8a:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c90:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f000 fec3 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	483a      	ldr	r0, [pc, #232]	@ (8000d88 <main+0x360>)
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000c9e:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f000 feb7 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	2080      	movs	r0, #128	@ 0x80
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000cb4:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	e9cd 030d 	strd	r0, r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	482f      	ldr	r0, [pc, #188]	@ (8000d7c <main+0x354>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f000 feab 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	a90d      	add	r1, sp, #52	@ 0x34
 8000cca:	482c      	ldr	r0, [pc, #176]	@ (8000d7c <main+0x354>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ccc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f000 fea0 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000cdc:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce0:	a90d      	add	r1, sp, #52	@ 0x34
 8000ce2:	4825      	ldr	r0, [pc, #148]	@ (8000d78 <main+0x350>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce4:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf0:	f000 fe94 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	f242 0c20 	movw	ip, #8224	@ 0x2020
 8000cf8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cfa:	a90d      	add	r1, sp, #52	@ 0x34
 8000cfc:	481c      	ldr	r0, [pc, #112]	@ (8000d70 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	e9cd c30d 	strd	ip, r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d06:	f000 fe89 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin|ARD_D8_Pin
 8000d0a:	f24d 031b 	movw	r3, #53275	@ 0xd01b
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d0e:	a90d      	add	r1, sp, #52	@ 0x34
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d18:	f000 fe80 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d1c:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d20:	a90d      	add	r1, sp, #52	@ 0x34
 8000d22:	4817      	ldr	r0, [pc, #92]	@ (8000d80 <main+0x358>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d24:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d30:	f000 fe74 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8000d34:	f640 0308 	movw	r3, #2056	@ 0x808
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	a90d      	add	r1, sp, #52	@ 0x34
 8000d3a:	4812      	ldr	r0, [pc, #72]	@ (8000d84 <main+0x35c>)
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000d3c:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f000 fe69 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000d4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	a90d      	add	r1, sp, #52	@ 0x34
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d56:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
 8000d5c:	e016      	b.n	8000d8c <main+0x364>
 8000d5e:	bf00      	nop
 8000d60:	03000017 	.word	0x03000017
 8000d64:	01010000 	.word	0x01010000
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40022400 	.word	0x40022400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020c00 	.word	0x40020c00
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020000 	.word	0x40020000
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d8c:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f000 fe45 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d96:	a90d      	add	r1, sp, #52	@ 0x34
 8000d98:	48ca      	ldr	r0, [pc, #808]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da4:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f000 fe39 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8000daa:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dae:	a90d      	add	r1, sp, #52	@ 0x34
 8000db0:	48c5      	ldr	r0, [pc, #788]	@ (80010c8 <main+0x6a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000db8:	f000 fe30 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000dbc:	f240 62ff 	movw	r2, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dc0:	a90d      	add	r1, sp, #52	@ 0x34
 8000dc2:	48c1      	ldr	r0, [pc, #772]	@ (80010c8 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc4:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dd0:	f000 fe24 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8000dd4:	22f8      	movs	r2, #248	@ 0xf8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000dd6:	a90d      	add	r1, sp, #52	@ 0x34
 8000dd8:	48bc      	ldr	r0, [pc, #752]	@ (80010cc <main+0x6a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000de0:	f000 fe1c 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000de4:	2207      	movs	r2, #7
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000dea:	a90d      	add	r1, sp, #52	@ 0x34
 8000dec:	48b8      	ldr	r0, [pc, #736]	@ (80010d0 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000dee:	9211      	str	r2, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f000 fe10 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8000dfc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	a90d      	add	r1, sp, #52	@ 0x34
 8000e02:	48b3      	ldr	r0, [pc, #716]	@ (80010d0 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000e04:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e10:	f000 fe04 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000e14:	2330      	movs	r3, #48	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	a90d      	add	r1, sp, #52	@ 0x34
 8000e18:	48ae      	ldr	r0, [pc, #696]	@ (80010d4 <main+0x6ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	f000 fdfc 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000e24:	2308      	movs	r3, #8
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a90d      	add	r1, sp, #52	@ 0x34
 8000e28:	48aa      	ldr	r0, [pc, #680]	@ (80010d4 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000e2a:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f000 fdf2 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8000e38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	a90d      	add	r1, sp, #52	@ 0x34
 8000e3e:	48a1      	ldr	r0, [pc, #644]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e44:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4a:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f000 fde6 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	a90d      	add	r1, sp, #52	@ 0x34
 8000e56:	48a0      	ldr	r0, [pc, #640]	@ (80010d8 <main+0x6b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f000 fddc 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e64:	f64f 013f 	movw	r1, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e68:	489c      	ldr	r0, [pc, #624]	@ (80010dc <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6a:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e72:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e78:	f000 fdd0 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e7c:	2308      	movs	r3, #8
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	a90d      	add	r1, sp, #52	@ 0x34
 8000e80:	4894      	ldr	r0, [pc, #592]	@ (80010d4 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e82:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f000 fdc6 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000e90:	f64f 712c 	movw	r1, #65324	@ 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e94:	4892      	ldr	r0, [pc, #584]	@ (80010e0 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e96:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000e9a:	f44f 7a80 	mov.w	sl, #256	@ 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea2:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea8:	f000 fdb8 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000eac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	a90d      	add	r1, sp, #52	@ 0x34
 8000eb2:	4885      	ldr	r0, [pc, #532]	@ (80010c8 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000eb4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f000 fdac 	bl	8001a1c <HAL_GPIO_Init>
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	a90d      	add	r1, sp, #52	@ 0x34
 8000ec6:	487f      	ldr	r0, [pc, #508]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ec8:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f000 fda3 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ed6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eda:	f44f 1190 	mov.w	r1, #1179648	@ 0x120000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ede:	487a      	ldr	r0, [pc, #488]	@ (80010c8 <main+0x6a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ee2:	e9cd 210d 	strd	r2, r1, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	a90d      	add	r1, sp, #52	@ 0x34
 8000ee8:	f000 fd98 	bl	8001a1c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000eec:	a90d      	add	r1, sp, #52	@ 0x34
 8000eee:	487a      	ldr	r0, [pc, #488]	@ (80010d8 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef0:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f000 fd8f 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000efe:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	a90d      	add	r1, sp, #52	@ 0x34
 8000f02:	4875      	ldr	r0, [pc, #468]	@ (80010d8 <main+0x6b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f08:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f0e:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	f000 fd84 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000f14:	2110      	movs	r1, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f16:	4872      	ldr	r0, [pc, #456]	@ (80010e0 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f18:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f20:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f000 fd79 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000f2a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	a90d      	add	r1, sp, #52	@ 0x34
 8000f2e:	4868      	ldr	r0, [pc, #416]	@ (80010d0 <main+0x6a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f34:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f3a:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f000 fd6e 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000f40:	2148      	movs	r1, #72	@ 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f42:	4863      	ldr	r0, [pc, #396]	@ (80010d0 <main+0x6a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	e9cd 140d 	strd	r1, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4a:	a90d      	add	r1, sp, #52	@ 0x34
 8000f4c:	f000 fd66 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000f50:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f52:	a90d      	add	r1, sp, #52	@ 0x34
 8000f54:	4861      	ldr	r0, [pc, #388]	@ (80010dc <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000f56:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f000 fd5c 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000f64:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f66:	a90d      	add	r1, sp, #52	@ 0x34
 8000f68:	485c      	ldr	r0, [pc, #368]	@ (80010dc <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000f6a:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f000 fd52 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f78:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	4857      	ldr	r0, [pc, #348]	@ (80010dc <main+0x6b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	e9cd 160d 	strd	r1, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f84:	a90d      	add	r1, sp, #52	@ 0x34
 8000f86:	f000 fd49 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000f8a:	2301      	movs	r3, #1
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	a90d      	add	r1, sp, #52	@ 0x34
 8000f8e:	4852      	ldr	r0, [pc, #328]	@ (80010d8 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f90:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f000 fd3e 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fa0:	2132      	movs	r1, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	484d      	ldr	r0, [pc, #308]	@ (80010d8 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa4:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f000 fd33 	bl	8001a1c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	a90d      	add	r1, sp, #52	@ 0x34
 8000fb8:	4847      	ldr	r0, [pc, #284]	@ (80010d8 <main+0x6b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbc:	e9cd 760d 	strd	r7, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f000 fd2c 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fc4:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	a90d      	add	r1, sp, #52	@ 0x34
 8000fc8:	4846      	ldr	r0, [pc, #280]	@ (80010e4 <main+0x6bc>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fca:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f000 fd22 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd8:	f44f 5e80 	mov.w	lr, #4096	@ 0x1000
 8000fdc:	2312      	movs	r3, #18
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fde:	a90d      	add	r1, sp, #52	@ 0x34
 8000fe0:	483c      	ldr	r0, [pc, #240]	@ (80010d4 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000fe2:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	e9cd e30d 	strd	lr, r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f000 fd16 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ff0:	2309      	movs	r3, #9
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000ff2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	a90d      	add	r1, sp, #52	@ 0x34
 8000ff8:	4836      	ldr	r0, [pc, #216]	@ (80010d4 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ffa:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001004:	f000 fd0a 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001008:	2286      	movs	r2, #134	@ 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	a90d      	add	r1, sp, #52	@ 0x34
 800100c:	482d      	ldr	r0, [pc, #180]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100e:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f000 fcff 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	2301      	movs	r3, #1
 8001020:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001024:	a90d      	add	r1, sp, #52	@ 0x34
 8001026:	4827      	ldr	r0, [pc, #156]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102a:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800102e:	f000 fcf5 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001032:	2250      	movs	r2, #80	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	a90d      	add	r1, sp, #52	@ 0x34
 8001036:	4823      	ldr	r0, [pc, #140]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	e9cd 260d 	strd	r2, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f000 fced 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001042:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001046:	a90d      	add	r1, sp, #52	@ 0x34
 8001048:	4822      	ldr	r0, [pc, #136]	@ (80010d4 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800104a:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001056:	f000 fce1 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800105a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800105c:	a90d      	add	r1, sp, #52	@ 0x34
 800105e:	4820      	ldr	r0, [pc, #128]	@ (80010e0 <main+0x6b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001066:	f000 fcd9 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800106a:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	a90d      	add	r1, sp, #52	@ 0x34
 800106e:	4815      	ldr	r0, [pc, #84]	@ (80010c4 <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001070:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	f04f 0818 	mov.w	r8, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f000 fccc 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001084:	230d      	movs	r3, #13
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001086:	a90d      	add	r1, sp, #52	@ 0x34
 8001088:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800108a:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001094:	f000 fcc2 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001098:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800109a:	a90d      	add	r1, sp, #52	@ 0x34
 800109c:	4810      	ldr	r0, [pc, #64]	@ (80010e0 <main+0x6b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010a2:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010a8:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f000 fcb7 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80010ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	a90d      	add	r1, sp, #52	@ 0x34
 80010b4:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <main+0x6bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ba:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80010c0:	e014      	b.n	80010ec <main+0x6c4>
 80010c2:	bf00      	nop
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40022000 	.word	0x40022000
 80010cc:	40022800 	.word	0x40022800
 80010d0:	40021800 	.word	0x40021800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40021400 	.word	0x40021400
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40022400 	.word	0x40022400
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ec:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f000 fc95 	bl	8001a1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010f4:	a90d      	add	r1, sp, #52	@ 0x34
 80010f6:	4827      	ldr	r0, [pc, #156]	@ (8001194 <main+0x76c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	e9cd 830d 	strd	r8, r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001100:	f000 fc8c 	bl	8001a1c <HAL_GPIO_Init>
  MX_USART1_UART_Init();
 8001104:	f7ff fac2 	bl	800068c <MX_USART1_UART_Init>
  BSP_SDRAM_Init();
 8001108:	f000 fa8a 	bl	8001620 <BSP_SDRAM_Init>
  TIM2_Init_1us();
 800110c:	f7ff fc3c 	bl	8000988 <TIM2_Init_1us>
  HAL_Delay(500);
 8001110:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001114:	f000 fb02 	bl	800171c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 8001118:	4622      	mov	r2, r4
 800111a:	2108      	movs	r1, #8
 800111c:	481d      	ldr	r0, [pc, #116]	@ (8001194 <main+0x76c>)
 800111e:	f000 fd61 	bl	8001be4 <HAL_GPIO_WritePin>
  UART_SendString(&huart1, "Initializing network...\n");
 8001122:	491d      	ldr	r1, [pc, #116]	@ (8001198 <main+0x770>)
 8001124:	481d      	ldr	r0, [pc, #116]	@ (800119c <main+0x774>)
 8001126:	f7ff fb3f 	bl	80007a8 <UART_SendString>
  HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f000 faf6 	bl	800171c <HAL_Delay>
  if (!pa3_ai_network_init()) {
 8001130:	f7ff fac8 	bl	80006c4 <pa3_ai_network_init>
 8001134:	b320      	cbz	r0, 8001180 <main+0x758>
  UART_SendString(&huart1, "Network initialized.\n");
 8001136:	491a      	ldr	r1, [pc, #104]	@ (80011a0 <main+0x778>)
 8001138:	4818      	ldr	r0, [pc, #96]	@ (800119c <main+0x774>)
  ai_network_get_info(network, &report);
 800113a:	4c1a      	ldr	r4, [pc, #104]	@ (80011a4 <main+0x77c>)
  UART_SendString(&huart1, "Network initialized.\n");
 800113c:	f7ff fb34 	bl	80007a8 <UART_SendString>
  ai_network_get_info(network, &report);
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <main+0x780>)
 8001142:	4621      	mov	r1, r4
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f001 ff69 	bl	800301c <ai_network_get_info>
  sprintf(buffer, "   Network name: %s \n", report.model_name);
 800114a:	6822      	ldr	r2, [r4, #0]
 800114c:	4917      	ldr	r1, [pc, #92]	@ (80011ac <main+0x784>)
 800114e:	4818      	ldr	r0, [pc, #96]	@ (80011b0 <main+0x788>)
 8001150:	f004 faf8 	bl	8005744 <siprintf>
  UART_SendString(&huart1, buffer);
 8001154:	4916      	ldr	r1, [pc, #88]	@ (80011b0 <main+0x788>)
 8001156:	4811      	ldr	r0, [pc, #68]	@ (800119c <main+0x774>)
 8001158:	f7ff fb26 	bl	80007a8 <UART_SendString>
  sprintf(buffer, "   Network runtime version: %d.%d.%d \n", report.runtime_version.major, report.runtime_version.minor, report.runtime_version.micro);
 800115c:	7da3      	ldrb	r3, [r4, #22]
 800115e:	4915      	ldr	r1, [pc, #84]	@ (80011b4 <main+0x78c>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <main+0x788>)
 8001164:	7d63      	ldrb	r3, [r4, #21]
 8001166:	7d22      	ldrb	r2, [r4, #20]
 8001168:	f004 faec 	bl	8005744 <siprintf>
  UART_SendString(&huart1, buffer);
 800116c:	4910      	ldr	r1, [pc, #64]	@ (80011b0 <main+0x788>)
 800116e:	480b      	ldr	r0, [pc, #44]	@ (800119c <main+0x774>)
 8001170:	f7ff fb1a 	bl	80007a8 <UART_SendString>
	  pa3_run_model_on_test_dataset();
 8001174:	f7ff fb28 	bl	80007c8 <pa3_run_model_on_test_dataset>
	  HAL_Delay(200);
 8001178:	20c8      	movs	r0, #200	@ 0xc8
 800117a:	f000 facf 	bl	800171c <HAL_Delay>
  while (1)
 800117e:	e7f9      	b.n	8001174 <main+0x74c>
   	UART_SendString(&huart1, "   Error initializing network.\n");
 8001180:	490d      	ldr	r1, [pc, #52]	@ (80011b8 <main+0x790>)
 8001182:	4806      	ldr	r0, [pc, #24]	@ (800119c <main+0x774>)
 8001184:	f7ff fb10 	bl	80007a8 <UART_SendString>
   	__NOP();
 8001188:	bf00      	nop
}
 800118a:	4658      	mov	r0, fp
 800118c:	b013      	add	sp, #76	@ 0x4c
 800118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001192:	bf00      	nop
 8001194:	40022400 	.word	0x40022400
 8001198:	0800788d 	.word	0x0800788d
 800119c:	20001ba4 	.word	0x20001ba4
 80011a0:	080078c6 	.word	0x080078c6
 80011a4:	20001b18 	.word	0x20001b18
 80011a8:	20001ba0 	.word	0x20001ba0
 80011ac:	080078dc 	.word	0x080078dc
 80011b0:	2000172c 	.word	0x2000172c
 80011b4:	080078f2 	.word	0x080078f2
 80011b8:	080078a6 	.word	0x080078a6

080011bc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <Error_Handler+0x2>

080011c0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_MspInit+0x2c>)
{
 80011c2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80011cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ce:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80011d2:	9200      	str	r2, [sp, #0]
 80011d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80011de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e8:	b002      	add	sp, #8
 80011ea:	4770      	bx	lr
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b530      	push	{r4, r5, lr}
 80011f2:	b0ad      	sub	sp, #180	@ 0xb4
 80011f4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	2214      	movs	r2, #20
 80011f8:	2100      	movs	r1, #0
 80011fa:	a803      	add	r0, sp, #12
 80011fc:	f004 fbb2 	bl	8005964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	2290      	movs	r2, #144	@ 0x90
 8001202:	2100      	movs	r1, #0
 8001204:	a808      	add	r0, sp, #32
 8001206:	f004 fbad 	bl	8005964 <memset>
  if(huart->Instance==USART1)
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_UART_MspInit+0x94>)
 800120e:	429a      	cmp	r2, r3
 8001210:	d135      	bne.n	800127e <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001212:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001214:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001216:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001218:	f000 ffd2 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	b108      	cbz	r0, 8001222 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800121e:	f7ff ffcd 	bl	80011bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_UART_MspInit+0x98>)
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001226:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001228:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 800122a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800122c:	4817      	ldr	r0, [pc, #92]	@ (800128c <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800122e:	f042 0210 	orr.w	r2, r2, #16
 8001232:	645a      	str	r2, [r3, #68]	@ 0x44
 8001234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001236:	f002 0210 	and.w	r2, r2, #16
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001240:	f042 0201 	orr.w	r2, r2, #1
 8001244:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800124a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001258:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001262:	f000 fbdb 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001266:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800126a:	a903      	add	r1, sp, #12
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800126e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800127a:	f000 fbcf 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800127e:	b02d      	add	sp, #180	@ 0xb4
 8001280:	bd30      	pop	{r4, r5, pc}
 8001282:	bf00      	nop
 8001284:	40011000 	.word	0x40011000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler>

08001292 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler>

08001294 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler>

08001296 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler>

08001298 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler>

0800129a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 ba2a 	b.w	80016f8 <HAL_IncTick>

080012a4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80012a4:	2001      	movs	r0, #1
 80012a6:	4770      	bx	lr

080012a8 <_kill>:

int _kill(int pid, int sig)
{
 80012a8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012aa:	f004 fb77 	bl	800599c <__errno>
 80012ae:	2316      	movs	r3, #22
 80012b0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80012b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012b6:	bd08      	pop	{r3, pc}

080012b8 <_exit>:

void _exit (int status)
{
 80012b8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80012ba:	f004 fb6f 	bl	800599c <__errno>
 80012be:	2316      	movs	r3, #22
 80012c0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80012c2:	e7fe      	b.n	80012c2 <_exit+0xa>

080012c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c4:	b570      	push	{r4, r5, r6, lr}
 80012c6:	460d      	mov	r5, r1
 80012c8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	460e      	mov	r6, r1
 80012cc:	1b73      	subs	r3, r6, r5
 80012ce:	429c      	cmp	r4, r3
 80012d0:	dc01      	bgt.n	80012d6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80012d2:	4620      	mov	r0, r4
 80012d4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80012d6:	f3af 8000 	nop.w
 80012da:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	e7f5      	b.n	80012cc <_read+0x8>

080012e0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e4:	4770      	bx	lr

080012e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80012e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80012ea:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80012ec:	604b      	str	r3, [r1, #4]
}
 80012ee:	4770      	bx	lr

080012f0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80012f0:	2001      	movs	r0, #1
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80012f4:	2000      	movs	r0, #0
 80012f6:	4770      	bx	lr

080012f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <_sbrk+0x30>)
{
 80012fa:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80012fc:	6811      	ldr	r1, [r2, #0]
{
 80012fe:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001300:	b909      	cbnz	r1, 8001306 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <_sbrk+0x34>)
 8001304:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	6810      	ldr	r0, [r2, #0]
 8001308:	4909      	ldr	r1, [pc, #36]	@ (8001330 <_sbrk+0x38>)
 800130a:	4c0a      	ldr	r4, [pc, #40]	@ (8001334 <_sbrk+0x3c>)
 800130c:	4403      	add	r3, r0
 800130e:	1b09      	subs	r1, r1, r4
 8001310:	428b      	cmp	r3, r1
 8001312:	d906      	bls.n	8001322 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001314:	f004 fb42 	bl	800599c <__errno>
 8001318:	230c      	movs	r3, #12
 800131a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001320:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001322:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001324:	e7fc      	b.n	8001320 <_sbrk+0x28>
 8001326:	bf00      	nop
 8001328:	20001c2c 	.word	0x20001c2c
 800132c:	20001ed0 	.word	0x20001ed0
 8001330:	20080000 	.word	0x20080000
 8001334:	00000800 	.word	0x00000800

08001338 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4a03      	ldr	r2, [pc, #12]	@ (8001348 <SystemInit+0x10>)
 800133a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800133e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001342:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <SystemCoreClockUpdate+0x5c>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001354:	2a04      	cmp	r2, #4
 8001356:	d022      	beq.n	800139e <SystemCoreClockUpdate+0x52>
 8001358:	2a08      	cmp	r2, #8
 800135a:	d122      	bne.n	80013a2 <SystemCoreClockUpdate+0x56>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800135c:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135e:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001360:	0249      	lsls	r1, r1, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001362:	685b      	ldr	r3, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001364:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001368:	bf48      	it	mi
 800136a:	4910      	ldrmi	r1, [pc, #64]	@ (80013ac <SystemCoreClockUpdate+0x60>)
 800136c:	f3c3 1388 	ubfx	r3, r3, #6, #9
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001370:	bf58      	it	pl
 8001372:	490f      	ldrpl	r1, [pc, #60]	@ (80013b0 <SystemCoreClockUpdate+0x64>)
 8001374:	fbb1 f2f2 	udiv	r2, r1, r2
 8001378:	4353      	muls	r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800137a:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <SystemCoreClockUpdate+0x5c>)
 800137c:	6852      	ldr	r2, [r2, #4]
 800137e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8001382:	3201      	adds	r2, #1
 8001384:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001386:	fbb3 f3f2 	udiv	r3, r3, r2
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800138a:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <SystemCoreClockUpdate+0x5c>)
 800138c:	4909      	ldr	r1, [pc, #36]	@ (80013b4 <SystemCoreClockUpdate+0x68>)
 800138e:	6892      	ldr	r2, [r2, #8]
 8001390:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001394:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001396:	40d3      	lsrs	r3, r2
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <SystemCoreClockUpdate+0x6c>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	4770      	bx	lr
  switch (tmp)
 800139e:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <SystemCoreClockUpdate+0x60>)
 80013a0:	e7f3      	b.n	800138a <SystemCoreClockUpdate+0x3e>
 80013a2:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <SystemCoreClockUpdate+0x64>)
 80013a4:	e7f1      	b.n	800138a <SystemCoreClockUpdate+0x3e>
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	017d7840 	.word	0x017d7840
 80013b0:	00f42400 	.word	0x00f42400
 80013b4:	0801abc5 	.word	0x0801abc5
 80013b8:	20000eb8 	.word	0x20000eb8

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	@ (80013fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ffa7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f004 fadd 	bl	80059a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fb1b 	bl	8000a28 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013f8:	20000eb0 	.word	0x20000eb0
  ldr r1, =_edata
 80013fc:	200016b4 	.word	0x200016b4
  ldr r2, =_sidata
 8001400:	0803621c 	.word	0x0803621c
  ldr r2, =_sbss
 8001404:	200016b8 	.word	0x200016b8
  ldr r4, =_ebss
 8001408:	20001ecc 	.word	0x20001ecc

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001414:	4c21      	ldr	r4, [pc, #132]	@ (800149c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001416:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001418:	4d21      	ldr	r5, [pc, #132]	@ (80014a0 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 800141a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800141e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001420:	4621      	mov	r1, r4
{
 8001422:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001428:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800142a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800142e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001432:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001436:	f001 f992 	bl	800275e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800143a:	4630      	mov	r0, r6
 800143c:	f000 f96e 	bl	800171c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001440:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001442:	4621      	mov	r1, r4
 8001444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001448:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800144a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800144e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001452:	f001 f984 	bl	800275e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001456:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001458:	4621      	mov	r1, r4
 800145a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800145e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001460:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001464:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001466:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800146a:	f001 f978 	bl	800275e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800146e:	f44f 730c 	mov.w	r3, #560	@ 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001472:	4621      	mov	r1, r4
 8001474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001478:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800147a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800147c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800147e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001480:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001484:	9b01      	ldr	r3, [sp, #4]
 8001486:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001488:	f001 f969 	bl	800275e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800148c:	4649      	mov	r1, r9
 800148e:	4628      	mov	r0, r5
}
 8001490:	b003      	add	sp, #12
 8001492:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001496:	f001 b981 	b.w	800279c <HAL_SDRAM_ProgramRefreshRate>
 800149a:	bf00      	nop
 800149c:	20001c90 	.word	0x20001c90
 80014a0:	20001cbc 	.word	0x20001cbc

080014a4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014a4:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <BSP_SDRAM_MspInit+0x158>)
 80014a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014a8:	f042 0201 	orr.w	r2, r2, #1
{  
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80014ae:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 80014b0:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 80014b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80014b4:	2703      	movs	r7, #3
{  
 80014b6:	4606      	mov	r6, r0
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80014b8:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_FMC_CLK_ENABLE();
 80014ba:	f002 0201 	and.w	r2, r2, #1
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80014be:	4850      	ldr	r0, [pc, #320]	@ (8001600 <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80014c0:	4c50      	ldr	r4, [pc, #320]	@ (8001604 <BSP_SDRAM_MspInit+0x160>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80014c2:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80014c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ca:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80014ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80014d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014d2:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80014d6:	9202      	str	r2, [sp, #8]
 80014d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014dc:	f042 0208 	orr.w	r2, r2, #8
 80014e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e4:	f002 0208 	and.w	r2, r2, #8
 80014e8:	9203      	str	r2, [sp, #12]
 80014ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ee:	f042 0210 	orr.w	r2, r2, #16
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f6:	f002 0210 	and.w	r2, r2, #16
 80014fa:	9204      	str	r2, [sp, #16]
 80014fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001500:	f042 0220 	orr.w	r2, r2, #32
 8001504:	631a      	str	r2, [r3, #48]	@ 0x30
 8001506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001508:	f002 0220 	and.w	r2, r2, #32
 800150c:	9205      	str	r2, [sp, #20]
 800150e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001512:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
 8001518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800151a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800151e:	9206      	str	r2, [sp, #24]
 8001520:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
 800152a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800152c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001530:	9207      	str	r2, [sp, #28]
 8001532:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800153c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001544:	9308      	str	r3, [sp, #32]
 8001546:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800154e:	230c      	movs	r3, #12
 8001550:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001554:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001558:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800155a:	f000 fa5f 	bl	8001a1c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800155e:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001562:	a909      	add	r1, sp, #36	@ 0x24
 8001564:	4828      	ldr	r0, [pc, #160]	@ (8001608 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001566:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001568:	f000 fa58 	bl	8001a1c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800156c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001570:	a909      	add	r1, sp, #36	@ 0x24
 8001572:	4826      	ldr	r0, [pc, #152]	@ (800160c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001574:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001576:	f000 fa51 	bl	8001a1c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 800157a:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800157e:	a909      	add	r1, sp, #36	@ 0x24
 8001580:	4823      	ldr	r0, [pc, #140]	@ (8001610 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001582:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001584:	f000 fa4a 	bl	8001a1c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001588:	f64f 732c 	movw	r3, #65324	@ 0xff2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800158c:	a909      	add	r1, sp, #36	@ 0x24
 800158e:	4821      	ldr	r0, [pc, #132]	@ (8001614 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001590:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001592:	f000 fa43 	bl	8001a1c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001596:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800159a:	a909      	add	r1, sp, #36	@ 0x24
 800159c:	481e      	ldr	r0, [pc, #120]	@ (8001618 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800159e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80015a0:	f000 fa3c 	bl	8001a1c <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80015a4:	2380      	movs	r3, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015aa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80015ae:	6325      	str	r5, [r4, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80015b0:	6334      	str	r4, [r6, #48]	@ 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 80015b2:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80015b4:	63a6      	str	r6, [r4, #56]	@ 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80015b6:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015be:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015c6:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80015ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80015ce:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80015d0:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <BSP_SDRAM_MspInit+0x178>)
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80015d6:	e9c4 750a 	strd	r7, r5, [r4, #40]	@ 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80015da:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80015dc:	f000 f9f4 	bl	80019c8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80015e0:	4620      	mov	r0, r4
 80015e2:	f000 f973 	bl	80018cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80015e6:	462a      	mov	r2, r5
 80015e8:	210f      	movs	r1, #15
 80015ea:	2038      	movs	r0, #56	@ 0x38
 80015ec:	f000 f8ba 	bl	8001764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80015f0:	2038      	movs	r0, #56	@ 0x38
 80015f2:	f000 f8e9 	bl	80017c8 <HAL_NVIC_EnableIRQ>
}
 80015f6:	b00f      	add	sp, #60	@ 0x3c
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	20001c30 	.word	0x20001c30
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40021c00 	.word	0x40021c00
 8001618:	40022000 	.word	0x40022000
 800161c:	40026410 	.word	0x40026410

08001620 <BSP_SDRAM_Init>:
{ 
 8001620:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001622:	4c19      	ldr	r4, [pc, #100]	@ (8001688 <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8001624:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 8001628:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 800162a:	4d19      	ldr	r5, [pc, #100]	@ (8001690 <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800162c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001630:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001632:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001634:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8001636:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8001638:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 800163c:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8001640:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001644:	2220      	movs	r2, #32
 8001646:	2340      	movs	r3, #64	@ 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001648:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800164a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800164e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001652:	62a1      	str	r1, [r4, #40]	@ 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001654:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001660:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001662:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001666:	f7ff ff1d 	bl	80014a4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800166a:	4629      	mov	r1, r5
 800166c:	4620      	mov	r0, r4
 800166e:	4c09      	ldr	r4, [pc, #36]	@ (8001694 <BSP_SDRAM_Init+0x74>)
 8001670:	f001 f855 	bl	800271e <HAL_SDRAM_Init>
 8001674:	3800      	subs	r0, #0
 8001676:	bf18      	it	ne
 8001678:	2001      	movne	r0, #1
 800167a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800167c:	f240 6003 	movw	r0, #1539	@ 0x603
 8001680:	f7ff fec6 	bl	8001410 <BSP_SDRAM_Initialization_sequence>
}
 8001684:	7820      	ldrb	r0, [r4, #0]
 8001686:	bd38      	pop	{r3, r4, r5, pc}
 8001688:	20001cbc 	.word	0x20001cbc
 800168c:	a0000140 	.word	0xa0000140
 8001690:	20001ca0 	.word	0x20001ca0
 8001694:	20000ebc 	.word	0x20000ebc

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_InitTick+0x3c>)
{
 800169c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_InitTick+0x40>)
 80016aa:	6810      	ldr	r0, [r2, #0]
 80016ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80016b0:	f000 f898 	bl	80017e4 <HAL_SYSTICK_Config>
 80016b4:	4604      	mov	r4, r0
 80016b6:	b958      	cbnz	r0, 80016d0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b8:	2d0f      	cmp	r5, #15
 80016ba:	d809      	bhi.n	80016d0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	4602      	mov	r2, r0
 80016be:	4629      	mov	r1, r5
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016c4:	f000 f84e 	bl	8001764 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <HAL_InitTick+0x44>)
 80016ca:	4620      	mov	r0, r4
 80016cc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7fc      	b.n	80016ce <HAL_InitTick+0x36>
 80016d4:	20000ebd 	.word	0x20000ebd
 80016d8:	20000eb8 	.word	0x20000eb8
 80016dc:	20000ec0 	.word	0x20000ec0

080016e0 <HAL_Init>:
{
 80016e0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f000 f82c 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ffd5 	bl	8001698 <HAL_InitTick>
  HAL_MspInit();
 80016ee:	f7ff fd67 	bl	80011c0 <HAL_MspInit>
}
 80016f2:	2000      	movs	r0, #0
 80016f4:	bd08      	pop	{r3, pc}
	...

080016f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016f8:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <HAL_IncTick+0x10>)
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <HAL_IncTick+0x14>)
 80016fc:	6811      	ldr	r1, [r2, #0]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	440b      	add	r3, r1
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20001cf0 	.word	0x20001cf0
 800170c:	20000ebd 	.word	0x20000ebd

08001710 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001710:	4b01      	ldr	r3, [pc, #4]	@ (8001718 <HAL_GetTick+0x8>)
 8001712:	6818      	ldr	r0, [r3, #0]
}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20001cf0 	.word	0x20001cf0

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fff6 	bl	8001710 <HAL_GetTick>
 8001724:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001728:	bf1e      	ittt	ne
 800172a:	4b04      	ldrne	r3, [pc, #16]	@ (800173c <HAL_Delay+0x20>)
 800172c:	781b      	ldrbne	r3, [r3, #0]
 800172e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	1b43      	subs	r3, r0, r5
 8001736:	42a3      	cmp	r3, r4
 8001738:	d3fa      	bcc.n	8001730 <HAL_Delay+0x14>
  {
  }
}
 800173a:	bd38      	pop	{r3, r4, r5, pc}
 800173c:	20000ebd 	.word	0x20000ebd

08001740 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001742:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001746:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800174e:	0412      	lsls	r2, r2, #16
 8001750:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800175c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001766:	b530      	push	{r4, r5, lr}
 8001768:	68dc      	ldr	r4, [r3, #12]
 800176a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	2b04      	cmp	r3, #4
 8001776:	bf28      	it	cs
 8001778:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001780:	bf8c      	ite	hi
 8001782:	3c03      	subhi	r4, #3
 8001784:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001786:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800178a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	fa03 f304 	lsl.w	r3, r3, r4
 800179c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017a4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80017a6:	db06      	blt.n	80017b6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80017ac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80017b0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017b4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	f000 000f 	and.w	r0, r0, #15
 80017ba:	4a02      	ldr	r2, [pc, #8]	@ (80017c4 <HAL_NVIC_SetPriority+0x60>)
 80017bc:	5413      	strb	r3, [r2, r0]
 80017be:	e7f9      	b.n	80017b4 <HAL_NVIC_SetPriority+0x50>
 80017c0:	e000ed00 	.word	0xe000ed00
 80017c4:	e000ed14 	.word	0xe000ed14

080017c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017c8:	2800      	cmp	r0, #0
 80017ca:	db07      	blt.n	80017dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017cc:	0941      	lsrs	r1, r0, #5
 80017ce:	2301      	movs	r3, #1
 80017d0:	f000 001f 	and.w	r0, r0, #31
 80017d4:	4a02      	ldr	r2, [pc, #8]	@ (80017e0 <HAL_NVIC_EnableIRQ+0x18>)
 80017d6:	4083      	lsls	r3, r0
 80017d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	3801      	subs	r0, #1
 80017e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80017ea:	d20b      	bcs.n	8001804 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <HAL_SYSTICK_Config+0x24>)
 80017f2:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f4:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f6:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001800:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001802:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001804:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800180c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <HAL_MPU_Disable+0x18>)
 8001812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001814:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_MPU_Enable+0x1c>)
 800182a:	f040 0001 	orr.w	r0, r0, #1
 800182e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001834:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800183a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001848:	7843      	ldrb	r3, [r0, #1]
 800184a:	4a14      	ldr	r2, [pc, #80]	@ (800189c <HAL_MPU_ConfigRegion+0x54>)
{
 800184c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800184e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 8001852:	7801      	ldrb	r1, [r0, #0]
 8001854:	b1e9      	cbz	r1, 8001892 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001856:	6843      	ldr	r3, [r0, #4]
 8001858:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800185c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800185e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001860:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001862:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001866:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001868:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800186a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800186e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001870:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001874:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001876:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800187a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800187c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001880:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001882:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001886:	7a01      	ldrb	r1, [r0, #8]
 8001888:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800188c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001890:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001892:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 8001896:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 800189a:	e7f9      	b.n	8001890 <HAL_MPU_ConfigRegion+0x48>
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018a0:	6803      	ldr	r3, [r0, #0]
{
 80018a2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018a4:	2018      	movs	r0, #24
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	3910      	subs	r1, #16
 80018aa:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80018ae:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018b0:	4c05      	ldr	r4, [pc, #20]	@ (80018c8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80018b2:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018b4:	5c20      	ldrb	r0, [r4, r0]
 80018b6:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018b8:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80018bc:	f020 0003 	bic.w	r0, r0, #3
 80018c0:	bf88      	it	hi
 80018c2:	3004      	addhi	r0, #4
 80018c4:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80018c6:	bd10      	pop	{r4, pc}
 80018c8:	0801abd5 	.word	0x0801abd5

080018cc <HAL_DMA_Init>:
{
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ff1e 	bl	8001710 <HAL_GetTick>
 80018d4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d060      	beq.n	800199c <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 80018da:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 80018dc:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80018de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80018e2:	2300      	movs	r3, #0
 80018e4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	07d8      	lsls	r0, r3, #31
 80018f6:	d42e      	bmi.n	8001956 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 80018f8:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018fa:	4832      	ldr	r0, [pc, #200]	@ (80019c4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fc:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018fe:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001900:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001904:	432b      	orrs	r3, r5
 8001906:	68e5      	ldr	r5, [r4, #12]
 8001908:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	6925      	ldr	r5, [r4, #16]
 800190c:	432b      	orrs	r3, r5
 800190e:	6965      	ldr	r5, [r4, #20]
 8001910:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001912:	69e5      	ldr	r5, [r4, #28]
 8001914:	430b      	orrs	r3, r1
 8001916:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001918:	6a25      	ldr	r5, [r4, #32]
 800191a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800191e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001920:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001922:	bf02      	ittt	eq
 8001924:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8001928:	4335      	orreq	r5, r6
 800192a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800192e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8001930:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001932:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001936:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800193a:	d135      	bne.n	80019a8 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 800193c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800193e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001940:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001942:	b38d      	cbz	r5, 80019a8 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001944:	b991      	cbnz	r1, 800196c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8001946:	2801      	cmp	r0, #1
 8001948:	d020      	beq.n	800198c <HAL_DMA_Init+0xc0>
 800194a:	f030 0102 	bics.w	r1, r0, #2
 800194e:	d12b      	bne.n	80019a8 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001950:	01e9      	lsls	r1, r5, #7
 8001952:	d529      	bpl.n	80019a8 <HAL_DMA_Init+0xdc>
 8001954:	e01d      	b.n	8001992 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001956:	f7ff fedb 	bl	8001710 <HAL_GetTick>
 800195a:	1b40      	subs	r0, r0, r5
 800195c:	2805      	cmp	r0, #5
 800195e:	d9c7      	bls.n	80018f0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001960:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001962:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001964:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001966:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800196a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800196c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001970:	d116      	bne.n	80019a0 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8001972:	2803      	cmp	r0, #3
 8001974:	d818      	bhi.n	80019a8 <HAL_DMA_Init+0xdc>
 8001976:	a101      	add	r1, pc, #4	@ (adr r1, 800197c <HAL_DMA_Init+0xb0>)
 8001978:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800197c:	08001993 	.word	0x08001993
 8001980:	08001951 	.word	0x08001951
 8001984:	08001993 	.word	0x08001993
 8001988:	0800198d 	.word	0x0800198d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198c:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001990:	d10a      	bne.n	80019a8 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001992:	2340      	movs	r3, #64	@ 0x40
 8001994:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	2301      	movs	r3, #1
 8001998:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e7e4      	b.n	800196a <HAL_DMA_Init+0x9e>
    switch (tmp)
 80019a0:	2802      	cmp	r0, #2
 80019a2:	d9f6      	bls.n	8001992 <HAL_DMA_Init+0xc6>
 80019a4:	2803      	cmp	r0, #3
 80019a6:	d0d3      	beq.n	8001950 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80019a8:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ff78 	bl	80018a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80019b2:	233f      	movs	r3, #63	@ 0x3f
 80019b4:	4093      	lsls	r3, r2
 80019b6:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80019ba:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019bc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80019be:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80019c2:	e7d2      	b.n	800196a <HAL_DMA_Init+0x9e>
 80019c4:	e010803f 	.word	0xe010803f

080019c8 <HAL_DMA_DeInit>:
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80019ca:	4605      	mov	r5, r0
 80019cc:	b320      	cbz	r0, 8001a18 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80019ce:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	b2dc      	uxtb	r4, r3
 80019d6:	d01d      	beq.n	8001a14 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80019d8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80019da:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80019e4:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 80019e6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80019e8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80019ea:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80019ec:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80019ee:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80019f0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f2:	f7ff ff55 	bl	80018a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80019f8:	233f      	movs	r3, #63	@ 0x3f
 80019fa:	4093      	lsls	r3, r2
 80019fc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8001a00:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001a04:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001a08:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001a0c:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8001a10:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8001a14:	4620      	mov	r0, r4
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a18:	2401      	movs	r4, #1
 8001a1a:	e7fb      	b.n	8001a14 <HAL_DMA_DeInit+0x4c>

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a20:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8001be0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4a6c      	ldr	r2, [pc, #432]	@ (8001bd8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8001a28:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001a2c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8001a32:	43ac      	bics	r4, r5
 8001a34:	f040 80b7 	bne.w	8001ba6 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a38:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a3a:	2703      	movs	r7, #3
 8001a3c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a44:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a48:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a4a:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4e:	2f01      	cmp	r7, #1
 8001a50:	d834      	bhi.n	8001abc <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001a52:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a54:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a58:	68cf      	ldr	r7, [r1, #12]
 8001a5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a5e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8001a62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a66:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001a6e:	409f      	lsls	r7, r3
 8001a70:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001a74:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a76:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a7a:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a7e:	688f      	ldr	r7, [r1, #8]
 8001a80:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a84:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001a88:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	d119      	bne.n	8001ac0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8001a8c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a90:	f003 0a07 	and.w	sl, r3, #7
 8001a94:	f04f 0b0f 	mov.w	fp, #15
 8001a98:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001a9c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001aa0:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aa4:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001aa8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aac:	690f      	ldr	r7, [r1, #16]
 8001aae:	fa07 f70a 	lsl.w	r7, r7, sl
 8001ab2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8001ab6:	f8c8 7020 	str.w	r7, [r8, #32]
 8001aba:	e001      	b.n	8001ac0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abc:	2c03      	cmp	r4, #3
 8001abe:	d1da      	bne.n	8001a76 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001ac0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ac2:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aca:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ace:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001ad2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad4:	d067      	beq.n	8001ba6 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001ada:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ade:	f003 0c03 	and.w	ip, r3, #3
 8001ae2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001aea:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8001af6:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001afa:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001afe:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8001b06:	9401      	str	r4, [sp, #4]
 8001b08:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b0a:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b0c:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b10:	4c32      	ldr	r4, [pc, #200]	@ (8001bdc <HAL_GPIO_Init+0x1c0>)
 8001b12:	42a0      	cmp	r0, r4
 8001b14:	d04e      	beq.n	8001bb4 <HAL_GPIO_Init+0x198>
 8001b16:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b1a:	42a0      	cmp	r0, r4
 8001b1c:	d04c      	beq.n	8001bb8 <HAL_GPIO_Init+0x19c>
 8001b1e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b22:	42a0      	cmp	r0, r4
 8001b24:	d04a      	beq.n	8001bbc <HAL_GPIO_Init+0x1a0>
 8001b26:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b2a:	42a0      	cmp	r0, r4
 8001b2c:	d048      	beq.n	8001bc0 <HAL_GPIO_Init+0x1a4>
 8001b2e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b32:	42a0      	cmp	r0, r4
 8001b34:	d046      	beq.n	8001bc4 <HAL_GPIO_Init+0x1a8>
 8001b36:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b3a:	42a0      	cmp	r0, r4
 8001b3c:	d044      	beq.n	8001bc8 <HAL_GPIO_Init+0x1ac>
 8001b3e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b42:	42a0      	cmp	r0, r4
 8001b44:	d042      	beq.n	8001bcc <HAL_GPIO_Init+0x1b0>
 8001b46:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b4a:	42a0      	cmp	r0, r4
 8001b4c:	d040      	beq.n	8001bd0 <HAL_GPIO_Init+0x1b4>
 8001b4e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b52:	42a0      	cmp	r0, r4
 8001b54:	d03e      	beq.n	8001bd4 <HAL_GPIO_Init+0x1b8>
 8001b56:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001b5a:	42a0      	cmp	r0, r4
 8001b5c:	bf14      	ite	ne
 8001b5e:	240a      	movne	r4, #10
 8001b60:	2409      	moveq	r4, #9
 8001b62:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b66:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b6a:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b6e:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8001b74:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	bf0c      	ite	eq
 8001b78:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001b7a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8001b80:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001b82:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	bf0c      	ite	eq
 8001b86:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001b88:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b8a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8001b8e:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001b90:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	bf0c      	ite	eq
 8001b94:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001b96:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b98:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001b9a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001b9c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	bf54      	ite	pl
 8001ba0:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001ba2:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001ba4:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	2b10      	cmp	r3, #16
 8001baa:	f47f af3d 	bne.w	8001a28 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001bae:	b003      	add	sp, #12
 8001bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bb4:	2400      	movs	r4, #0
 8001bb6:	e7d4      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bb8:	2401      	movs	r4, #1
 8001bba:	e7d2      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bbc:	2402      	movs	r4, #2
 8001bbe:	e7d0      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bc0:	2403      	movs	r4, #3
 8001bc2:	e7ce      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bc4:	2404      	movs	r4, #4
 8001bc6:	e7cc      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bc8:	2405      	movs	r4, #5
 8001bca:	e7ca      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bcc:	2406      	movs	r4, #6
 8001bce:	e7c8      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bd0:	2407      	movs	r4, #7
 8001bd2:	e7c6      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bd4:	2408      	movs	r4, #8
 8001bd6:	e7c4      	b.n	8001b62 <HAL_GPIO_Init+0x146>
 8001bd8:	40013c00 	.word	0x40013c00
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	b10a      	cbz	r2, 8001bea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001be6:	6181      	str	r1, [r0, #24]
  }
}
 8001be8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bea:	0409      	lsls	r1, r1, #16
 8001bec:	e7fb      	b.n	8001be6 <HAL_GPIO_WritePin+0x2>
	...

08001bf0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bf6:	4c19      	ldr	r4, [pc, #100]	@ (8001c5c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c10:	f7ff fd7e 	bl	8001710 <HAL_GetTick>
 8001c14:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c16:	6863      	ldr	r3, [r4, #4]
 8001c18:	03da      	lsls	r2, r3, #15
 8001c1a:	d50c      	bpl.n	8001c36 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c1c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c1e:	4d0f      	ldr	r5, [pc, #60]	@ (8001c5c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c24:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001c26:	f7ff fd73 	bl	8001710 <HAL_GetTick>
 8001c2a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c2c:	686b      	ldr	r3, [r5, #4]
 8001c2e:	039b      	lsls	r3, r3, #14
 8001c30:	d50a      	bpl.n	8001c48 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001c32:	2000      	movs	r0, #0
 8001c34:	e006      	b.n	8001c44 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c36:	f7ff fd6b 	bl	8001710 <HAL_GetTick>
 8001c3a:	1b40      	subs	r0, r0, r5
 8001c3c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001c40:	d9e9      	bls.n	8001c16 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
}
 8001c44:	b003      	add	sp, #12
 8001c46:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c48:	f7ff fd62 	bl	8001710 <HAL_GetTick>
 8001c4c:	1b00      	subs	r0, r0, r4
 8001c4e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001c52:	d9eb      	bls.n	8001c2c <HAL_PWREx_EnableOverDrive+0x3c>
 8001c54:	e7f5      	b.n	8001c42 <HAL_PWREx_EnableOverDrive+0x52>
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c64:	4604      	mov	r4, r0
 8001c66:	b918      	cbnz	r0, 8001c70 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8001c6a:	b002      	add	sp, #8
 8001c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c70:	6803      	ldr	r3, [r0, #0]
 8001c72:	07de      	lsls	r6, r3, #31
 8001c74:	d410      	bmi.n	8001c98 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	079d      	lsls	r5, r3, #30
 8001c7a:	d45e      	bmi.n	8001d3a <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	0719      	lsls	r1, r3, #28
 8001c80:	f100 80a3 	bmi.w	8001dca <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	075a      	lsls	r2, r3, #29
 8001c88:	f100 80c4 	bmi.w	8001e14 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	69a2      	ldr	r2, [r4, #24]
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	f040 812e 	bne.w	8001ef0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	e7e8      	b.n	8001c6a <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c98:	4b93      	ldr	r3, [pc, #588]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	f002 020c 	and.w	r2, r2, #12
 8001ca0:	2a04      	cmp	r2, #4
 8001ca2:	d007      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	f002 020c 	and.w	r2, r2, #12
 8001caa:	2a08      	cmp	r2, #8
 8001cac:	d10a      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x64>
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0259      	lsls	r1, r3, #9
 8001cb2:	d507      	bpl.n	8001cc4 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	039a      	lsls	r2, r3, #14
 8001cba:	d5dc      	bpl.n	8001c76 <HAL_RCC_OscConfig+0x16>
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1d9      	bne.n	8001c76 <HAL_RCC_OscConfig+0x16>
 8001cc2:	e7d1      	b.n	8001c68 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	6863      	ldr	r3, [r4, #4]
 8001cc6:	4d88      	ldr	r5, [pc, #544]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ccc:	d111      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x92>
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fd1b 	bl	8001710 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4e83      	ldr	r6, [pc, #524]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001cdc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	6833      	ldr	r3, [r6, #0]
 8001ce0:	039b      	lsls	r3, r3, #14
 8001ce2:	d4c8      	bmi.n	8001c76 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fd14 	bl	8001710 <HAL_GetTick>
 8001ce8:	1b40      	subs	r0, r0, r5
 8001cea:	2864      	cmp	r0, #100	@ 0x64
 8001cec:	d9f7      	bls.n	8001cde <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001cee:	2003      	movs	r0, #3
 8001cf0:	e7bb      	b.n	8001c6a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	b99b      	cbnz	r3, 8001d1c <HAL_RCC_OscConfig+0xbc>
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d04:	f7ff fd04 	bl	8001710 <HAL_GetTick>
 8001d08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	039f      	lsls	r7, r3, #14
 8001d0e:	d5b2      	bpl.n	8001c76 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fcfe 	bl	8001710 <HAL_GetTick>
 8001d14:	1b80      	subs	r0, r0, r6
 8001d16:	2864      	cmp	r0, #100	@ 0x64
 8001d18:	d9f7      	bls.n	8001d0a <HAL_RCC_OscConfig+0xaa>
 8001d1a:	e7e8      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	d103      	bne.n	8001d2c <HAL_RCC_OscConfig+0xcc>
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d28:	602b      	str	r3, [r5, #0]
 8001d2a:	e7d0      	b.n	8001cce <HAL_RCC_OscConfig+0x6e>
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d38:	e7cc      	b.n	8001cd4 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	f012 0f0c 	tst.w	r2, #12
 8001d42:	d007      	beq.n	8001d54 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	f002 020c 	and.w	r2, r2, #12
 8001d4a:	2a08      	cmp	r2, #8
 8001d4c:	d111      	bne.n	8001d72 <HAL_RCC_OscConfig+0x112>
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	025d      	lsls	r5, r3, #9
 8001d52:	d40e      	bmi.n	8001d72 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d54:	4a64      	ldr	r2, [pc, #400]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	0799      	lsls	r1, r3, #30
 8001d5a:	d502      	bpl.n	8001d62 <HAL_RCC_OscConfig+0x102>
 8001d5c:	68e3      	ldr	r3, [r4, #12]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d182      	bne.n	8001c68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	6921      	ldr	r1, [r4, #16]
 8001d66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001d6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d6e:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d70:	e784      	b.n	8001c7c <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d72:	68e3      	ldr	r3, [r4, #12]
 8001d74:	4d5c      	ldr	r5, [pc, #368]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001d76:	b1bb      	cbz	r3, 8001da8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d80:	f7ff fcc6 	bl	8001710 <HAL_GetTick>
 8001d84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	079b      	lsls	r3, r3, #30
 8001d8a:	d507      	bpl.n	8001d9c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	682b      	ldr	r3, [r5, #0]
 8001d8e:	6922      	ldr	r2, [r4, #16]
 8001d90:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001d94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d98:	602b      	str	r3, [r5, #0]
 8001d9a:	e76f      	b.n	8001c7c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fcb8 	bl	8001710 <HAL_GetTick>
 8001da0:	1b80      	subs	r0, r0, r6
 8001da2:	2802      	cmp	r0, #2
 8001da4:	d9ef      	bls.n	8001d86 <HAL_RCC_OscConfig+0x126>
 8001da6:	e7a2      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001db0:	f7ff fcae 	bl	8001710 <HAL_GetTick>
 8001db4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	682b      	ldr	r3, [r5, #0]
 8001db8:	079f      	lsls	r7, r3, #30
 8001dba:	f57f af5f 	bpl.w	8001c7c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fca7 	bl	8001710 <HAL_GetTick>
 8001dc2:	1b80      	subs	r0, r0, r6
 8001dc4:	2802      	cmp	r0, #2
 8001dc6:	d9f6      	bls.n	8001db6 <HAL_RCC_OscConfig+0x156>
 8001dc8:	e791      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dca:	6963      	ldr	r3, [r4, #20]
 8001dcc:	4d46      	ldr	r5, [pc, #280]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001dce:	b183      	cbz	r3, 8001df2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001dd0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fc9a 	bl	8001710 <HAL_GetTick>
 8001ddc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001de0:	079b      	lsls	r3, r3, #30
 8001de2:	f53f af4f 	bmi.w	8001c84 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff fc93 	bl	8001710 <HAL_GetTick>
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	2802      	cmp	r0, #2
 8001dee:	d9f6      	bls.n	8001dde <HAL_RCC_OscConfig+0x17e>
 8001df0:	e77d      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001df2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fc89 	bl	8001710 <HAL_GetTick>
 8001dfe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001e02:	079f      	lsls	r7, r3, #30
 8001e04:	f57f af3e 	bpl.w	8001c84 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc82 	bl	8001710 <HAL_GetTick>
 8001e0c:	1b80      	subs	r0, r0, r6
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d9f6      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1a0>
 8001e12:	e76c      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e18:	00d5      	lsls	r5, r2, #3
 8001e1a:	d427      	bmi.n	8001e6c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8001e1e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e30:	4d2e      	ldr	r5, [pc, #184]	@ (8001eec <HAL_RCC_OscConfig+0x28c>)
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	05d8      	lsls	r0, r3, #23
 8001e36:	d51b      	bpl.n	8001e70 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	68a3      	ldr	r3, [r4, #8]
 8001e3a:	4d2b      	ldr	r5, [pc, #172]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d127      	bne.n	8001e90 <HAL_RCC_OscConfig+0x230>
 8001e40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fc60 	bl	8001710 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4e25      	ldr	r6, [pc, #148]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001e52:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001e56:	079a      	lsls	r2, r3, #30
 8001e58:	d53f      	bpl.n	8001eda <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8001e5a:	2f00      	cmp	r7, #0
 8001e5c:	f43f af16 	beq.w	8001c8c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_RCC_OscConfig+0x288>)
 8001e62:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	e70f      	b.n	8001c8c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001e6c:	2700      	movs	r7, #0
 8001e6e:	e7df      	b.n	8001e30 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001e78:	f7ff fc4a 	bl	8001710 <HAL_GetTick>
 8001e7c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	05d9      	lsls	r1, r3, #23
 8001e82:	d4d9      	bmi.n	8001e38 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7ff fc44 	bl	8001710 <HAL_GetTick>
 8001e88:	1b80      	subs	r0, r0, r6
 8001e8a:	2864      	cmp	r0, #100	@ 0x64
 8001e8c:	d9f7      	bls.n	8001e7e <HAL_RCC_OscConfig+0x21e>
 8001e8e:	e72e      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	b9ab      	cbnz	r3, 8001ebe <HAL_RCC_OscConfig+0x25e>
 8001e92:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	672b      	str	r3, [r5, #112]	@ 0x70
 8001e9e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fc33 	bl	8001710 <HAL_GetTick>
 8001eaa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001eae:	079b      	lsls	r3, r3, #30
 8001eb0:	d5d3      	bpl.n	8001e5a <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fc2d 	bl	8001710 <HAL_GetTick>
 8001eb6:	1b80      	subs	r0, r0, r6
 8001eb8:	4540      	cmp	r0, r8
 8001eba:	d9f7      	bls.n	8001eac <HAL_RCC_OscConfig+0x24c>
 8001ebc:	e717      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ec2:	d103      	bne.n	8001ecc <HAL_RCC_OscConfig+0x26c>
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	672b      	str	r3, [r5, #112]	@ 0x70
 8001eca:	e7b9      	b.n	8001e40 <HAL_RCC_OscConfig+0x1e0>
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	672b      	str	r3, [r5, #112]	@ 0x70
 8001ed2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	e7b5      	b.n	8001e46 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fc19 	bl	8001710 <HAL_GetTick>
 8001ede:	1b40      	subs	r0, r0, r5
 8001ee0:	4540      	cmp	r0, r8
 8001ee2:	d9b7      	bls.n	8001e54 <HAL_RCC_OscConfig+0x1f4>
 8001ee4:	e703      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4d3c      	ldr	r5, [pc, #240]	@ (8001fe4 <HAL_RCC_OscConfig+0x384>)
 8001ef2:	68ab      	ldr	r3, [r5, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d042      	beq.n	8001f82 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001efc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f04:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	d12f      	bne.n	8001f68 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8001f08:	f7ff fc02 	bl	8001710 <HAL_GetTick>
 8001f0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	682b      	ldr	r3, [r5, #0]
 8001f10:	0199      	lsls	r1, r3, #6
 8001f12:	d423      	bmi.n	8001f5c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001f1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001f22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001f28:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001f2c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f2e:	0852      	lsrs	r2, r2, #1
 8001f30:	3a01      	subs	r2, #1
 8001f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f36:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f40:	f7ff fbe6 	bl	8001710 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	4d27      	ldr	r5, [pc, #156]	@ (8001fe4 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 8001f46:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	019a      	lsls	r2, r3, #6
 8001f4c:	f53f aea2 	bmi.w	8001c94 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff fbde 	bl	8001710 <HAL_GetTick>
 8001f54:	1b00      	subs	r0, r0, r4
 8001f56:	2802      	cmp	r0, #2
 8001f58:	d9f6      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2e8>
 8001f5a:	e6c8      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff fbd8 	bl	8001710 <HAL_GetTick>
 8001f60:	1b80      	subs	r0, r0, r6
 8001f62:	2802      	cmp	r0, #2
 8001f64:	d9d3      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ae>
 8001f66:	e6c2      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001f68:	f7ff fbd2 	bl	8001710 <HAL_GetTick>
 8001f6c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	f57f ae8f 	bpl.w	8001c94 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff fbcb 	bl	8001710 <HAL_GetTick>
 8001f7a:	1b00      	subs	r0, r0, r4
 8001f7c:	2802      	cmp	r0, #2
 8001f7e:	d9f6      	bls.n	8001f6e <HAL_RCC_OscConfig+0x30e>
 8001f80:	e6b5      	b.n	8001cee <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001f84:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f86:	f43f ae6f 	beq.w	8001c68 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8e:	69e1      	ldr	r1, [r4, #28]
 8001f90:	428a      	cmp	r2, r1
 8001f92:	f47f ae69 	bne.w	8001c68 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	6a21      	ldr	r1, [r4, #32]
 8001f9c:	428a      	cmp	r2, r1
 8001f9e:	f47f ae63 	bne.w	8001c68 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa8:	401a      	ands	r2, r3
 8001faa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001fae:	f47f ae5b 	bne.w	8001c68 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fb2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001fb4:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001fb8:	0852      	lsrs	r2, r2, #1
 8001fba:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001fc0:	f47f ae52 	bne.w	8001c68 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fc8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fca:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001fce:	f47f ae4b 	bne.w	8001c68 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fd2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001fd4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001fdc:	bf14      	ite	ne
 8001fde:	2001      	movne	r0, #1
 8001fe0:	2000      	moveq	r0, #0
 8001fe2:	e642      	b.n	8001c6a <HAL_RCC_OscConfig+0xa>
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	4913      	ldr	r1, [pc, #76]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001fea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fec:	688b      	ldr	r3, [r1, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d01b      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x46>
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11b      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ffa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ffc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffe:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002000:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002004:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002008:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800200c:	bf1a      	itte	ne
 800200e:	480b      	ldrne	r0, [pc, #44]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 8002010:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	480b      	ldreq	r0, [pc, #44]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x58>)
 8002014:	fba1 0100 	umull	r0, r1, r1, r0
 8002018:	f7fe f96a 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x50>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002024:	3301      	adds	r3, #1
 8002026:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002028:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800202c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202e:	4803      	ldr	r0, [pc, #12]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 8002030:	e7fc      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8002032:	4803      	ldr	r0, [pc, #12]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002034:	e7fa      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x44>
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	017d7840 	.word	0x017d7840
 8002040:	00f42400 	.word	0x00f42400

08002044 <HAL_RCC_ClockConfig>:
{
 8002044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002048:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800204a:	4604      	mov	r4, r0
 800204c:	b910      	cbnz	r0, 8002054 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
}
 8002050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4a45      	ldr	r2, [pc, #276]	@ (800216c <HAL_RCC_ClockConfig+0x128>)
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	428b      	cmp	r3, r1
 800205e:	d328      	bcc.n	80020b2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	6821      	ldr	r1, [r4, #0]
 8002062:	078f      	lsls	r7, r1, #30
 8002064:	d430      	bmi.n	80020c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	07c8      	lsls	r0, r1, #31
 8002068:	d443      	bmi.n	80020f2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206a:	4a40      	ldr	r2, [pc, #256]	@ (800216c <HAL_RCC_ClockConfig+0x128>)
 800206c:	6813      	ldr	r3, [r2, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	42ab      	cmp	r3, r5
 8002074:	d866      	bhi.n	8002144 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	0751      	lsls	r1, r2, #29
 800207a:	d46f      	bmi.n	800215c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	0713      	lsls	r3, r2, #28
 800207e:	d507      	bpl.n	8002090 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002080:	4a3b      	ldr	r2, [pc, #236]	@ (8002170 <HAL_RCC_ClockConfig+0x12c>)
 8002082:	6921      	ldr	r1, [r4, #16]
 8002084:	6893      	ldr	r3, [r2, #8]
 8002086:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800208a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800208e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002090:	f7ff ffaa 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8002094:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_RCC_ClockConfig+0x12c>)
 8002096:	4a37      	ldr	r2, [pc, #220]	@ (8002174 <HAL_RCC_ClockConfig+0x130>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	40d8      	lsrs	r0, r3
 80020a2:	4b35      	ldr	r3, [pc, #212]	@ (8002178 <HAL_RCC_ClockConfig+0x134>)
 80020a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80020a6:	4b35      	ldr	r3, [pc, #212]	@ (800217c <HAL_RCC_ClockConfig+0x138>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f7ff faf5 	bl	8001698 <HAL_InitTick>
  return HAL_OK;
 80020ae:	2000      	movs	r0, #0
 80020b0:	e7ce      	b.n	8002050 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	f023 030f 	bic.w	r3, r3, #15
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020bc:	6813      	ldr	r3, [r2, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	428b      	cmp	r3, r1
 80020c4:	d1c3      	bne.n	800204e <HAL_RCC_ClockConfig+0xa>
 80020c6:	e7cb      	b.n	8002060 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	f011 0f04 	tst.w	r1, #4
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_RCC_ClockConfig+0x12c>)
 80020ce:	d003      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80020d6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	070e      	lsls	r6, r1, #28
 80020da:	d503      	bpl.n	80020e4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80020e2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	68a0      	ldr	r0, [r4, #8]
 80020e8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80020ec:	4302      	orrs	r2, r0
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e7b9      	b.n	8002066 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	6861      	ldr	r1, [r4, #4]
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_RCC_ClockConfig+0x12c>)
 80020f6:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	d11b      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	d0a5      	beq.n	800204e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002108:	4f19      	ldr	r7, [pc, #100]	@ (8002170 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210a:	f022 0203 	bic.w	r2, r2, #3
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002112:	f7ff fafd 	bl	8001710 <HAL_GetTick>
 8002116:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6862      	ldr	r2, [r4, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002124:	d0a1      	beq.n	800206a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002126:	f7ff faf3 	bl	8001710 <HAL_GetTick>
 800212a:	1b80      	subs	r0, r0, r6
 800212c:	4540      	cmp	r0, r8
 800212e:	d9f3      	bls.n	8002118 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002130:	2003      	movs	r0, #3
 8002132:	e78d      	b.n	8002050 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002134:	2902      	cmp	r1, #2
 8002136:	d102      	bne.n	800213e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800213c:	e7e0      	b.n	8002100 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	f012 0f02 	tst.w	r2, #2
 8002142:	e7dd      	b.n	8002100 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	f023 030f 	bic.w	r3, r3, #15
 800214a:	432b      	orrs	r3, r5
 800214c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	42ab      	cmp	r3, r5
 8002156:	f47f af7a 	bne.w	800204e <HAL_RCC_ClockConfig+0xa>
 800215a:	e78c      	b.n	8002076 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4904      	ldr	r1, [pc, #16]	@ (8002170 <HAL_RCC_ClockConfig+0x12c>)
 800215e:	68e0      	ldr	r0, [r4, #12]
 8002160:	688b      	ldr	r3, [r1, #8]
 8002162:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002166:	4303      	orrs	r3, r0
 8002168:	608b      	str	r3, [r1, #8]
 800216a:	e787      	b.n	800207c <HAL_RCC_ClockConfig+0x38>
 800216c:	40023c00 	.word	0x40023c00
 8002170:	40023800 	.word	0x40023800
 8002174:	0801abc5 	.word	0x0801abc5
 8002178:	20000eb8 	.word	0x20000eb8
 800217c:	20000ec0 	.word	0x20000ec0

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	4a03      	ldr	r2, [pc, #12]	@ (800219c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800218e:	6810      	ldr	r0, [r2, #0]
}
 8002190:	40d8      	lsrs	r0, r3
 8002192:	4770      	bx	lr
 8002194:	40023800 	.word	0x40023800
 8002198:	0801abbd 	.word	0x0801abbd
 800219c:	20000eb8 	.word	0x20000eb8

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	4a03      	ldr	r2, [pc, #12]	@ (80021bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021ae:	6810      	ldr	r0, [r2, #0]
}
 80021b0:	40d8      	lsrs	r0, r3
 80021b2:	4770      	bx	lr
 80021b4:	40023800 	.word	0x40023800
 80021b8:	0801abbd 	.word	0x0801abbd
 80021bc:	20000eb8 	.word	0x20000eb8

080021c0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021c0:	6803      	ldr	r3, [r0, #0]
{
 80021c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021c6:	f013 0601 	ands.w	r6, r3, #1
{
 80021ca:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021ce:	4ab1      	ldr	r2, [pc, #708]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021d0:	6891      	ldr	r1, [r2, #8]
 80021d2:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80021d6:	6091      	str	r1, [r2, #8]
 80021d8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80021da:	6891      	ldr	r1, [r2, #8]
 80021dc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021de:	fab6 f686 	clz	r6, r6
 80021e2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021e4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021e6:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 80021ea:	d012      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ec:	49a9      	ldr	r1, [pc, #676]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021ee:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80021f0:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021f4:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 80021fc:	bf08      	it	eq
 80021fe:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002200:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002204:	bf16      	itet	ne
 8002206:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800220a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800220c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800220e:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002212:	02d9      	lsls	r1, r3, #11
 8002214:	d510      	bpl.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002216:	489f      	ldr	r0, [pc, #636]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002218:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800221a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800221e:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002222:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002226:	ea42 0201 	orr.w	r2, r2, r1
 800222a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800222e:	f000 81aa 	beq.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002232:	2900      	cmp	r1, #0
 8002234:	bf08      	it	eq
 8002236:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002238:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800223c:	bf18      	it	ne
 800223e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002240:	069a      	lsls	r2, r3, #26
 8002242:	d532      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	4b93      	ldr	r3, [pc, #588]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002246:	4f94      	ldr	r7, [pc, #592]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800224a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800224e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002260:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002262:	f7ff fa55 	bl	8001710 <HAL_GetTick>
 8002266:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	05db      	lsls	r3, r3, #23
 800226c:	f140 818d 	bpl.w	800258a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002270:	4f88      	ldr	r7, [pc, #544]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002272:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002276:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800227a:	f040 8191 	bne.w	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002280:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002284:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002288:	4a82      	ldr	r2, [pc, #520]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800228a:	f040 81ae 	bne.w	80025ea <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800228e:	6891      	ldr	r1, [r2, #8]
 8002290:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8002294:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8002298:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800229c:	4301      	orrs	r1, r0
 800229e:	6091      	str	r1, [r2, #8]
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	06da      	lsls	r2, r3, #27
 80022ae:	d50c      	bpl.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022b0:	4a78      	ldr	r2, [pc, #480]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022b2:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80022b6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80022ba:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80022be:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80022c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80022c4:	4301      	orrs	r1, r0
 80022c6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ca:	045f      	lsls	r7, r3, #17
 80022cc:	d508      	bpl.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ce:	4971      	ldr	r1, [pc, #452]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022d0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80022d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80022d6:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80022da:	4302      	orrs	r2, r0
 80022dc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e0:	0418      	lsls	r0, r3, #16
 80022e2:	d508      	bpl.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e4:	496b      	ldr	r1, [pc, #428]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022e6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80022e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80022ec:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80022f0:	4302      	orrs	r2, r0
 80022f2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f6:	03d9      	lsls	r1, r3, #15
 80022f8:	d508      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fa:	4966      	ldr	r1, [pc, #408]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022fc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80022fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002302:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002306:	4302      	orrs	r2, r0
 8002308:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800230c:	039a      	lsls	r2, r3, #14
 800230e:	d508      	bpl.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002310:	4960      	ldr	r1, [pc, #384]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002312:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002314:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002318:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800231c:	4302      	orrs	r2, r0
 800231e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002322:	065f      	lsls	r7, r3, #25
 8002324:	d508      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002326:	495b      	ldr	r1, [pc, #364]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002328:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800232a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800232e:	f022 0203 	bic.w	r2, r2, #3
 8002332:	4302      	orrs	r2, r0
 8002334:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002338:	0618      	lsls	r0, r3, #24
 800233a:	d508      	bpl.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233c:	4955      	ldr	r1, [pc, #340]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800233e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002340:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002344:	f022 020c 	bic.w	r2, r2, #12
 8002348:	4302      	orrs	r2, r0
 800234a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800234e:	05d9      	lsls	r1, r3, #23
 8002350:	d508      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002352:	4950      	ldr	r1, [pc, #320]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002354:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002356:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800235a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800235e:	4302      	orrs	r2, r0
 8002360:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002364:	059a      	lsls	r2, r3, #22
 8002366:	d508      	bpl.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002368:	494a      	ldr	r1, [pc, #296]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800236a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800236c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002370:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002374:	4302      	orrs	r2, r0
 8002376:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800237a:	055f      	lsls	r7, r3, #21
 800237c:	d508      	bpl.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800237e:	4945      	ldr	r1, [pc, #276]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002380:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002382:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002386:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800238a:	4302      	orrs	r2, r0
 800238c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002390:	0518      	lsls	r0, r3, #20
 8002392:	d508      	bpl.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002394:	493f      	ldr	r1, [pc, #252]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002396:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002398:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800239c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80023a0:	4302      	orrs	r2, r0
 80023a2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023a6:	04d9      	lsls	r1, r3, #19
 80023a8:	d508      	bpl.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023aa:	493a      	ldr	r1, [pc, #232]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023ac:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80023ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80023b2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80023b6:	4302      	orrs	r2, r0
 80023b8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023bc:	049a      	lsls	r2, r3, #18
 80023be:	d508      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023c0:	4934      	ldr	r1, [pc, #208]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023c2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80023c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80023c8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80023cc:	4302      	orrs	r2, r0
 80023ce:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023d2:	025f      	lsls	r7, r3, #9
 80023d4:	d508      	bpl.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023d6:	492f      	ldr	r1, [pc, #188]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023d8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80023da:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80023de:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80023e2:	4302      	orrs	r2, r0
 80023e4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023e8:	0298      	lsls	r0, r3, #10
 80023ea:	d50c      	bpl.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023ec:	4829      	ldr	r0, [pc, #164]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023ee:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80023f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80023f4:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023f8:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 80023fc:	bf08      	it	eq
 80023fe:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002400:	430a      	orrs	r2, r1
 8002402:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002406:	f013 0f08 	tst.w	r3, #8
 800240a:	bf18      	it	ne
 800240c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800240e:	0359      	lsls	r1, r3, #13
 8002410:	d508      	bpl.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002412:	4920      	ldr	r1, [pc, #128]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002414:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002416:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800241a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800241e:	4302      	orrs	r2, r0
 8002420:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002424:	021a      	lsls	r2, r3, #8
 8002426:	d509      	bpl.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002428:	491a      	ldr	r1, [pc, #104]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800242a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800242e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002432:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002436:	4302      	orrs	r2, r0
 8002438:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800243c:	015f      	lsls	r7, r3, #5
 800243e:	d509      	bpl.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002440:	4914      	ldr	r1, [pc, #80]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002442:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8002446:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800244a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800244e:	4302      	orrs	r2, r0
 8002450:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002454:	0118      	lsls	r0, r3, #4
 8002456:	d509      	bpl.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002458:	490e      	ldr	r1, [pc, #56]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800245a:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800245e:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8002462:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002466:	4302      	orrs	r2, r0
 8002468:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800246c:	00d9      	lsls	r1, r3, #3
 800246e:	d509      	bpl.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002470:	4908      	ldr	r1, [pc, #32]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002472:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8002476:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800247a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800247e:	4302      	orrs	r2, r0
 8002480:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002484:	2e01      	cmp	r6, #1
 8002486:	f000 80b4 	beq.w	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800248a:	019a      	lsls	r2, r3, #6
 800248c:	f100 80b1 	bmi.w	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002490:	e004      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800249c:	2d01      	cmp	r5, #1
 800249e:	d170      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024a0:	4d9d      	ldr	r5, [pc, #628]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024aa:	f7ff f931 	bl	8001710 <HAL_GetTick>
 80024ae:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024b0:	682b      	ldr	r3, [r5, #0]
 80024b2:	009f      	lsls	r7, r3, #2
 80024b4:	f100 8121 	bmi.w	80026fa <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024b8:	6821      	ldr	r1, [r4, #0]
 80024ba:	030e      	lsls	r6, r1, #12
 80024bc:	d501      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x302>
 80024be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80024c0:	b11b      	cbz	r3, 80024ca <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80024c2:	02cd      	lsls	r5, r1, #11
 80024c4:	d51d      	bpl.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024c8:	b9db      	cbnz	r3, 8002502 <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024ca:	4a93      	ldr	r2, [pc, #588]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024d0:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80024dc:	4303      	orrs	r3, r0
 80024de:	6960      	ldr	r0, [r4, #20]
 80024e0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80024e4:	69a0      	ldr	r0, [r4, #24]
 80024e6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80024ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ee:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80024f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80024f4:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80024f8:	3801      	subs	r0, #1
 80024fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002502:	0288      	lsls	r0, r1, #10
 8002504:	d515      	bpl.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002506:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800250c:	d111      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800250e:	4a82      	ldr	r2, [pc, #520]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002510:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002514:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002518:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800251c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002520:	4303      	orrs	r3, r0
 8002522:	6960      	ldr	r0, [r4, #20]
 8002524:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002528:	6a20      	ldr	r0, [r4, #32]
 800252a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800252e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002532:	070a      	lsls	r2, r1, #28
 8002534:	d519      	bpl.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002536:	4a78      	ldr	r2, [pc, #480]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002538:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800253c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002540:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002548:	430b      	orrs	r3, r1
 800254a:	6961      	ldr	r1, [r4, #20]
 800254c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002550:	69e1      	ldr	r1, [r4, #28]
 8002552:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002556:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800255a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800255e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002560:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002564:	430b      	orrs	r3, r1
 8002566:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800256a:	4c6b      	ldr	r4, [pc, #428]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002572:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7ff f8cc 	bl	8001710 <HAL_GetTick>
 8002578:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	f140 80c3 	bpl.w	8002708 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
 8002584:	e009      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 8002586:	2601      	movs	r6, #1
 8002588:	e656      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7ff f8c1 	bl	8001710 <HAL_GetTick>
 800258e:	eba0 0008 	sub.w	r0, r0, r8
 8002592:	2864      	cmp	r0, #100	@ 0x64
 8002594:	f67f ae68 	bls.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
}
 800259a:	b003      	add	sp, #12
 800259c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025a0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f43f ae6a 	beq.w	800227e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025b6:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80025ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025be:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80025c0:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025c4:	07d8      	lsls	r0, r3, #31
 80025c6:	f57f ae5a 	bpl.w	800227e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 80025ca:	f7ff f8a1 	bl	8001710 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80025d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d6:	0799      	lsls	r1, r3, #30
 80025d8:	f53f ae51 	bmi.w	800227e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7ff f898 	bl	8001710 <HAL_GetTick>
 80025e0:	eba0 0008 	sub.w	r0, r0, r8
 80025e4:	4548      	cmp	r0, r9
 80025e6:	d9f5      	bls.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80025e8:	e7d6      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ea:	6891      	ldr	r1, [r2, #8]
 80025ec:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80025f0:	e655      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 80025f2:	4e49      	ldr	r6, [pc, #292]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80025f4:	6833      	ldr	r3, [r6, #0]
 80025f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025fa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80025fc:	f7ff f888 	bl	8001710 <HAL_GetTick>
 8002600:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002602:	6833      	ldr	r3, [r6, #0]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	d472      	bmi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	07d7      	lsls	r7, r2, #31
 800260c:	d512      	bpl.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800260e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002610:	b983      	cbnz	r3, 8002634 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002612:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002616:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800261a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261e:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002622:	430b      	orrs	r3, r1
 8002624:	6861      	ldr	r1, [r4, #4]
 8002626:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800262a:	68a1      	ldr	r1, [r4, #8]
 800262c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002630:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002634:	0316      	lsls	r6, r2, #12
 8002636:	d503      	bpl.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002638:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800263e:	d005      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002640:	02d0      	lsls	r0, r2, #11
 8002642:	d51e      	bpl.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002644:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800264a:	d11a      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800264c:	4932      	ldr	r1, [pc, #200]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800264e:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002652:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800265a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800265e:	4303      	orrs	r3, r0
 8002660:	6860      	ldr	r0, [r4, #4]
 8002662:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002666:	68e0      	ldr	r0, [r4, #12]
 8002668:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800266c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002670:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8002674:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002676:	f020 001f 	bic.w	r0, r0, #31
 800267a:	3b01      	subs	r3, #1
 800267c:	4303      	orrs	r3, r0
 800267e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002682:	01d1      	lsls	r1, r2, #7
 8002684:	d511      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002686:	4924      	ldr	r1, [pc, #144]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002688:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800268c:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002690:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002694:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002698:	4303      	orrs	r3, r0
 800269a:	6860      	ldr	r0, [r4, #4]
 800269c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026a0:	6920      	ldr	r0, [r4, #16]
 80026a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80026a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026aa:	0192      	lsls	r2, r2, #6
 80026ac:	d50d      	bpl.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ae:	6923      	ldr	r3, [r4, #16]
 80026b0:	6862      	ldr	r2, [r4, #4]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80026b8:	68e2      	ldr	r2, [r4, #12]
 80026ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80026be:	68a2      	ldr	r2, [r4, #8]
 80026c0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80026c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80026ca:	4e13      	ldr	r6, [pc, #76]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80026cc:	6833      	ldr	r3, [r6, #0]
 80026ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026d2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80026d4:	f7ff f81c 	bl	8001710 <HAL_GetTick>
 80026d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026da:	6833      	ldr	r3, [r6, #0]
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	f53f aedd 	bmi.w	800249c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026e2:	f7ff f815 	bl	8001710 <HAL_GetTick>
 80026e6:	1bc0      	subs	r0, r0, r7
 80026e8:	2864      	cmp	r0, #100	@ 0x64
 80026ea:	d9f6      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80026ec:	e754      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ee:	f7ff f80f 	bl	8001710 <HAL_GetTick>
 80026f2:	1bc0      	subs	r0, r0, r7
 80026f4:	2864      	cmp	r0, #100	@ 0x64
 80026f6:	d984      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80026f8:	e74e      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026fa:	f7ff f809 	bl	8001710 <HAL_GetTick>
 80026fe:	1b80      	subs	r0, r0, r6
 8002700:	2864      	cmp	r0, #100	@ 0x64
 8002702:	f67f aed5 	bls.w	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8002706:	e747      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002708:	f7ff f802 	bl	8001710 <HAL_GetTick>
 800270c:	1b40      	subs	r0, r0, r5
 800270e:	2864      	cmp	r0, #100	@ 0x64
 8002710:	f67f af33 	bls.w	800257a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002714:	e740      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800271c:	4770      	bx	lr

0800271e <HAL_SDRAM_Init>:
{
 800271e:	b538      	push	{r3, r4, r5, lr}
 8002720:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8002722:	4604      	mov	r4, r0
 8002724:	b1c8      	cbz	r0, 800275a <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002726:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800272a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800272e:	b91b      	cbnz	r3, 8002738 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8002730:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002734:	f7ff fff2 	bl	800271c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002738:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800273a:	1d21      	adds	r1, r4, #4
 800273c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800273e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002742:	f000 fb99 	bl	8002e78 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002746:	6862      	ldr	r2, [r4, #4]
 8002748:	4629      	mov	r1, r5
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f000 fbcc 	bl	8002ee8 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002750:	2301      	movs	r3, #1
  return HAL_OK;
 8002752:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002754:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8002758:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800275a:	2001      	movs	r0, #1
 800275c:	e7fc      	b.n	8002758 <HAL_SDRAM_Init+0x3a>

0800275e <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800275e:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002760:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8002764:	4605      	mov	r5, r0
 8002766:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002768:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800276a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800276c:	d010      	beq.n	8002790 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800276e:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8002772:	2c01      	cmp	r4, #1
 8002774:	d110      	bne.n	8002798 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002776:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002778:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800277a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800277e:	f000 fbe9 	bl	8002f54 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002782:	6833      	ldr	r3, [r6, #0]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d104      	bne.n	8002792 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002788:	2305      	movs	r3, #5
 800278a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002792:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 8002796:	e7fa      	b.n	800278e <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8002798:	2001      	movs	r0, #1
 800279a:	e7f9      	b.n	8002790 <HAL_SDRAM_SendCommand+0x32>

0800279c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800279c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800279e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80027a2:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	b2d8      	uxtb	r0, r3
 80027a8:	d00d      	beq.n	80027c6 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80027aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	b2dd      	uxtb	r5, r3
 80027b2:	d109      	bne.n	80027c8 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80027b4:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80027b6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80027b8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80027bc:	f000 fbdc 	bl	8002f78 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80027c0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80027c2:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e7fc      	b.n	80027c6 <HAL_SDRAM_ProgramRefreshRate+0x2a>

080027cc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d12f      	bne.n	8002838 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	4a18      	ldr	r2, [pc, #96]	@ (800283c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01a      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ea:	d017      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 80027ec:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 80027f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00f      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 80027fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002800:	4293      	cmp	r3, r2
 8002802:	d00b      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 8002804:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 800280c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <HAL_TIM_Base_Start+0x4c>
 8002814:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002818:	4293      	cmp	r3, r2
 800281a:	d107      	bne.n	800282c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <HAL_TIM_Base_Start+0x70>)
 8002820:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	2a06      	cmp	r2, #6
 8002824:	d006      	beq.n	8002834 <HAL_TIM_Base_Start+0x64>
 8002826:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800282a:	d003      	beq.n	8002834 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2000      	movs	r0, #0
 8002836:	4770      	bx	lr
    return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
}
 800283a:	4770      	bx	lr
 800283c:	40010000 	.word	0x40010000
 8002840:	00010007 	.word	0x00010007

08002844 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002844:	4a30      	ldr	r2, [pc, #192]	@ (8002908 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002846:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002848:	4290      	cmp	r0, r2
 800284a:	d012      	beq.n	8002872 <TIM_Base_SetConfig+0x2e>
 800284c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002850:	d00f      	beq.n	8002872 <TIM_Base_SetConfig+0x2e>
 8002852:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002856:	4290      	cmp	r0, r2
 8002858:	d00b      	beq.n	8002872 <TIM_Base_SetConfig+0x2e>
 800285a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800285e:	4290      	cmp	r0, r2
 8002860:	d007      	beq.n	8002872 <TIM_Base_SetConfig+0x2e>
 8002862:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002866:	4290      	cmp	r0, r2
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x2e>
 800286a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800286e:	4290      	cmp	r0, r2
 8002870:	d119      	bne.n	80028a6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002872:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002878:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800287a:	4a23      	ldr	r2, [pc, #140]	@ (8002908 <TIM_Base_SetConfig+0xc4>)
 800287c:	4290      	cmp	r0, r2
 800287e:	d029      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 8002880:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002884:	d026      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 8002886:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800288a:	4290      	cmp	r0, r2
 800288c:	d022      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 800288e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002892:	4290      	cmp	r0, r2
 8002894:	d01e      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 8002896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800289a:	4290      	cmp	r0, r2
 800289c:	d01a      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 800289e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80028a2:	4290      	cmp	r0, r2
 80028a4:	d016      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 80028a6:	4a19      	ldr	r2, [pc, #100]	@ (800290c <TIM_Base_SetConfig+0xc8>)
 80028a8:	4290      	cmp	r0, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 80028ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028b0:	4290      	cmp	r0, r2
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 80028b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028b8:	4290      	cmp	r0, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 80028bc:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80028c0:	4290      	cmp	r0, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 80028c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028c8:	4290      	cmp	r0, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x90>
 80028cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028d0:	4290      	cmp	r0, r2
 80028d2:	d103      	bne.n	80028dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d8:	68ca      	ldr	r2, [r1, #12]
 80028da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028dc:	694a      	ldr	r2, [r1, #20]
 80028de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80028e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e6:	688b      	ldr	r3, [r1, #8]
 80028e8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ea:	680b      	ldr	r3, [r1, #0]
 80028ec:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <TIM_Base_SetConfig+0xc4>)
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0xb8>
 80028f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028f8:	4298      	cmp	r0, r3
 80028fa:	d101      	bne.n	8002900 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fc:	690b      	ldr	r3, [r1, #16]
 80028fe:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002900:	2301      	movs	r3, #1
 8002902:	6143      	str	r3, [r0, #20]
}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40014000 	.word	0x40014000

08002910 <HAL_TIM_Base_Init>:
{
 8002910:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002912:	4604      	mov	r4, r0
 8002914:	b350      	cbz	r0, 800296c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800291a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800291e:	b91b      	cbnz	r3, 8002928 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002920:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002924:	f7ff ff52 	bl	80027cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800292e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002932:	f7ff ff87 	bl	8002844 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002936:	2301      	movs	r3, #1
  return HAL_OK;
 8002938:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002942:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002946:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800294a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800294e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002956:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800295a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800295e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002962:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002966:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800296a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800296c:	2001      	movs	r0, #1
 800296e:	e7fc      	b.n	800296a <HAL_TIM_Base_Init+0x5a>

08002970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002974:	69c0      	ldr	r0, [r0, #28]
 8002976:	6921      	ldr	r1, [r4, #16]
 8002978:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800297a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800297c:	430a      	orrs	r2, r1
 800297e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002980:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002982:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002984:	497d      	ldr	r1, [pc, #500]	@ (8002b7c <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002986:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002988:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800298a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800298c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002990:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800299c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800299e:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80029a0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029aa:	4a75      	ldr	r2, [pc, #468]	@ (8002b80 <UART_SetConfig+0x210>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d113      	bne.n	80029d8 <UART_SetConfig+0x68>
 80029b0:	4b74      	ldr	r3, [pc, #464]	@ (8002b84 <UART_SetConfig+0x214>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	f000 80a8 	beq.w	8002b10 <UART_SetConfig+0x1a0>
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d021      	beq.n	8002a08 <UART_SetConfig+0x98>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 80bd 	bne.w	8002b44 <UART_SetConfig+0x1d4>

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ca:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80029ce:	f040 809c 	bne.w	8002b0a <UART_SetConfig+0x19a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d2:	f7ff fb09 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
        break;
 80029d6:	e092      	b.n	8002afe <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b88 <UART_SetConfig+0x218>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11b      	bne.n	8002a16 <UART_SetConfig+0xa6>
 80029de:	4b69      	ldr	r3, [pc, #420]	@ (8002b84 <UART_SetConfig+0x214>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	f000 8091 	beq.w	8002b10 <UART_SetConfig+0x1a0>
 80029ee:	d809      	bhi.n	8002a04 <UART_SetConfig+0x94>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80ad 	beq.w	8002b50 <UART_SetConfig+0x1e0>
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d0e7      	beq.n	80029ca <UART_SetConfig+0x5a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029fc:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80029fe:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68

  return ret;
}
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d1f8      	bne.n	80029fa <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a08:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002a0c:	f000 8084 	beq.w	8002b18 <UART_SetConfig+0x1a8>
        pclk = (uint32_t) LSE_VALUE;
 8002a10:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002a14:	e0a3      	b.n	8002b5e <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a16:	4a5d      	ldr	r2, [pc, #372]	@ (8002b8c <UART_SetConfig+0x21c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10e      	bne.n	8002a3a <UART_SetConfig+0xca>
 8002a1c:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <UART_SetConfig+0x214>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d072      	beq.n	8002b10 <UART_SetConfig+0x1a0>
 8002a2a:	d804      	bhi.n	8002a36 <UART_SetConfig+0xc6>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 808f 	beq.w	8002b50 <UART_SetConfig+0x1e0>
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	e7e0      	b.n	80029f8 <UART_SetConfig+0x88>
 8002a36:	2b30      	cmp	r3, #48	@ 0x30
 8002a38:	e7e5      	b.n	8002a06 <UART_SetConfig+0x96>
 8002a3a:	4a55      	ldr	r2, [pc, #340]	@ (8002b90 <UART_SetConfig+0x220>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10d      	bne.n	8002a5c <UART_SetConfig+0xec>
 8002a40:	4b50      	ldr	r3, [pc, #320]	@ (8002b84 <UART_SetConfig+0x214>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a4a:	2b80      	cmp	r3, #128	@ 0x80
 8002a4c:	d060      	beq.n	8002b10 <UART_SetConfig+0x1a0>
 8002a4e:	d803      	bhi.n	8002a58 <UART_SetConfig+0xe8>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07d      	beq.n	8002b50 <UART_SetConfig+0x1e0>
 8002a54:	2b40      	cmp	r3, #64	@ 0x40
 8002a56:	e7cf      	b.n	80029f8 <UART_SetConfig+0x88>
 8002a58:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a5a:	e7d4      	b.n	8002a06 <UART_SetConfig+0x96>
 8002a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b94 <UART_SetConfig+0x224>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d110      	bne.n	8002a84 <UART_SetConfig+0x114>
 8002a62:	4b48      	ldr	r3, [pc, #288]	@ (8002b84 <UART_SetConfig+0x214>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a70:	d04e      	beq.n	8002b10 <UART_SetConfig+0x1a0>
 8002a72:	d804      	bhi.n	8002a7e <UART_SetConfig+0x10e>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d06b      	beq.n	8002b50 <UART_SetConfig+0x1e0>
 8002a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7c:	e7bc      	b.n	80029f8 <UART_SetConfig+0x88>
 8002a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a82:	e7c0      	b.n	8002a06 <UART_SetConfig+0x96>
 8002a84:	4a44      	ldr	r2, [pc, #272]	@ (8002b98 <UART_SetConfig+0x228>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d110      	bne.n	8002aac <UART_SetConfig+0x13c>
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b84 <UART_SetConfig+0x214>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a98:	d03a      	beq.n	8002b10 <UART_SetConfig+0x1a0>
 8002a9a:	d804      	bhi.n	8002aa6 <UART_SetConfig+0x136>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d051      	beq.n	8002b44 <UART_SetConfig+0x1d4>
 8002aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa4:	e7a8      	b.n	80029f8 <UART_SetConfig+0x88>
 8002aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002aaa:	e7ac      	b.n	8002a06 <UART_SetConfig+0x96>
 8002aac:	4a3b      	ldr	r2, [pc, #236]	@ (8002b9c <UART_SetConfig+0x22c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d110      	bne.n	8002ad4 <UART_SetConfig+0x164>
 8002ab2:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <UART_SetConfig+0x214>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac0:	d026      	beq.n	8002b10 <UART_SetConfig+0x1a0>
 8002ac2:	d804      	bhi.n	8002ace <UART_SetConfig+0x15e>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d043      	beq.n	8002b50 <UART_SetConfig+0x1e0>
 8002ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002acc:	e794      	b.n	80029f8 <UART_SetConfig+0x88>
 8002ace:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ad2:	e798      	b.n	8002a06 <UART_SetConfig+0x96>
 8002ad4:	4a32      	ldr	r2, [pc, #200]	@ (8002ba0 <UART_SetConfig+0x230>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d18f      	bne.n	80029fa <UART_SetConfig+0x8a>
 8002ada:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <UART_SetConfig+0x214>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae8:	d012      	beq.n	8002b10 <UART_SetConfig+0x1a0>
 8002aea:	d803      	bhi.n	8002af4 <UART_SetConfig+0x184>
 8002aec:	b383      	cbz	r3, 8002b50 <UART_SetConfig+0x1e0>
 8002aee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002af2:	e781      	b.n	80029f8 <UART_SetConfig+0x88>
 8002af4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002af8:	e785      	b.n	8002a06 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002afa:	f7ff fb41 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002afe:	b958      	cbnz	r0, 8002b18 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b00:	2000      	movs	r0, #0
 8002b02:	e77b      	b.n	80029fc <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b04:	f7ff fb4c 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002b08:	e027      	b.n	8002b5a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0a:	f7ff fa6d 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
        break;
 8002b0e:	e024      	b.n	8002b5a <UART_SetConfig+0x1ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8002b14:	4823      	ldr	r0, [pc, #140]	@ (8002ba4 <UART_SetConfig+0x234>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b16:	d122      	bne.n	8002b5e <UART_SetConfig+0x1ee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b18:	6862      	ldr	r2, [r4, #4]
 8002b1a:	0853      	lsrs	r3, r2, #1
 8002b1c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b20:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b24:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002b28:	f1a3 0110 	sub.w	r1, r3, #16
 8002b2c:	4291      	cmp	r1, r2
 8002b2e:	f63f af64 	bhi.w	80029fa <UART_SetConfig+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b32:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b36:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002b3a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
 8002b42:	e7dd      	b.n	8002b00 <UART_SetConfig+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b44:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002b48:	d1dc      	bne.n	8002b04 <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b4a:	f7ff fb29 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002b4e:	e7d6      	b.n	8002afe <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b50:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002b54:	d0d1      	beq.n	8002afa <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b56:	f7ff fb13 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d0d0      	beq.n	8002b00 <UART_SetConfig+0x190>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002b64:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b68:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002b6c:	f1a3 0110 	sub.w	r1, r3, #16
 8002b70:	4291      	cmp	r1, r2
 8002b72:	f63f af42 	bhi.w	80029fa <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b76:	6822      	ldr	r2, [r4, #0]
 8002b78:	60d3      	str	r3, [r2, #12]
 8002b7a:	e7c1      	b.n	8002b00 <UART_SetConfig+0x190>
 8002b7c:	efff69f3 	.word	0xefff69f3
 8002b80:	40011000 	.word	0x40011000
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40004800 	.word	0x40004800
 8002b90:	40004c00 	.word	0x40004c00
 8002b94:	40005000 	.word	0x40005000
 8002b98:	40011400 	.word	0x40011400
 8002b9c:	40007800 	.word	0x40007800
 8002ba0:	40007c00 	.word	0x40007c00
 8002ba4:	00f42400 	.word	0x00f42400

08002ba8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ba8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002baa:	07da      	lsls	r2, r3, #31
{
 8002bac:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bae:	d506      	bpl.n	8002bbe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb0:	6801      	ldr	r1, [r0, #0]
 8002bb2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002bb4:	684a      	ldr	r2, [r1, #4]
 8002bb6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002bba:	4322      	orrs	r2, r4
 8002bbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bbe:	079c      	lsls	r4, r3, #30
 8002bc0:	d506      	bpl.n	8002bd0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bc2:	6801      	ldr	r1, [r0, #0]
 8002bc4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002bc6:	684a      	ldr	r2, [r1, #4]
 8002bc8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002bcc:	4322      	orrs	r2, r4
 8002bce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bd0:	0759      	lsls	r1, r3, #29
 8002bd2:	d506      	bpl.n	8002be2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd4:	6801      	ldr	r1, [r0, #0]
 8002bd6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002bd8:	684a      	ldr	r2, [r1, #4]
 8002bda:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bde:	4322      	orrs	r2, r4
 8002be0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be2:	071a      	lsls	r2, r3, #28
 8002be4:	d506      	bpl.n	8002bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002be6:	6801      	ldr	r1, [r0, #0]
 8002be8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002bea:	684a      	ldr	r2, [r1, #4]
 8002bec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bf0:	4322      	orrs	r2, r4
 8002bf2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bf4:	06dc      	lsls	r4, r3, #27
 8002bf6:	d506      	bpl.n	8002c06 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bf8:	6801      	ldr	r1, [r0, #0]
 8002bfa:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002bfc:	688a      	ldr	r2, [r1, #8]
 8002bfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c02:	4322      	orrs	r2, r4
 8002c04:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c06:	0699      	lsls	r1, r3, #26
 8002c08:	d506      	bpl.n	8002c18 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c0a:	6801      	ldr	r1, [r0, #0]
 8002c0c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002c0e:	688a      	ldr	r2, [r1, #8]
 8002c10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c14:	4322      	orrs	r2, r4
 8002c16:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c18:	065a      	lsls	r2, r3, #25
 8002c1a:	d510      	bpl.n	8002c3e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c1c:	6801      	ldr	r1, [r0, #0]
 8002c1e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002c20:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c22:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c26:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002c2a:	ea42 0204 	orr.w	r2, r2, r4
 8002c2e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c30:	d105      	bne.n	8002c3e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c32:	684a      	ldr	r2, [r1, #4]
 8002c34:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002c36:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8002c3a:	4322      	orrs	r2, r4
 8002c3c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	d506      	bpl.n	8002c50 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c42:	6802      	ldr	r2, [r0, #0]
 8002c44:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002c46:	6853      	ldr	r3, [r2, #4]
 8002c48:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6053      	str	r3, [r2, #4]
  }
}
 8002c50:	bd10      	pop	{r4, pc}

08002c52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	460f      	mov	r7, r1
 8002c5e:	4616      	mov	r6, r2
 8002c60:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c62:	682a      	ldr	r2, [r5, #0]
 8002c64:	69d3      	ldr	r3, [r2, #28]
 8002c66:	ea37 0303 	bics.w	r3, r7, r3
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	42b3      	cmp	r3, r6
 8002c72:	d001      	beq.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2000      	movs	r0, #0
 8002c76:	e028      	b.n	8002cca <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8002c7c:	d0f2      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7fe fd47 	bl	8001710 <HAL_GetTick>
 8002c82:	eba0 0008 	sub.w	r0, r0, r8
 8002c86:	682c      	ldr	r4, [r5, #0]
 8002c88:	4548      	cmp	r0, r9
 8002c8a:	d802      	bhi.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x40>
 8002c8c:	f1b9 0f00 	cmp.w	r9, #0
 8002c90:	d11d      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x7c>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c96:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	e844 3200 	strex	r2, r3, [r4]
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d1f7      	bne.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	f104 0308 	add.w	r3, r4, #8
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f104 0108 	add.w	r1, r4, #8
 8002cb2:	e841 3200 	strex	r2, r3, [r1]
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	d1f3      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState = HAL_UART_STATE_READY;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          __HAL_UNLOCK(huart);
 8002cc2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002cc4:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002cc6:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
}
 8002cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	075a      	lsls	r2, r3, #29
 8002cd2:	d5c6      	bpl.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cd4:	69e3      	ldr	r3, [r4, #28]
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	d5c3      	bpl.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cde:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	e844 3200 	strex	r2, r3, [r4]
 8002cec:	2a00      	cmp	r2, #0
 8002cee:	d1f7      	bne.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	f104 0308 	add.w	r3, r4, #8
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	f104 0108 	add.w	r1, r4, #8
 8002d00:	e841 3200 	strex	r2, r3, [r1]
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d1f3      	bne.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0x9e>
          huart->gState = HAL_UART_STATE_READY;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d10:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8002d14:	e7d5      	b.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0x70>

08002d16 <HAL_UART_Transmit>:
{
 8002d16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d1a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8002d1e:	4604      	mov	r4, r0
 8002d20:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002d22:	2b20      	cmp	r3, #32
{
 8002d24:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d26:	d141      	bne.n	8002dac <HAL_UART_Transmit+0x96>
    if ((pData == NULL) || (Size == 0U))
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	d041      	beq.n	8002db0 <HAL_UART_Transmit+0x9a>
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d03f      	beq.n	8002db0 <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d30:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	2500      	movs	r5, #0
 8002d34:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d38:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fce9 	bl	8001710 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002d40:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 8002d42:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8002d4a:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4e:	d103      	bne.n	8002d58 <HAL_UART_Transmit+0x42>
 8002d50:	6923      	ldr	r3, [r4, #16]
 8002d52:	b90b      	cbnz	r3, 8002d58 <HAL_UART_Transmit+0x42>
 8002d54:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002d56:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002d58:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002d62:	b292      	uxth	r2, r2
 8002d64:	b93a      	cbnz	r2, 8002d76 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d66:	2140      	movs	r1, #64	@ 0x40
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff ff72 	bl	8002c52 <UART_WaitOnFlagUntilTimeout>
 8002d6e:	b940      	cbnz	r0, 8002d82 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8002d70:	2320      	movs	r3, #32
 8002d72:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002d74:	e006      	b.n	8002d84 <HAL_UART_Transmit+0x6e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d76:	2200      	movs	r2, #0
 8002d78:	2180      	movs	r1, #128	@ 0x80
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff ff69 	bl	8002c52 <UART_WaitOnFlagUntilTimeout>
 8002d80:	b118      	cbz	r0, 8002d8a <HAL_UART_Transmit+0x74>
        return HAL_TIMEOUT;
 8002d82:	2003      	movs	r0, #3
}
 8002d84:	b003      	add	sp, #12
 8002d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002d8c:	b95e      	cbnz	r6, 8002da6 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d96:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8002d98:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8002da4:	e7d8      	b.n	8002d58 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da6:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002daa:	e7f4      	b.n	8002d96 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002dac:	2002      	movs	r0, #2
 8002dae:	e7e9      	b.n	8002d84 <HAL_UART_Transmit+0x6e>
      return  HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7e7      	b.n	8002d84 <HAL_UART_Transmit+0x6e>

08002db4 <UART_CheckIdleState>:
{
 8002db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db6:	2600      	movs	r6, #0
{
 8002db8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8002dbe:	f7fe fca7 	bl	8001710 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dc2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002dc4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	071a      	lsls	r2, r3, #28
 8002dca:	d418      	bmi.n	8002dfe <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	075b      	lsls	r3, r3, #29
 8002dd2:	d50a      	bpl.n	8002dea <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002dde:	4620      	mov	r0, r4
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	462b      	mov	r3, r5
 8002de4:	f7ff ff35 	bl	8002c52 <UART_WaitOnFlagUntilTimeout>
 8002de8:	b9a8      	cbnz	r0, 8002e16 <UART_CheckIdleState+0x62>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002dee:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 8002df2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002df4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dfa:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002dfc:	e00c      	b.n	8002e18 <UART_CheckIdleState+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e02:	4632      	mov	r2, r6
 8002e04:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff ff20 	bl	8002c52 <UART_WaitOnFlagUntilTimeout>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0da      	beq.n	8002dcc <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002e16:	2003      	movs	r0, #3
}
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}

08002e1c <HAL_UART_Init>:
{
 8002e1c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e1e:	4604      	mov	r4, r0
 8002e20:	b340      	cbz	r0, 8002e74 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e22:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002e24:	b91b      	cbnz	r3, 8002e2e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002e26:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8002e2a:	f7fe f9e1 	bl	80011f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002e2e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e32:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e3e:	f7ff fd97 	bl	8002970 <UART_SetConfig>
 8002e42:	2801      	cmp	r0, #1
 8002e44:	d016      	beq.n	8002e74 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e48:	b113      	cbz	r3, 8002e50 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff feac 	bl	8002ba8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e50:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002e52:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e62:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
}
 8002e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002e6e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002e70:	f7ff bfa0 	b.w	8002db4 <UART_CheckIdleState>
}
 8002e74:	2001      	movs	r0, #1
 8002e76:	bd10      	pop	{r4, pc}

08002e78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002e7c:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8002e80:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8002e84:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8002e88:	ea43 0308 	orr.w	r3, r3, r8
 8002e8c:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8002e90:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002e94:	6809      	ldr	r1, [r1, #0]
 8002e96:	b991      	cbnz	r1, 8002ebe <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002e98:	ea43 030e 	orr.w	r3, r3, lr
 8002e9c:	6801      	ldr	r1, [r0, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8002ea4:	ea43 030c 	orr.w	r3, r3, ip
 8002ea8:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8002eac:	433b      	orrs	r3, r7
 8002eae:	4333      	orrs	r3, r6
 8002eb0:	432b      	orrs	r3, r5
 8002eb2:	4323      	orrs	r3, r4
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8002eb8:	2000      	movs	r0, #0
 8002eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002ebe:	6801      	ldr	r1, [r0, #0]
 8002ec0:	ea43 030e 	orr.w	r3, r3, lr
 8002ec4:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8002ecc:	ea42 030c 	orr.w	r3, r2, ip
 8002ed0:	6841      	ldr	r1, [r0, #4]
 8002ed2:	433b      	orrs	r3, r7
 8002ed4:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8002ed8:	4333      	orrs	r3, r6
 8002eda:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8002ede:	432b      	orrs	r3, r5
 8002ee0:	4323      	orrs	r3, r4
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	6043      	str	r3, [r0, #4]
 8002ee6:	e7e7      	b.n	8002eb8 <FMC_SDRAM_Init+0x40>

08002ee8 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002ee8:	68cb      	ldr	r3, [r1, #12]
 8002eea:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 8002eee:	694b      	ldr	r3, [r1, #20]
{
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	680f      	ldr	r7, [r1, #0]
 8002ef6:	684c      	ldr	r4, [r1, #4]
 8002ef8:	688e      	ldr	r6, [r1, #8]
 8002efa:	051b      	lsls	r3, r3, #20
 8002efc:	690d      	ldr	r5, [r1, #16]
 8002efe:	3c01      	subs	r4, #1
 8002f00:	6989      	ldr	r1, [r1, #24]
 8002f02:	3e01      	subs	r6, #1
 8002f04:	3d01      	subs	r5, #1
 8002f06:	3f01      	subs	r7, #1
 8002f08:	3901      	subs	r1, #1
 8002f0a:	0124      	lsls	r4, r4, #4
 8002f0c:	0236      	lsls	r6, r6, #8
 8002f0e:	042d      	lsls	r5, r5, #16
 8002f10:	0609      	lsls	r1, r1, #24
 8002f12:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8002f16:	b95a      	cbnz	r2, 8002f30 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002f18:	433b      	orrs	r3, r7
 8002f1a:	6882      	ldr	r2, [r0, #8]
 8002f1c:	4323      	orrs	r3, r4
 8002f1e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8002f22:	4333      	orrs	r3, r6
 8002f24:	432b      	orrs	r3, r5
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002f30:	6882      	ldr	r2, [r0, #8]
 8002f32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f36:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8002f3a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002f3c:	ea44 0306 	orr.w	r3, r4, r6
 8002f40:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002f42:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002f44:	68c2      	ldr	r2, [r0, #12]
 8002f46:	432b      	orrs	r3, r5
 8002f48:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60c3      	str	r3, [r0, #12]
 8002f52:	e7eb      	b.n	8002f2c <FMC_SDRAM_Timing_Init+0x44>

08002f54 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002f54:	6902      	ldr	r2, [r0, #16]
{
 8002f56:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002f58:	e9d1 3400 	ldrd	r3, r4, [r1]
 8002f5c:	0d92      	lsrs	r2, r2, #22
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	68cc      	ldr	r4, [r1, #12]
 8002f62:	0592      	lsls	r2, r2, #22
 8002f64:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	688a      	ldr	r2, [r1, #8]
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002f72:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8002f74:	2000      	movs	r0, #0
 8002f76:	bd10      	pop	{r4, pc}

08002f78 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002f78:	6943      	ldr	r3, [r0, #20]
 8002f7a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f7e:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8002f82:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002f86:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	4770      	bx	lr

08002f8c <_write>:
#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8002f8c:	b510      	push	{r4, lr}
  bool status = true;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8002f8e:	1e14      	subs	r4, r2, #0
 8002f90:	da0a      	bge.n	8002fa8 <_write+0x1c>
 8002f92:	3801      	subs	r0, #1
 8002f94:	2801      	cmp	r0, #1
 8002f96:	d907      	bls.n	8002fa8 <_write+0x1c>
    errno = EBADF;
 8002f98:	f002 fd00 	bl	800599c <__errno>
    return -1;
 8002f9c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    errno = EBADF;
 8002fa0:	2309      	movs	r3, #9
 8002fa2:	6003      	str	r3, [r0, #0]
#endif /* SWO_OUTPUT */
  status = port_io_write((uint8_t *)buff, count);
#endif /* !HAS_DEDICATED_PRINT_PORT */

  return (status ? count : 0);
}
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <_write+0x38>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f9      	beq.n	8002fa4 <_write+0x18>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002fb0:	b2a2      	uxth	r2, r4
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fb6:	4804      	ldr	r0, [pc, #16]	@ (8002fc8 <_write+0x3c>)
 8002fb8:	f7ff fead 	bl	8002d16 <HAL_UART_Transmit>
  return (status ? count : 0);
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	bf18      	it	ne
 8002fc0:	2400      	movne	r4, #0
 8002fc2:	e7ef      	b.n	8002fa4 <_write+0x18>
 8002fc4:	20000ec4 	.word	0x20000ec4
 8002fc8:	20001ba4 	.word	0x20001ba4

08002fcc <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002fcc:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8002fce:	4d11      	ldr	r5, [pc, #68]	@ (8003014 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002fd0:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002fd2:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002fd4:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 8002fd8:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002fdc:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002fe0:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002fe2:	f002 f8bf 	bl	8005164 <malloc>

  /* remember size */
  if (ptr) {
 8002fe6:	b1a0      	cbz	r0, 8003012 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002fe8:	1903      	adds	r3, r0, r4
 8002fea:	4a0b      	ldr	r2, [pc, #44]	@ (8003018 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002fec:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002fee:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	07db      	lsls	r3, r3, #31
 8002ff4:	d50c      	bpl.n	8003010 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002ff6:	68eb      	ldr	r3, [r5, #12]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8002ffc:	686b      	ldr	r3, [r5, #4]
 8002ffe:	4423      	add	r3, r4
 8003000:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003002:	69ab      	ldr	r3, [r5, #24]
 8003004:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003006:	696b      	ldr	r3, [r5, #20]
 8003008:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 800300a:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 800300c:	bf88      	it	hi
 800300e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003010:	3004      	adds	r0, #4
}
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	20001cf4 	.word	0x20001cf4
 8003018:	efdcba98 	.word	0xefdcba98

0800301c <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	460d      	mov	r5, r1
 8003020:	b0a2      	sub	sp, #136	@ 0x88
 8003022:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8003024:	f000 fa62 	bl	80034ec <ai_platform_context_acquire>
 8003028:	4604      	mov	r4, r0

  if (report && net_ctx)
 800302a:	2d00      	cmp	r5, #0
 800302c:	d033      	beq.n	8003096 <ai_network_get_info+0x7a>
 800302e:	2800      	cmp	r0, #0
 8003030:	d02e      	beq.n	8003090 <ai_network_get_info+0x74>
  {
    ai_network_report r = {
 8003032:	2278      	movs	r2, #120	@ 0x78
 8003034:	2100      	movs	r1, #0
 8003036:	a804      	add	r0, sp, #16
 8003038:	f002 fc94 	bl	8005964 <memset>
 800303c:	4b17      	ldr	r3, [pc, #92]	@ (800309c <ai_network_get_info+0x80>)
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <ai_network_get_info+0x84>)
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	4b17      	ldr	r3, [pc, #92]	@ (80030a4 <ai_network_get_info+0x88>)
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <ai_network_get_info+0x8c>)
 800304a:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800304c:	f000 fa02 	bl	8003454 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8003050:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003052:	f000 fa03 	bl	800345c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <ai_network_get_info+0x90>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8003058:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 800305a:	9306      	str	r3, [sp, #24]
 800305c:	2301      	movs	r3, #1
 800305e:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8003062:	f000 fa13 	bl	800348c <ai_platform_api_get_version>
 8003066:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003068:	f000 fa28 	bl	80034bc <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800306c:	4a10      	ldr	r2, [pc, #64]	@ (80030b0 <ai_network_get_info+0x94>)
 800306e:	2300      	movs	r3, #0
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003070:	900a      	str	r0, [sp, #40]	@ 0x28
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xe51c93ed,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003072:	4669      	mov	r1, sp
 8003074:	4630      	mov	r0, r6
    ai_network_report r = {
 8003076:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <ai_network_get_info+0x98>)
 800307c:	9320      	str	r3, [sp, #128]	@ 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800307e:	f000 fa4f 	bl	8003520 <ai_platform_api_get_network_report>
 8003082:	4604      	mov	r4, r0
 8003084:	b120      	cbz	r0, 8003090 <ai_network_get_info+0x74>

    *report = r;
 8003086:	2288      	movs	r2, #136	@ 0x88
 8003088:	4669      	mov	r1, sp
 800308a:	4628      	mov	r0, r5
 800308c:	f002 fcb3 	bl	80059f6 <memcpy>
    return true;
  }
  return false;
}
 8003090:	4620      	mov	r0, r4
 8003092:	b022      	add	sp, #136	@ 0x88
 8003094:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8003096:	462c      	mov	r4, r5
 8003098:	e7fa      	b.n	8003090 <ai_network_get_info+0x74>
 800309a:	bf00      	nop
 800309c:	0801abdd 	.word	0x0801abdd
 80030a0:	0801abe5 	.word	0x0801abe5
 80030a4:	0801ac08 	.word	0x0801ac08
 80030a8:	0801ac21 	.word	0x0801ac21
 80030ac:	08007839 	.word	0x08007839
 80030b0:	0001ab4a 	.word	0x0001ab4a
 80030b4:	e51c93ed 	.word	0xe51c93ed

080030b8 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80030b8:	f000 ba20 	b.w	80034fc <ai_platform_network_get_error>

080030bc <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80030bc:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80030be:	2305      	movs	r3, #5
 80030c0:	2200      	movs	r2, #0
 80030c2:	e9cd 3200 	strd	r3, r2, [sp]
 80030c6:	2301      	movs	r3, #1
 80030c8:	4a02      	ldr	r2, [pc, #8]	@ (80030d4 <ai_network_create+0x18>)
 80030ca:	f000 fbf3 	bl	80038b4 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80030ce:	b003      	add	sp, #12
 80030d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030d4:	20000ecc 	.word	0x20000ecc

080030d8 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80030d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030dc:	4607      	mov	r7, r0
 80030de:	4688      	mov	r8, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80030e0:	f000 fc2a 	bl	8003938 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80030e4:	4604      	mov	r4, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d06b      	beq.n	80031c2 <ai_network_init+0xea>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80030ea:	4e3d      	ldr	r6, [pc, #244]	@ (80031e0 <ai_network_init+0x108>)
 80030ec:	4642      	mov	r2, r8
 80030ee:	2101      	movs	r1, #1
 80030f0:	4630      	mov	r0, r6
 80030f2:	f000 f8ff 	bl	80032f4 <ai_platform_get_weights_map>
 80030f6:	4605      	mov	r5, r0
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d064      	beq.n	80031c6 <ai_network_init+0xee>
    _Relu_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80030fc:	4a39      	ldr	r2, [pc, #228]	@ (80031e4 <ai_network_init+0x10c>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003104:	6013      	str	r3, [r2, #0]
    _Relu_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8003106:	6833      	ldr	r3, [r6, #0]
    _Relu_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8003108:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _Relu_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800310c:	4a36      	ldr	r2, [pc, #216]	@ (80031e8 <ai_network_init+0x110>)
    _Relu_1_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 109056);
 800310e:	f503 36d5 	add.w	r6, r3, #109056	@ 0x1aa00
    _Relu_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003112:	6811      	ldr	r1, [r2, #0]
 8003114:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003118:	6011      	str	r1, [r2, #0]
    _Relu_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 100352);
 800311a:	f503 31c4 	add.w	r1, r3, #100352	@ 0x18800
    _Relu_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 100352);
 800311e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    _Relu_1_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003122:	4a32      	ldr	r2, [pc, #200]	@ (80031ec <ai_network_init+0x114>)
 8003124:	6811      	ldr	r1, [r2, #0]
 8003126:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800312a:	6011      	str	r1, [r2, #0]
    _Relu_1_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 100864);
 800312c:	f503 31c5 	add.w	r1, r3, #100864	@ 0x18a00
    output_QuantizeLinear_Input_bias_array.data = AI_PTR(g_network_weights_map[0] + 109952);
 8003130:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
    _Relu_1_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 100864);
 8003134:	e9c2 1102 	strd	r1, r1, [r2, #8]
    _Relu_1_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003138:	4a2d      	ldr	r2, [pc, #180]	@ (80031f0 <ai_network_init+0x118>)
    output_QuantizeLinear_Input_bias_array.data = AI_PTR(g_network_weights_map[0] + 109952);
 800313a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
    _Relu_1_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800313e:	6811      	ldr	r1, [r2, #0]
 8003140:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    _Relu_1_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 109056);
 8003144:	e9c2 6602 	strd	r6, r6, [r2, #8]
    _Relu_1_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003148:	6011      	str	r1, [r2, #0]
    output_QuantizeLinear_Input_weights_array.data = AI_PTR(g_network_weights_map[0] + 109312);
 800314a:	f506 7680 	add.w	r6, r6, #256	@ 0x100
    output_QuantizeLinear_Input_weights_array.format |= AI_FMT_FLAG_CONST;
 800314e:	4a29      	ldr	r2, [pc, #164]	@ (80031f4 <ai_network_init+0x11c>)
 8003150:	6811      	ldr	r1, [r2, #0]
 8003152:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    output_QuantizeLinear_Input_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 109312);
 8003156:	e9c2 6602 	strd	r6, r6, [r2, #8]
    output_QuantizeLinear_Input_weights_array.format |= AI_FMT_FLAG_CONST;
 800315a:	6011      	str	r1, [r2, #0]
    output_QuantizeLinear_Input_bias_array.format |= AI_FMT_FLAG_CONST;
 800315c:	4a26      	ldr	r2, [pc, #152]	@ (80031f8 <ai_network_init+0x120>)
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    output_QuantizeLinear_Input_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 109952);
 8003164:	e9c2 3302 	strd	r3, r3, [r2, #8]
    output_QuantizeLinear_Input_bias_array.format |= AI_FMT_FLAG_CONST;
 8003168:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800316a:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8003218 <ai_network_init+0x140>
 800316e:	4642      	mov	r2, r8
 8003170:	2101      	movs	r1, #1
 8003172:	4648      	mov	r0, r9
 8003174:	f000 f916 	bl	80033a4 <ai_platform_get_activations_map>
 8003178:	4606      	mov	r6, r0
 800317a:	b350      	cbz	r0, 80031d2 <ai_network_init+0xfa>
    _Relu_output_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800317c:	f8d9 3000 	ldr.w	r3, [r9]
 8003180:	4a1e      	ldr	r2, [pc, #120]	@ (80031fc <ai_network_init+0x124>)
    input_output_array.data = AI_PTR(g_network_activations_map[0] + 2848);
 8003182:	491f      	ldr	r1, [pc, #124]	@ (8003200 <ai_network_init+0x128>)
    _Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 3632);
 8003184:	f503 6063 	add.w	r0, r3, #3632	@ 0xe30
    _Relu_output_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003188:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _Relu_1_output_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800318c:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <ai_network_init+0x12c>)
    _Relu_1_output_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800318e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    output_QuantizeLinear_Input_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003192:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <ai_network_init+0x130>)
    output_QuantizeLinear_Input_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003194:	e9c2 3302 	strd	r3, r3, [r2, #8]
    input_output_array.data = AI_PTR(g_network_activations_map[0] + 2848);
 8003198:	f503 6232 	add.w	r2, r3, #2848	@ 0xb20
    output_QuantizeLinear_Input_output_array.data = AI_PTR(g_network_activations_map[0] + 2912);
 800319c:	f503 6336 	add.w	r3, r3, #2912	@ 0xb60
    input_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2848);
 80031a0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    _Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 3632);
 80031a4:	4919      	ldr	r1, [pc, #100]	@ (800320c <ai_network_init+0x134>)
    _Relu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3632);
 80031a6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    _Relu_1_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 2848);
 80031aa:	4919      	ldr	r1, [pc, #100]	@ (8003210 <ai_network_init+0x138>)
    _Relu_1_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2848);
 80031ac:	e9c1 2202 	strd	r2, r2, [r1, #8]
    output_QuantizeLinear_Input_output_array.data = AI_PTR(g_network_activations_map[0] + 2912);
 80031b0:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <ai_network_init+0x13c>)
    output_QuantizeLinear_Input_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2912);
 80031b2:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80031b6:	4638      	mov	r0, r7
 80031b8:	f000 fc7e 	bl	8003ab8 <ai_platform_network_post_init>
 80031bc:	4030      	ands	r0, r6
 80031be:	4005      	ands	r5, r0
 80031c0:	b2e8      	uxtb	r0, r5

  return ok;
}
 80031c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80031c6:	2212      	movs	r2, #18
 80031c8:	2130      	movs	r1, #48	@ 0x30
 80031ca:	4620      	mov	r0, r4
 80031cc:	f000 f9a2 	bl	8003514 <ai_platform_network_set_error>
  return false;
 80031d0:	e7cb      	b.n	800316a <ai_network_init+0x92>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80031d2:	2213      	movs	r2, #19
 80031d4:	2130      	movs	r1, #48	@ 0x30
 80031d6:	4620      	mov	r0, r4
 80031d8:	f000 f99c 	bl	8003514 <ai_platform_network_set_error>
  return false;
 80031dc:	e7eb      	b.n	80031b6 <ai_network_init+0xde>
 80031de:	bf00      	nop
 80031e0:	20001d78 	.word	0x20001d78
 80031e4:	20001490 	.word	0x20001490
 80031e8:	20001480 	.word	0x20001480
 80031ec:	20001470 	.word	0x20001470
 80031f0:	20001460 	.word	0x20001460
 80031f4:	20001450 	.word	0x20001450
 80031f8:	20001440 	.word	0x20001440
 80031fc:	20001430 	.word	0x20001430
 8003200:	200014d0 	.word	0x200014d0
 8003204:	20001420 	.word	0x20001420
 8003208:	20001410 	.word	0x20001410
 800320c:	200014c0 	.word	0x200014c0
 8003210:	200014b0 	.word	0x200014b0
 8003214:	200014a0 	.word	0x200014a0
 8003218:	20001d7c 	.word	0x20001d7c

0800321c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800321c:	f000 bc7c 	b.w	8003b18 <ai_platform_network_process>

08003220 <ai_network_data_activations_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8003220:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <ai_network_data_activations_buffer_get+0x24>)
{
 8003222:	b084      	sub	sp, #16
  return buf;
 8003224:	e9c0 2100 	strd	r2, r1, [r0]
 8003228:	2200      	movs	r2, #0
 800322a:	f44f 616b 	mov.w	r1, #3760	@ 0xeb0
 800322e:	f8c0 d018 	str.w	sp, [r0, #24]
 8003232:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8003236:	f240 4201 	movw	r2, #1025	@ 0x401
 800323a:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 800323e:	b004      	add	sp, #16
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	00040440 	.word	0x00040440

08003248 <ai_network_data_weights_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8003248:	4a07      	ldr	r2, [pc, #28]	@ (8003268 <ai_network_data_weights_buffer_get+0x20>)
{
 800324a:	b084      	sub	sp, #16
  return buf;
 800324c:	e9c0 2100 	strd	r2, r1, [r0]
 8003250:	2200      	movs	r2, #0
 8003252:	4906      	ldr	r1, [pc, #24]	@ (800326c <ai_network_data_weights_buffer_get+0x24>)
 8003254:	f8c0 d018 	str.w	sp, [r0, #24]
 8003258:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800325c:	f240 4201 	movw	r2, #1025	@ 0x401
 8003260:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 8003264:	b004      	add	sp, #16
 8003266:	4770      	bx	lr
 8003268:	40040440 	.word	0x40040440
 800326c:	0001ada8 	.word	0x0001ada8

08003270 <ai_network_data_weights_get>:
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
  return AI_HANDLE_PTR(g_network_weights_table);

}
 8003270:	4800      	ldr	r0, [pc, #0]	@ (8003274 <ai_network_data_weights_get+0x4>)
 8003272:	4770      	bx	lr
 8003274:	200014e0 	.word	0x200014e0

08003278 <ai_buffer_get_size>:
 8003278:	b368      	cbz	r0, 80032d6 <ai_buffer_get_size+0x5e>
 800327a:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <ai_buffer_get_size+0x60>)
 800327c:	4a17      	ldr	r2, [pc, #92]	@ (80032dc <ai_buffer_get_size+0x64>)
 800327e:	b410      	push	{r4}
 8003280:	6804      	ldr	r4, [r0, #0]
 8003282:	4023      	ands	r3, r4
 8003284:	4293      	cmp	r3, r2
 8003286:	d123      	bne.n	80032d0 <ai_buffer_get_size+0x58>
 8003288:	b311      	cbz	r1, 80032d0 <ai_buffer_get_size+0x58>
 800328a:	6984      	ldr	r4, [r0, #24]
 800328c:	6862      	ldr	r2, [r4, #4]
 800328e:	321f      	adds	r2, #31
 8003290:	f022 021f 	bic.w	r2, r2, #31
 8003294:	7d03      	ldrb	r3, [r0, #20]
 8003296:	6941      	ldr	r1, [r0, #20]
 8003298:	f1a3 0301 	sub.w	r3, r3, #1
 800329c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80032aa:	da0c      	bge.n	80032c6 <ai_buffer_get_size+0x4e>
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d103      	bne.n	80032b8 <ai_buffer_get_size+0x40>
 80032b0:	2802      	cmp	r0, #2
 80032b2:	f04f 0302 	mov.w	r3, #2
 80032b6:	d006      	beq.n	80032c6 <ai_buffer_get_size+0x4e>
 80032b8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80032bc:	3301      	adds	r3, #1
 80032be:	4298      	cmp	r0, r3
 80032c0:	fb01 f202 	mul.w	r2, r1, r2
 80032c4:	d1f2      	bne.n	80032ac <ai_buffer_get_size+0x34>
 80032c6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80032ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	6984      	ldr	r4, [r0, #24]
 80032d2:	6862      	ldr	r2, [r4, #4]
 80032d4:	e7de      	b.n	8003294 <ai_buffer_get_size+0x1c>
 80032d6:	4770      	bx	lr
 80032d8:	017fffff 	.word	0x017fffff
 80032dc:	000400c0 	.word	0x000400c0

080032e0 <ai_buffer_array_sane>:
 80032e0:	b138      	cbz	r0, 80032f2 <ai_buffer_array_sane+0x12>
 80032e2:	6843      	ldr	r3, [r0, #4]
 80032e4:	b123      	cbz	r3, 80032f0 <ai_buffer_array_sane+0x10>
 80032e6:	8840      	ldrh	r0, [r0, #2]
 80032e8:	3800      	subs	r0, #0
 80032ea:	bf18      	it	ne
 80032ec:	2001      	movne	r0, #1
 80032ee:	4770      	bx	lr
 80032f0:	4618      	mov	r0, r3
 80032f2:	4770      	bx	lr

080032f4 <ai_platform_get_weights_map>:
 80032f4:	2900      	cmp	r1, #0
 80032f6:	bf18      	it	ne
 80032f8:	2800      	cmpne	r0, #0
 80032fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fc:	bf0c      	ite	eq
 80032fe:	2401      	moveq	r4, #1
 8003300:	2400      	movne	r4, #0
 8003302:	2a00      	cmp	r2, #0
 8003304:	bf08      	it	eq
 8003306:	f044 0401 	orreq.w	r4, r4, #1
 800330a:	b114      	cbz	r4, 8003312 <ai_platform_get_weights_map+0x1e>
 800330c:	2400      	movs	r4, #0
 800330e:	4620      	mov	r0, r4
 8003310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003312:	4616      	mov	r6, r2
 8003314:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <ai_platform_get_weights_map+0xac>)
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	4605      	mov	r5, r0
 800331a:	460f      	mov	r7, r1
 800331c:	429a      	cmp	r2, r3
 800331e:	d022      	beq.n	8003366 <ai_platform_get_weights_map+0x72>
 8003320:	6870      	ldr	r0, [r6, #4]
 8003322:	2800      	cmp	r0, #0
 8003324:	d0f2      	beq.n	800330c <ai_platform_get_weights_map+0x18>
 8003326:	6806      	ldr	r6, [r0, #0]
 8003328:	429e      	cmp	r6, r3
 800332a:	d006      	beq.n	800333a <ai_platform_get_weights_map+0x46>
 800332c:	f1a1 0401 	sub.w	r4, r1, #1
 8003330:	6028      	str	r0, [r5, #0]
 8003332:	fab4 f484 	clz	r4, r4
 8003336:	0964      	lsrs	r4, r4, #5
 8003338:	e7e9      	b.n	800330e <ai_platform_get_weights_map+0x1a>
 800333a:	3d04      	subs	r5, #4
 800333c:	4602      	mov	r2, r0
 800333e:	4621      	mov	r1, r4
 8003340:	e000      	b.n	8003344 <ai_platform_get_weights_map+0x50>
 8003342:	4619      	mov	r1, r3
 8003344:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003348:	42b3      	cmp	r3, r6
 800334a:	d025      	beq.n	8003398 <ai_platform_get_weights_map+0xa4>
 800334c:	f845 3f04 	str.w	r3, [r5, #4]!
 8003350:	1c4b      	adds	r3, r1, #1
 8003352:	429f      	cmp	r7, r3
 8003354:	d8f5      	bhi.n	8003342 <ai_platform_get_weights_map+0x4e>
 8003356:	d1da      	bne.n	800330e <ai_platform_get_weights_map+0x1a>
 8003358:	3102      	adds	r1, #2
 800335a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800335e:	42b3      	cmp	r3, r6
 8003360:	d1d5      	bne.n	800330e <ai_platform_get_weights_map+0x1a>
 8003362:	2401      	movs	r4, #1
 8003364:	e7d3      	b.n	800330e <ai_platform_get_weights_map+0x1a>
 8003366:	1d30      	adds	r0, r6, #4
 8003368:	f7ff ffba 	bl	80032e0 <ai_buffer_array_sane>
 800336c:	2800      	cmp	r0, #0
 800336e:	d0cd      	beq.n	800330c <ai_platform_get_weights_map+0x18>
 8003370:	88f3      	ldrh	r3, [r6, #6]
 8003372:	429f      	cmp	r7, r3
 8003374:	d1ca      	bne.n	800330c <ai_platform_get_weights_map+0x18>
 8003376:	3d04      	subs	r5, #4
 8003378:	4622      	mov	r2, r4
 800337a:	68b3      	ldr	r3, [r6, #8]
 800337c:	4423      	add	r3, r4
 800337e:	341c      	adds	r4, #28
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b123      	cbz	r3, 800338e <ai_platform_get_weights_map+0x9a>
 8003384:	3201      	adds	r2, #1
 8003386:	f845 3f04 	str.w	r3, [r5, #4]!
 800338a:	4297      	cmp	r7, r2
 800338c:	d8f5      	bhi.n	800337a <ai_platform_get_weights_map+0x86>
 800338e:	1abc      	subs	r4, r7, r2
 8003390:	fab4 f484 	clz	r4, r4
 8003394:	0964      	lsrs	r4, r4, #5
 8003396:	e7ba      	b.n	800330e <ai_platform_get_weights_map+0x1a>
 8003398:	428f      	cmp	r7, r1
 800339a:	d1b8      	bne.n	800330e <ai_platform_get_weights_map+0x1a>
 800339c:	e7e1      	b.n	8003362 <ai_platform_get_weights_map+0x6e>
 800339e:	bf00      	nop
 80033a0:	a1facade 	.word	0xa1facade

080033a4 <ai_platform_get_activations_map>:
 80033a4:	2900      	cmp	r1, #0
 80033a6:	bf18      	it	ne
 80033a8:	2800      	cmpne	r0, #0
 80033aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ac:	bf0c      	ite	eq
 80033ae:	2401      	moveq	r4, #1
 80033b0:	2400      	movne	r4, #0
 80033b2:	2a00      	cmp	r2, #0
 80033b4:	bf08      	it	eq
 80033b6:	f044 0401 	orreq.w	r4, r4, #1
 80033ba:	b114      	cbz	r4, 80033c2 <ai_platform_get_activations_map+0x1e>
 80033bc:	2400      	movs	r4, #0
 80033be:	4620      	mov	r0, r4
 80033c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c2:	4616      	mov	r6, r2
 80033c4:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <ai_platform_get_activations_map+0xac>)
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	4605      	mov	r5, r0
 80033ca:	460f      	mov	r7, r1
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d022      	beq.n	8003416 <ai_platform_get_activations_map+0x72>
 80033d0:	6a30      	ldr	r0, [r6, #32]
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d0f2      	beq.n	80033bc <ai_platform_get_activations_map+0x18>
 80033d6:	6806      	ldr	r6, [r0, #0]
 80033d8:	429e      	cmp	r6, r3
 80033da:	d006      	beq.n	80033ea <ai_platform_get_activations_map+0x46>
 80033dc:	f1a1 0401 	sub.w	r4, r1, #1
 80033e0:	6028      	str	r0, [r5, #0]
 80033e2:	fab4 f484 	clz	r4, r4
 80033e6:	0964      	lsrs	r4, r4, #5
 80033e8:	e7e9      	b.n	80033be <ai_platform_get_activations_map+0x1a>
 80033ea:	3d04      	subs	r5, #4
 80033ec:	4602      	mov	r2, r0
 80033ee:	4621      	mov	r1, r4
 80033f0:	e000      	b.n	80033f4 <ai_platform_get_activations_map+0x50>
 80033f2:	4619      	mov	r1, r3
 80033f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80033f8:	42b3      	cmp	r3, r6
 80033fa:	d026      	beq.n	800344a <ai_platform_get_activations_map+0xa6>
 80033fc:	f845 3f04 	str.w	r3, [r5, #4]!
 8003400:	1c4b      	adds	r3, r1, #1
 8003402:	429f      	cmp	r7, r3
 8003404:	d8f5      	bhi.n	80033f2 <ai_platform_get_activations_map+0x4e>
 8003406:	d1da      	bne.n	80033be <ai_platform_get_activations_map+0x1a>
 8003408:	3102      	adds	r1, #2
 800340a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800340e:	42b3      	cmp	r3, r6
 8003410:	d1d5      	bne.n	80033be <ai_platform_get_activations_map+0x1a>
 8003412:	2401      	movs	r4, #1
 8003414:	e7d3      	b.n	80033be <ai_platform_get_activations_map+0x1a>
 8003416:	f106 000c 	add.w	r0, r6, #12
 800341a:	f7ff ff61 	bl	80032e0 <ai_buffer_array_sane>
 800341e:	2800      	cmp	r0, #0
 8003420:	d0cc      	beq.n	80033bc <ai_platform_get_activations_map+0x18>
 8003422:	89f3      	ldrh	r3, [r6, #14]
 8003424:	429f      	cmp	r7, r3
 8003426:	d1c9      	bne.n	80033bc <ai_platform_get_activations_map+0x18>
 8003428:	3d04      	subs	r5, #4
 800342a:	4622      	mov	r2, r4
 800342c:	6933      	ldr	r3, [r6, #16]
 800342e:	4423      	add	r3, r4
 8003430:	341c      	adds	r4, #28
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	b123      	cbz	r3, 8003440 <ai_platform_get_activations_map+0x9c>
 8003436:	3201      	adds	r2, #1
 8003438:	f845 3f04 	str.w	r3, [r5, #4]!
 800343c:	4297      	cmp	r7, r2
 800343e:	d8f5      	bhi.n	800342c <ai_platform_get_activations_map+0x88>
 8003440:	1abc      	subs	r4, r7, r2
 8003442:	fab4 f484 	clz	r4, r4
 8003446:	0964      	lsrs	r4, r4, #5
 8003448:	e7b9      	b.n	80033be <ai_platform_get_activations_map+0x1a>
 800344a:	428f      	cmp	r7, r1
 800344c:	d1b7      	bne.n	80033be <ai_platform_get_activations_map+0x1a>
 800344e:	e7e0      	b.n	8003412 <ai_platform_get_activations_map+0x6e>
 8003450:	a1facade 	.word	0xa1facade

08003454 <ai_platform_runtime_get_revision>:
 8003454:	4800      	ldr	r0, [pc, #0]	@ (8003458 <ai_platform_runtime_get_revision+0x4>)
 8003456:	4770      	bx	lr
 8003458:	08035e88 	.word	0x08035e88

0800345c <ai_platform_runtime_get_version>:
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <ai_platform_runtime_get_version+0x2c>)
 800345e:	2000      	movs	r0, #0
 8003460:	b082      	sub	sp, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa5f fc83 	uxtb.w	ip, r3
 8003468:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800346c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003470:	0e1b      	lsrs	r3, r3, #24
 8003472:	f36c 0007 	bfi	r0, ip, #0, #8
 8003476:	f361 200f 	bfi	r0, r1, #8, #8
 800347a:	f362 4017 	bfi	r0, r2, #16, #8
 800347e:	f363 601f 	bfi	r0, r3, #24, #8
 8003482:	b002      	add	sp, #8
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	08035e8c 	.word	0x08035e8c

0800348c <ai_platform_api_get_version>:
 800348c:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <ai_platform_api_get_version+0x2c>)
 800348e:	2000      	movs	r0, #0
 8003490:	b082      	sub	sp, #8
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa5f fc83 	uxtb.w	ip, r3
 8003498:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800349c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80034a0:	0e1b      	lsrs	r3, r3, #24
 80034a2:	f36c 0007 	bfi	r0, ip, #0, #8
 80034a6:	f361 200f 	bfi	r0, r1, #8, #8
 80034aa:	f362 4017 	bfi	r0, r2, #16, #8
 80034ae:	f363 601f 	bfi	r0, r3, #24, #8
 80034b2:	b002      	add	sp, #8
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	08035e90 	.word	0x08035e90

080034bc <ai_platform_interface_api_get_version>:
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <ai_platform_interface_api_get_version+0x2c>)
 80034be:	2000      	movs	r0, #0
 80034c0:	b082      	sub	sp, #8
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	fa5f fc83 	uxtb.w	ip, r3
 80034c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80034cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80034d0:	0e1b      	lsrs	r3, r3, #24
 80034d2:	f36c 0007 	bfi	r0, ip, #0, #8
 80034d6:	f361 200f 	bfi	r0, r1, #8, #8
 80034da:	f362 4017 	bfi	r0, r2, #16, #8
 80034de:	f363 601f 	bfi	r0, r3, #24, #8
 80034e2:	b002      	add	sp, #8
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	08035e94 	.word	0x08035e94

080034ec <ai_platform_context_acquire>:
 80034ec:	6802      	ldr	r2, [r0, #0]
 80034ee:	4b02      	ldr	r3, [pc, #8]	@ (80034f8 <ai_platform_context_acquire+0xc>)
 80034f0:	4393      	bics	r3, r2
 80034f2:	bf18      	it	ne
 80034f4:	2000      	movne	r0, #0
 80034f6:	4770      	bx	lr
 80034f8:	a1c00100 	.word	0xa1c00100

080034fc <ai_platform_network_get_error>:
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <ai_platform_network_get_error+0x14>)
 80034fe:	6802      	ldr	r2, [r0, #0]
 8003500:	4393      	bics	r3, r2
 8003502:	d102      	bne.n	800350a <ai_platform_network_get_error+0xe>
 8003504:	300c      	adds	r0, #12
 8003506:	f000 bd4f 	b.w	8003fa8 <core_get_error>
 800350a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800350e:	4770      	bx	lr
 8003510:	a1c00100 	.word	0xa1c00100

08003514 <ai_platform_network_set_error>:
 8003514:	b110      	cbz	r0, 800351c <ai_platform_network_set_error+0x8>
 8003516:	300c      	adds	r0, #12
 8003518:	f000 bd4c 	b.w	8003fb4 <core_set_error>
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop

08003520 <ai_platform_api_get_network_report>:
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	4ba3      	ldr	r3, [pc, #652]	@ (80037b4 <ai_platform_api_get_network_report+0x294>)
 8003526:	b089      	sub	sp, #36	@ 0x24
 8003528:	6802      	ldr	r2, [r0, #0]
 800352a:	9002      	str	r0, [sp, #8]
 800352c:	4393      	bics	r3, r2
 800352e:	d177      	bne.n	8003620 <ai_platform_api_get_network_report+0x100>
 8003530:	4688      	mov	r8, r1
 8003532:	2900      	cmp	r1, #0
 8003534:	d074      	beq.n	8003620 <ai_platform_api_get_network_report+0x100>
 8003536:	2400      	movs	r4, #0
 8003538:	67cc      	str	r4, [r1, #124]	@ 0x7c
 800353a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800353c:	b14b      	cbz	r3, 8003552 <ai_platform_api_get_network_report+0x32>
 800353e:	3401      	adds	r4, #1
 8003540:	f8c8 407c 	str.w	r4, [r8, #124]	@ 0x7c
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	b122      	cbz	r2, 8003552 <ai_platform_api_get_network_report+0x32>
 8003548:	429a      	cmp	r2, r3
 800354a:	d002      	beq.n	8003552 <ai_platform_api_get_network_report+0x32>
 800354c:	4613      	mov	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f5      	bne.n	800353e <ai_platform_api_get_network_report+0x1e>
 8003552:	2c00      	cmp	r4, #0
 8003554:	f000 8161 	beq.w	800381a <ai_platform_api_get_network_report+0x2fa>
 8003558:	9a02      	ldr	r2, [sp, #8]
 800355a:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 800355c:	2b00      	cmp	r3, #0
 800355e:	d050      	beq.n	8003602 <ai_platform_api_get_network_report+0xe2>
 8003560:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8003564:	f1ba 0f00 	cmp.w	sl, #0
 8003568:	d04b      	beq.n	8003602 <ai_platform_api_get_network_report+0xe2>
 800356a:	f04f 0b00 	mov.w	fp, #0
 800356e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003572:	465d      	mov	r5, fp
 8003574:	e015      	b.n	80035a2 <ai_platform_api_get_network_report+0x82>
 8003576:	00ea      	lsls	r2, r5, #3
 8003578:	2101      	movs	r1, #1
 800357a:	50b9      	str	r1, [r7, r2]
 800357c:	69b2      	ldr	r2, [r6, #24]
 800357e:	6856      	ldr	r6, [r2, #4]
 8003580:	f04f 0201 	mov.w	r2, #1
 8003584:	60a3      	str	r3, [r4, #8]
 8003586:	3501      	adds	r5, #1
 8003588:	7522      	strb	r2, [r4, #20]
 800358a:	f10b 0b1c 	add.w	fp, fp, #28
 800358e:	6963      	ldr	r3, [r4, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	f368 231f 	bfi	r3, r8, #8, #24
 8003596:	e9c4 0c00 	strd	r0, ip, [r4]
 800359a:	e9c4 2603 	strd	r2, r6, [r4, #12]
 800359e:	e9c4 3905 	strd	r3, r9, [r4, #20]
 80035a2:	f8ba 3000 	ldrh.w	r3, [sl]
 80035a6:	b2aa      	uxth	r2, r5
 80035a8:	429d      	cmp	r5, r3
 80035aa:	d23e      	bcs.n	800362a <ai_platform_api_get_network_report+0x10a>
 80035ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03a      	beq.n	800362a <ai_platform_api_get_network_report+0x10a>
 80035b4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80035b8:	2e00      	cmp	r6, #0
 80035ba:	d036      	beq.n	800362a <ai_platform_api_get_network_report+0x10a>
 80035bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80035c0:	00ea      	lsls	r2, r5, #3
 80035c2:	f8d6 900c 	ldr.w	r9, [r6, #12]
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80035cc:	69b3      	ldr	r3, [r6, #24]
 80035ce:	445c      	add	r4, fp
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	68b3      	ldr	r3, [r6, #8]
 80035d4:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80035d8:	f001 fa6a 	bl	8004ab0 <ai_array_to_buffer_fmt>
 80035dc:	69b2      	ldr	r2, [r6, #24]
 80035de:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80035e2:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0c9      	beq.n	800357e <ai_platform_api_get_network_report+0x5e>
 80035ea:	2200      	movs	r2, #0
 80035ec:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 80035f0:	6832      	ldr	r2, [r6, #0]
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	b112      	cbz	r2, 80035fc <ai_platform_api_get_network_report+0xdc>
 80035f6:	8852      	ldrh	r2, [r2, #2]
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d1bc      	bne.n	8003576 <ai_platform_api_get_network_report+0x56>
 80035fc:	69b2      	ldr	r2, [r6, #24]
 80035fe:	2300      	movs	r3, #0
 8003600:	e7bd      	b.n	800357e <ai_platform_api_get_network_report+0x5e>
 8003602:	2400      	movs	r4, #0
 8003604:	9802      	ldr	r0, [sp, #8]
 8003606:	2218      	movs	r2, #24
 8003608:	2112      	movs	r1, #18
 800360a:	300c      	adds	r0, #12
 800360c:	f8c8 403c 	str.w	r4, [r8, #60]	@ 0x3c
 8003610:	f8a8 4038 	strh.w	r4, [r8, #56]	@ 0x38
 8003614:	f000 fcce 	bl	8003fb4 <core_set_error>
 8003618:	4620      	mov	r0, r4
 800361a:	b009      	add	sp, #36	@ 0x24
 800361c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003620:	2400      	movs	r4, #0
 8003622:	4620      	mov	r0, r4
 8003624:	b009      	add	sp, #36	@ 0x24
 8003626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800362e:	2a00      	cmp	r2, #0
 8003630:	d0e7      	beq.n	8003602 <ai_platform_api_get_network_report+0xe2>
 8003632:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f8a8 2038 	strh.w	r2, [r8, #56]	@ 0x38
 800363c:	f8c8 303c 	str.w	r3, [r8, #60]	@ 0x3c
 8003640:	9b02      	ldr	r3, [sp, #8]
 8003642:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003644:	2b01      	cmp	r3, #1
 8003646:	f240 80a5 	bls.w	8003794 <ai_platform_api_get_network_report+0x274>
 800364a:	f04f 0a00 	mov.w	sl, #0
 800364e:	9b02      	ldr	r3, [sp, #8]
 8003650:	f8cd 800c 	str.w	r8, [sp, #12]
 8003654:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
 8003658:	4655      	mov	r5, sl
 800365a:	e016      	b.n	800368a <ai_platform_api_get_network_report+0x16a>
 800365c:	00e9      	lsls	r1, r5, #3
 800365e:	2301      	movs	r3, #1
 8003660:	507b      	str	r3, [r7, r1]
 8003662:	69b1      	ldr	r1, [r6, #24]
 8003664:	f04f 0301 	mov.w	r3, #1
 8003668:	6849      	ldr	r1, [r1, #4]
 800366a:	3501      	adds	r5, #1
 800366c:	f10a 0a1c 	add.w	sl, sl, #28
 8003670:	7523      	strb	r3, [r4, #20]
 8003672:	2300      	movs	r3, #0
 8003674:	60a0      	str	r0, [r4, #8]
 8003676:	f8c4 b018 	str.w	fp, [r4, #24]
 800367a:	e9c4 3103 	strd	r3, r1, [r4, #12]
 800367e:	6961      	ldr	r1, [r4, #20]
 8003680:	f368 211f 	bfi	r1, r8, #8, #24
 8003684:	e9c4 c200 	strd	ip, r2, [r4]
 8003688:	6161      	str	r1, [r4, #20]
 800368a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800368e:	b2aa      	uxth	r2, r5
 8003690:	42ab      	cmp	r3, r5
 8003692:	d928      	bls.n	80036e6 <ai_platform_api_get_network_report+0x1c6>
 8003694:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003698:	b32b      	cbz	r3, 80036e6 <ai_platform_api_get_network_report+0x1c6>
 800369a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800369e:	b316      	cbz	r6, 80036e6 <ai_platform_api_get_network_report+0x1c6>
 80036a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80036a4:	00ea      	lsls	r2, r5, #3
 80036a6:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80036b0:	69b3      	ldr	r3, [r6, #24]
 80036b2:	4454      	add	r4, sl
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	68b3      	ldr	r3, [r6, #8]
 80036b8:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80036bc:	f001 f9f8 	bl	8004ab0 <ai_array_to_buffer_fmt>
 80036c0:	69b1      	ldr	r1, [r6, #24]
 80036c2:	4684      	mov	ip, r0
 80036c4:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80036c8:	688a      	ldr	r2, [r1, #8]
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d0ca      	beq.n	8003664 <ai_platform_api_get_network_report+0x144>
 80036ce:	2100      	movs	r1, #0
 80036d0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80036d4:	6831      	ldr	r1, [r6, #0]
 80036d6:	6041      	str	r1, [r0, #4]
 80036d8:	b111      	cbz	r1, 80036e0 <ai_platform_api_get_network_report+0x1c0>
 80036da:	8849      	ldrh	r1, [r1, #2]
 80036dc:	2900      	cmp	r1, #0
 80036de:	d1bd      	bne.n	800365c <ai_platform_api_get_network_report+0x13c>
 80036e0:	69b1      	ldr	r1, [r6, #24]
 80036e2:	2000      	movs	r0, #0
 80036e4:	e7be      	b.n	8003664 <ai_platform_api_get_network_report+0x144>
 80036e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d052      	beq.n	8003794 <ai_platform_api_get_network_report+0x274>
 80036ee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80036f2:	9902      	ldr	r1, [sp, #8]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 80036fa:	f8a8 203a 	strh.w	r2, [r8, #58]	@ 0x3a
 80036fe:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8003702:	4630      	mov	r0, r6
 8003704:	f7ff fdec 	bl	80032e0 <ai_buffer_array_sane>
 8003708:	4604      	mov	r4, r0
 800370a:	b940      	cbnz	r0, 800371e <ai_platform_api_get_network_report+0x1fe>
 800370c:	4630      	mov	r0, r6
 800370e:	f7ff fde7 	bl	80032e0 <ai_buffer_array_sane>
 8003712:	b120      	cbz	r0, 800371e <ai_platform_api_get_network_report+0x1fe>
 8003714:	9b02      	ldr	r3, [sp, #8]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8088 	bne.w	800382e <ai_platform_api_get_network_report+0x30e>
 800371e:	9d02      	ldr	r5, [sp, #8]
 8003720:	f105 0720 	add.w	r7, r5, #32
 8003724:	4638      	mov	r0, r7
 8003726:	f7ff fddb 	bl	80032e0 <ai_buffer_array_sane>
 800372a:	4604      	mov	r4, r0
 800372c:	b930      	cbnz	r0, 800373c <ai_platform_api_get_network_report+0x21c>
 800372e:	4638      	mov	r0, r7
 8003730:	f7ff fdd6 	bl	80032e0 <ai_buffer_array_sane>
 8003734:	b110      	cbz	r0, 800373c <ai_platform_api_get_network_report+0x21c>
 8003736:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8003738:	2b00      	cmp	r3, #0
 800373a:	d17f      	bne.n	800383c <ai_platform_api_get_network_report+0x31c>
 800373c:	9a02      	ldr	r2, [sp, #8]
 800373e:	f240 2401 	movw	r4, #513	@ 0x201
 8003742:	6853      	ldr	r3, [r2, #4]
 8003744:	f8c8 3080 	str.w	r3, [r8, #128]	@ 0x80
 8003748:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <ai_platform_api_get_network_report+0x298>)
 800374a:	f8c8 3010 	str.w	r3, [r8, #16]
 800374e:	f240 1309 	movw	r3, #265	@ 0x109
 8003752:	f8c8 3014 	str.w	r3, [r8, #20]
 8003756:	f240 5301 	movw	r3, #1281	@ 0x501
 800375a:	e9c8 4309 	strd	r4, r3, [r8, #36]	@ 0x24
 800375e:	6890      	ldr	r0, [r2, #8]
 8003760:	f001 fa2e 	bl	8004bc0 <ai_platform_version_get>
 8003764:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <ai_platform_api_get_network_report+0x29c>)
 8003766:	f8d8 2044 	ldr.w	r2, [r8, #68]	@ 0x44
 800376a:	f8c8 0020 	str.w	r0, [r8, #32]
 800376e:	429a      	cmp	r2, r3
 8003770:	d126      	bne.n	80037c0 <ai_platform_api_get_network_report+0x2a0>
 8003772:	f108 0250 	add.w	r2, r8, #80	@ 0x50
 8003776:	f108 0348 	add.w	r3, r8, #72	@ 0x48
 800377a:	2401      	movs	r4, #1
 800377c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003780:	e882 0003 	stmia.w	r2, {r0, r1}
 8003784:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003788:	e883 0003 	stmia.w	r3, {r0, r1}
 800378c:	4620      	mov	r0, r4
 800378e:	b009      	add	sp, #36	@ 0x24
 8003790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003794:	2400      	movs	r4, #0
 8003796:	9802      	ldr	r0, [sp, #8]
 8003798:	2218      	movs	r2, #24
 800379a:	2113      	movs	r1, #19
 800379c:	f8c8 4040 	str.w	r4, [r8, #64]	@ 0x40
 80037a0:	300c      	adds	r0, #12
 80037a2:	f8a8 403a 	strh.w	r4, [r8, #58]	@ 0x3a
 80037a6:	f000 fc05 	bl	8003fb4 <core_set_error>
 80037aa:	4620      	mov	r0, r4
 80037ac:	b009      	add	sp, #36	@ 0x24
 80037ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b2:	bf00      	nop
 80037b4:	a1c00100 	.word	0xa1c00100
 80037b8:	08035e88 	.word	0x08035e88
 80037bc:	a1facade 	.word	0xa1facade
 80037c0:	2200      	movs	r2, #0
 80037c2:	4b3a      	ldr	r3, [pc, #232]	@ (80038ac <ai_platform_api_get_network_report+0x38c>)
 80037c4:	f108 0a44 	add.w	sl, r8, #68	@ 0x44
 80037c8:	f10d 0c10 	add.w	ip, sp, #16
 80037cc:	f108 0960 	add.w	r9, r8, #96	@ 0x60
 80037d0:	4655      	mov	r5, sl
 80037d2:	f8c8 c05c 	str.w	ip, [r8, #92]	@ 0x5c
 80037d6:	464c      	mov	r4, r9
 80037d8:	e9c8 2212 	strd	r2, r2, [r8, #72]	@ 0x48
 80037dc:	e9c8 2214 	strd	r2, r2, [r8, #80]	@ 0x50
 80037e0:	4a33      	ldr	r2, [pc, #204]	@ (80038b0 <ai_platform_api_get_network_report+0x390>)
 80037e2:	f8c8 2044 	str.w	r2, [r8, #68]	@ 0x44
 80037e6:	f240 4201 	movw	r2, #1025	@ 0x401
 80037ea:	f8c8 2058 	str.w	r2, [r8, #88]	@ 0x58
 80037ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80037f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003800:	4630      	mov	r0, r6
 8003802:	f7ff fd6d 	bl	80032e0 <ai_buffer_array_sane>
 8003806:	bb78      	cbnz	r0, 8003868 <ai_platform_api_get_network_report+0x348>
 8003808:	4638      	mov	r0, r7
 800380a:	f7ff fd69 	bl	80032e0 <ai_buffer_array_sane>
 800380e:	b9e0      	cbnz	r0, 800384a <ai_platform_api_get_network_report+0x32a>
 8003810:	2401      	movs	r4, #1
 8003812:	4620      	mov	r0, r4
 8003814:	b009      	add	sp, #36	@ 0x24
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	9802      	ldr	r0, [sp, #8]
 800381c:	2218      	movs	r2, #24
 800381e:	2111      	movs	r1, #17
 8003820:	300c      	adds	r0, #12
 8003822:	f000 fbc7 	bl	8003fb4 <core_set_error>
 8003826:	4620      	mov	r0, r4
 8003828:	b009      	add	sp, #36	@ 0x24
 800382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382e:	9802      	ldr	r0, [sp, #8]
 8003830:	2213      	movs	r2, #19
 8003832:	2111      	movs	r1, #17
 8003834:	300c      	adds	r0, #12
 8003836:	f000 fbbd 	bl	8003fb4 <core_set_error>
 800383a:	e6ed      	b.n	8003618 <ai_platform_api_get_network_report+0xf8>
 800383c:	9802      	ldr	r0, [sp, #8]
 800383e:	2212      	movs	r2, #18
 8003840:	2111      	movs	r1, #17
 8003842:	300c      	adds	r0, #12
 8003844:	f000 fbb6 	bl	8003fb4 <core_set_error>
 8003848:	e6e6      	b.n	8003618 <ai_platform_api_get_network_report+0xf8>
 800384a:	4638      	mov	r0, r7
 800384c:	f7ff fd48 	bl	80032e0 <ai_buffer_array_sane>
 8003850:	b1c0      	cbz	r0, 8003884 <ai_platform_api_get_network_report+0x364>
 8003852:	9b02      	ldr	r3, [sp, #8]
 8003854:	46d0      	mov	r8, sl
 8003856:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800385e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003862:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8003866:	e7d3      	b.n	8003810 <ai_platform_api_get_network_report+0x2f0>
 8003868:	4630      	mov	r0, r6
 800386a:	f7ff fd39 	bl	80032e0 <ai_buffer_array_sane>
 800386e:	b198      	cbz	r0, 8003898 <ai_platform_api_get_network_report+0x378>
 8003870:	9b02      	ldr	r3, [sp, #8]
 8003872:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003876:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800387a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800387e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8003882:	e7c1      	b.n	8003808 <ai_platform_api_get_network_report+0x2e8>
 8003884:	4604      	mov	r4, r0
 8003886:	46d0      	mov	r8, sl
 8003888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800388a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800388e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003892:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8003896:	deff      	udf	#255	@ 0xff
 8003898:	4604      	mov	r4, r0
 800389a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80038a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80038a4:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80038a8:	deff      	udf	#255	@ 0xff
 80038aa:	bf00      	nop
 80038ac:	080077c0 	.word	0x080077c0
 80038b0:	00040440 	.word	0x00040440

080038b4 <ai_platform_network_create>:
 80038b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038b8:	b083      	sub	sp, #12
 80038ba:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80038be:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80038c2:	b320      	cbz	r0, 800390e <ai_platform_network_create+0x5a>
 80038c4:	6002      	str	r2, [r0, #0]
 80038c6:	4616      	mov	r6, r2
 80038c8:	461f      	mov	r7, r3
 80038ca:	4604      	mov	r4, r0
 80038cc:	f000 fb6a 	bl	8003fa4 <core_init>
 80038d0:	b970      	cbnz	r0, 80038f0 <ai_platform_network_create+0x3c>
 80038d2:	2530      	movs	r5, #48	@ 0x30
 80038d4:	2300      	movs	r3, #0
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2410      	movs	r4, #16
 80038da:	464a      	mov	r2, r9
 80038dc:	4641      	mov	r1, r8
 80038de:	4638      	mov	r0, r7
 80038e0:	f001 f968 	bl	8004bb4 <ai_version_get>
 80038e4:	60b0      	str	r0, [r6, #8]
 80038e6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038f0:	2200      	movs	r2, #0
 80038f2:	4641      	mov	r1, r8
 80038f4:	4638      	mov	r0, r7
 80038f6:	f001 f95d 	bl	8004bb4 <ai_version_get>
 80038fa:	4605      	mov	r5, r0
 80038fc:	2200      	movs	r2, #0
 80038fe:	2105      	movs	r1, #5
 8003900:	2001      	movs	r0, #1
 8003902:	f001 f957 	bl	8004bb4 <ai_version_get>
 8003906:	4285      	cmp	r5, r0
 8003908:	d008      	beq.n	800391c <ai_platform_network_create+0x68>
 800390a:	2501      	movs	r5, #1
 800390c:	e7e2      	b.n	80038d4 <ai_platform_network_create+0x20>
 800390e:	2510      	movs	r5, #16
 8003910:	462c      	mov	r4, r5
 8003912:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8003916:	b003      	add	sp, #12
 8003918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <ai_platform_network_create+0x80>)
 800391e:	a801      	add	r0, sp, #4
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	f000 fb53 	bl	8003fcc <ai_check_custom_types>
 8003926:	b110      	cbz	r0, 800392e <ai_platform_network_create+0x7a>
 8003928:	2400      	movs	r4, #0
 800392a:	4625      	mov	r5, r4
 800392c:	e7d5      	b.n	80038da <ai_platform_network_create+0x26>
 800392e:	2502      	movs	r5, #2
 8003930:	e7d0      	b.n	80038d4 <ai_platform_network_create+0x20>
 8003932:	bf00      	nop
 8003934:	84048403 	.word	0x84048403

08003938 <ai_platform_network_init>:
 8003938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab0 <ai_platform_network_init+0x178>)
 800393e:	460c      	mov	r4, r1
 8003940:	6801      	ldr	r1, [r0, #0]
 8003942:	438a      	bics	r2, r1
 8003944:	d133      	bne.n	80039ae <ai_platform_network_init+0x76>
 8003946:	4605      	mov	r5, r0
 8003948:	2c00      	cmp	r4, #0
 800394a:	f000 8093 	beq.w	8003a74 <ai_platform_network_init+0x13c>
 800394e:	f8d4 b000 	ldr.w	fp, [r4]
 8003952:	4a58      	ldr	r2, [pc, #352]	@ (8003ab4 <ai_platform_network_init+0x17c>)
 8003954:	4593      	cmp	fp, r2
 8003956:	d10f      	bne.n	8003978 <ai_platform_network_init+0x40>
 8003958:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800395c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8003960:	4b53      	ldr	r3, [pc, #332]	@ (8003ab0 <ai_platform_network_init+0x178>)
 8003962:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8003966:	0c32      	lsrs	r2, r6, #16
 8003968:	4299      	cmp	r1, r3
 800396a:	d02c      	beq.n	80039c6 <ai_platform_network_init+0x8e>
 800396c:	2303      	movs	r3, #3
 800396e:	462c      	mov	r4, r5
 8003970:	612b      	str	r3, [r5, #16]
 8003972:	4620      	mov	r0, r4
 8003974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003978:	4627      	mov	r7, r4
 800397a:	2101      	movs	r1, #1
 800397c:	6864      	ldr	r4, [r4, #4]
 800397e:	4638      	mov	r0, r7
 8003980:	f107 081c 	add.w	r8, r7, #28
 8003984:	f7ff fc78 	bl	8003278 <ai_buffer_get_size>
 8003988:	4606      	mov	r6, r0
 800398a:	2101      	movs	r1, #1
 800398c:	4640      	mov	r0, r8
 800398e:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8003992:	f7ff fc71 	bl	8003278 <ai_buffer_get_size>
 8003996:	b976      	cbnz	r6, 80039b6 <ai_platform_network_init+0x7e>
 8003998:	2800      	cmp	r0, #0
 800399a:	d150      	bne.n	8003a3e <ai_platform_network_init+0x106>
 800399c:	4680      	mov	r8, r0
 800399e:	4686      	mov	lr, r0
 80039a0:	4606      	mov	r6, r0
 80039a2:	4607      	mov	r7, r0
 80039a4:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80039a8:	6829      	ldr	r1, [r5, #0]
 80039aa:	0436      	lsls	r6, r6, #16
 80039ac:	e7d8      	b.n	8003960 <ai_platform_network_init+0x28>
 80039ae:	2400      	movs	r4, #0
 80039b0:	4620      	mov	r0, r4
 80039b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d13b      	bne.n	8003a32 <ai_platform_network_init+0xfa>
 80039ba:	4680      	mov	r8, r0
 80039bc:	4686      	mov	lr, r0
 80039be:	2c00      	cmp	r4, #0
 80039c0:	d05e      	beq.n	8003a80 <ai_platform_network_init+0x148>
 80039c2:	2601      	movs	r6, #1
 80039c4:	e7ee      	b.n	80039a4 <ai_platform_network_init+0x6c>
 80039c6:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 80039c8:	4293      	cmp	r3, r2
 80039ca:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab4 <ai_platform_network_init+0x17c>)
 80039cc:	d33e      	bcc.n	8003a4c <ai_platform_network_init+0x114>
 80039ce:	459b      	cmp	fp, r3
 80039d0:	d03e      	beq.n	8003a50 <ai_platform_network_init+0x118>
 80039d2:	b1a2      	cbz	r2, 80039fe <ai_platform_network_init+0xc6>
 80039d4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80039d8:	f04f 0c00 	mov.w	ip, #0
 80039dc:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80039e0:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80039e2:	eb07 0b0c 	add.w	fp, r7, ip
 80039e6:	4464      	add	r4, ip
 80039e8:	f10c 0c1c 	add.w	ip, ip, #28
 80039ec:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80039f0:	45cc      	cmp	ip, r9
 80039f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039f4:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80039f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039fc:	d1f0      	bne.n	80039e0 <ai_platform_network_init+0xa8>
 80039fe:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8003a00:	622e      	str	r6, [r5, #32]
 8003a02:	4553      	cmp	r3, sl
 8003a04:	d34b      	bcc.n	8003a9e <ai_platform_network_init+0x166>
 8003a06:	f1ba 0f00 	cmp.w	sl, #0
 8003a0a:	d025      	beq.n	8003a58 <ai_platform_network_init+0x120>
 8003a0c:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8003a10:	2700      	movs	r7, #0
 8003a12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003a16:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8003a18:	eb08 0607 	add.w	r6, r8, r7
 8003a1c:	443c      	add	r4, r7
 8003a1e:	371c      	adds	r7, #28
 8003a20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a22:	4557      	cmp	r7, sl
 8003a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a26:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a2e:	d1f2      	bne.n	8003a16 <ai_platform_network_init+0xde>
 8003a30:	e012      	b.n	8003a58 <ai_platform_network_init+0x120>
 8003a32:	f1b9 0f00 	cmp.w	r9, #0
 8003a36:	d015      	beq.n	8003a64 <ai_platform_network_init+0x12c>
 8003a38:	f04f 0e01 	mov.w	lr, #1
 8003a3c:	e7bf      	b.n	80039be <ai_platform_network_init+0x86>
 8003a3e:	f1b9 0f00 	cmp.w	r9, #0
 8003a42:	d00f      	beq.n	8003a64 <ai_platform_network_init+0x12c>
 8003a44:	f04f 0e01 	mov.w	lr, #1
 8003a48:	4637      	mov	r7, r6
 8003a4a:	e7ab      	b.n	80039a4 <ai_platform_network_init+0x6c>
 8003a4c:	459b      	cmp	fp, r3
 8003a4e:	d11e      	bne.n	8003a8e <ai_platform_network_init+0x156>
 8003a50:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8003a54:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8003a5e:	f000 fadd 	bl	800401c <ai_layers_init_all>
 8003a62:	e783      	b.n	800396c <ai_platform_network_init+0x34>
 8003a64:	2213      	movs	r2, #19
 8003a66:	2110      	movs	r1, #16
 8003a68:	f105 000c 	add.w	r0, r5, #12
 8003a6c:	2400      	movs	r4, #0
 8003a6e:	f000 faa1 	bl	8003fb4 <core_set_error>
 8003a72:	e77e      	b.n	8003972 <ai_platform_network_init+0x3a>
 8003a74:	2211      	movs	r2, #17
 8003a76:	2110      	movs	r1, #16
 8003a78:	300c      	adds	r0, #12
 8003a7a:	f000 fa9b 	bl	8003fb4 <core_set_error>
 8003a7e:	e778      	b.n	8003972 <ai_platform_network_init+0x3a>
 8003a80:	2212      	movs	r2, #18
 8003a82:	2110      	movs	r1, #16
 8003a84:	f105 000c 	add.w	r0, r5, #12
 8003a88:	f000 fa94 	bl	8003fb4 <core_set_error>
 8003a8c:	e771      	b.n	8003972 <ai_platform_network_init+0x3a>
 8003a8e:	2212      	movs	r2, #18
 8003a90:	2116      	movs	r1, #22
 8003a92:	f105 000c 	add.w	r0, r5, #12
 8003a96:	2400      	movs	r4, #0
 8003a98:	f000 fa8c 	bl	8003fb4 <core_set_error>
 8003a9c:	e769      	b.n	8003972 <ai_platform_network_init+0x3a>
 8003a9e:	2213      	movs	r2, #19
 8003aa0:	2116      	movs	r1, #22
 8003aa2:	f105 000c 	add.w	r0, r5, #12
 8003aa6:	2400      	movs	r4, #0
 8003aa8:	f000 fa84 	bl	8003fb4 <core_set_error>
 8003aac:	e761      	b.n	8003972 <ai_platform_network_init+0x3a>
 8003aae:	bf00      	nop
 8003ab0:	a1c00100 	.word	0xa1c00100
 8003ab4:	a1facade 	.word	0xa1facade

08003ab8 <ai_platform_network_post_init>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <ai_platform_network_post_init+0x5c>)
 8003abc:	6802      	ldr	r2, [r0, #0]
 8003abe:	ea02 0103 	and.w	r1, r2, r3
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <ai_platform_network_post_init+0x20>
 8003ac6:	6903      	ldr	r3, [r0, #16]
 8003ac8:	4604      	mov	r4, r0
 8003aca:	f013 0502 	ands.w	r5, r3, #2
 8003ace:	d005      	beq.n	8003adc <ai_platform_network_post_init+0x24>
 8003ad0:	428a      	cmp	r2, r1
 8003ad2:	d00a      	beq.n	8003aea <ai_platform_network_post_init+0x32>
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	2000      	movs	r0, #0
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	2210      	movs	r2, #16
 8003ade:	2111      	movs	r1, #17
 8003ae0:	300c      	adds	r0, #12
 8003ae2:	f000 fa67 	bl	8003fb4 <core_set_error>
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
 8003aea:	f000 faa5 	bl	8004038 <ai_layers_post_init_all>
 8003aee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <ai_platform_network_post_init+0x1c>
 8003af4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8003af6:	e008      	b.n	8003b0a <ai_platform_network_post_init+0x52>
 8003af8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8003afc:	4798      	blx	r3
 8003afe:	692b      	ldr	r3, [r5, #16]
 8003b00:	42ab      	cmp	r3, r5
 8003b02:	461d      	mov	r5, r3
 8003b04:	d0e6      	beq.n	8003ad4 <ai_platform_network_post_init+0x1c>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0e4      	beq.n	8003ad4 <ai_platform_network_post_init+0x1c>
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	2d00      	cmp	r5, #0
 8003b10:	d1f2      	bne.n	8003af8 <ai_platform_network_post_init+0x40>
 8003b12:	e7df      	b.n	8003ad4 <ai_platform_network_post_init+0x1c>
 8003b14:	a1c00100 	.word	0xa1c00100

08003b18 <ai_platform_network_process>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	4bb7      	ldr	r3, [pc, #732]	@ (8003dfc <ai_platform_network_process+0x2e4>)
 8003b20:	9202      	str	r2, [sp, #8]
 8003b22:	6802      	ldr	r2, [r0, #0]
 8003b24:	4393      	bics	r3, r2
 8003b26:	f040 8142 	bne.w	8003dae <ai_platform_network_process+0x296>
 8003b2a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8126 	beq.w	8003d80 <ai_platform_network_process+0x268>
 8003b34:	6903      	ldr	r3, [r0, #16]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	6182      	str	r2, [r0, #24]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	f040 8122 	bne.w	8003d8c <ai_platform_network_process+0x274>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	f000 8136 	beq.w	8003dba <ai_platform_network_process+0x2a2>
 8003b4e:	fab8 f788 	clz	r7, r8
 8003b52:	097f      	lsrs	r7, r7, #5
 8003b54:	f1b8 0f00 	cmp.w	r8, #0
 8003b58:	f000 812f 	beq.w	8003dba <ai_platform_network_process+0x2a2>
 8003b5c:	f8b8 3000 	ldrh.w	r3, [r8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 812a 	beq.w	8003dba <ai_platform_network_process+0x2a2>
 8003b66:	698b      	ldr	r3, [r1, #24]
 8003b68:	460e      	mov	r6, r1
 8003b6a:	9003      	str	r0, [sp, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d072      	beq.n	8003c5e <ai_platform_network_process+0x146>
 8003b78:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003b7c:	2c00      	cmp	r4, #0
 8003b7e:	d06e      	beq.n	8003c5e <ai_platform_network_process+0x146>
 8003b80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003b84:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003b88:	f8d3 a000 	ldr.w	sl, [r3]
 8003b8c:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8003b90:	f000 8112 	beq.w	8003db8 <ai_platform_network_process+0x2a0>
 8003b94:	69a3      	ldr	r3, [r4, #24]
 8003b96:	2101      	movs	r1, #1
 8003b98:	4630      	mov	r0, r6
 8003b9a:	685d      	ldr	r5, [r3, #4]
 8003b9c:	f7ff fb6c 	bl	8003278 <ai_buffer_get_size>
 8003ba0:	4285      	cmp	r5, r0
 8003ba2:	f0c0 8115 	bcc.w	8003dd0 <ai_platform_network_process+0x2b8>
 8003ba6:	68e0      	ldr	r0, [r4, #12]
 8003ba8:	69b1      	ldr	r1, [r6, #24]
 8003baa:	68c2      	ldr	r2, [r0, #12]
 8003bac:	68cb      	ldr	r3, [r1, #12]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	f040 810e 	bne.w	8003dd0 <ai_platform_network_process+0x2b8>
 8003bb4:	6882      	ldr	r2, [r0, #8]
 8003bb6:	688b      	ldr	r3, [r1, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	f040 8109 	bne.w	8003dd0 <ai_platform_network_process+0x2b8>
 8003bbe:	6842      	ldr	r2, [r0, #4]
 8003bc0:	684b      	ldr	r3, [r1, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	f040 8104 	bne.w	8003dd0 <ai_platform_network_process+0x2b8>
 8003bc8:	69a3      	ldr	r3, [r4, #24]
 8003bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bce:	f000 ffdf 	bl	8004b90 <ai_array_get_data_byte_size>
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f001 f805 	bl	8004be4 <get_tensor_byte_size>
 8003bda:	4285      	cmp	r5, r0
 8003bdc:	f0c0 80f8 	bcc.w	8003dd0 <ai_platform_network_process+0x2b8>
 8003be0:	69a3      	ldr	r3, [r4, #24]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	f000 ff64 	bl	8004ab0 <ai_array_to_buffer_fmt>
 8003be8:	6833      	ldr	r3, [r6, #0]
 8003bea:	4058      	eors	r0, r3
 8003bec:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003bf0:	f040 81a4 	bne.w	8003f3c <ai_platform_network_process+0x424>
 8003bf4:	6873      	ldr	r3, [r6, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80de 	beq.w	8003db8 <ai_platform_network_process+0x2a0>
 8003bfc:	69b3      	ldr	r3, [r6, #24]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 81a4 	beq.w	8003f4e <ai_platform_network_process+0x436>
 8003c06:	9a01      	ldr	r2, [sp, #4]
 8003c08:	4620      	mov	r0, r4
 8003c0a:	3701      	adds	r7, #1
 8003c0c:	361c      	adds	r6, #28
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	bf38      	it	cc
 8003c12:	461a      	movcc	r2, r3
 8003c14:	9201      	str	r2, [sp, #4]
 8003c16:	f000 ffe5 	bl	8004be4 <get_tensor_byte_size>
 8003c1a:	f8c9 0008 	str.w	r0, [r9, #8]
 8003c1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	fb00 f303 	mul.w	r3, r0, r3
 8003c28:	f8c9 300c 	str.w	r3, [r9, #12]
 8003c2c:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8003c30:	440b      	add	r3, r1
 8003c32:	f8c9 1004 	str.w	r1, [r9, #4]
 8003c36:	f84a 300b 	str.w	r3, [sl, fp]
 8003c3a:	69a0      	ldr	r0, [r4, #24]
 8003c3c:	6803      	ldr	r3, [r0, #0]
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	f100 80af 	bmi.w	8003da2 <ai_platform_network_process+0x28a>
 8003c44:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	4419      	add	r1, r3
 8003c4c:	6081      	str	r1, [r0, #8]
 8003c4e:	69a3      	ldr	r3, [r4, #24]
 8003c50:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	f8b8 3000 	ldrh.w	r3, [r8]
 8003c5a:	42bb      	cmp	r3, r7
 8003c5c:	d888      	bhi.n	8003b70 <ai_platform_network_process+0x58>
 8003c5e:	9d03      	ldr	r5, [sp, #12]
 8003c60:	9b02      	ldr	r3, [sp, #8]
 8003c62:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 817b 	beq.w	8003f60 <ai_platform_network_process+0x448>
 8003c6a:	2a01      	cmp	r2, #1
 8003c6c:	f240 80bd 	bls.w	8003dea <ai_platform_network_process+0x2d2>
 8003c70:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8003c74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80b6 	beq.w	8003dea <ai_platform_network_process+0x2d2>
 8003c7e:	2700      	movs	r7, #0
 8003c80:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003c84:	9502      	str	r5, [sp, #8]
 8003c86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80bd 	beq.w	8003e0a <ai_platform_network_process+0x2f2>
 8003c90:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	f000 80b8 	beq.w	8003e0a <ai_platform_network_process+0x2f2>
 8003c9a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003c9e:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8003ca8:	f000 8170 	beq.w	8003f8c <ai_platform_network_process+0x474>
 8003cac:	69b3      	ldr	r3, [r6, #24]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4658      	mov	r0, fp
 8003cb2:	685d      	ldr	r5, [r3, #4]
 8003cb4:	f7ff fae0 	bl	8003278 <ai_buffer_get_size>
 8003cb8:	4285      	cmp	r5, r0
 8003cba:	f0c0 8095 	bcc.w	8003de8 <ai_platform_network_process+0x2d0>
 8003cbe:	68f0      	ldr	r0, [r6, #12]
 8003cc0:	f8db 1018 	ldr.w	r1, [fp, #24]
 8003cc4:	68c2      	ldr	r2, [r0, #12]
 8003cc6:	68cb      	ldr	r3, [r1, #12]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	f040 808d 	bne.w	8003de8 <ai_platform_network_process+0x2d0>
 8003cce:	6882      	ldr	r2, [r0, #8]
 8003cd0:	688b      	ldr	r3, [r1, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	f040 8088 	bne.w	8003de8 <ai_platform_network_process+0x2d0>
 8003cd8:	6842      	ldr	r2, [r0, #4]
 8003cda:	684b      	ldr	r3, [r1, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	f040 8083 	bne.w	8003de8 <ai_platform_network_process+0x2d0>
 8003ce2:	69b3      	ldr	r3, [r6, #24]
 8003ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ce8:	f000 ff52 	bl	8004b90 <ai_array_get_data_byte_size>
 8003cec:	9003      	str	r0, [sp, #12]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 ff78 	bl	8004be4 <get_tensor_byte_size>
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	d376      	bcc.n	8003de8 <ai_platform_network_process+0x2d0>
 8003cfa:	69b3      	ldr	r3, [r6, #24]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f000 fed7 	bl	8004ab0 <ai_array_to_buffer_fmt>
 8003d02:	f8db 3000 	ldr.w	r3, [fp]
 8003d06:	4058      	eors	r0, r3
 8003d08:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003d0c:	f040 812c 	bne.w	8003f68 <ai_platform_network_process+0x450>
 8003d10:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8139 	beq.w	8003f8c <ai_platform_network_process+0x474>
 8003d1a:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 812a 	beq.w	8003f7a <ai_platform_network_process+0x462>
 8003d26:	9a01      	ldr	r2, [sp, #4]
 8003d28:	4630      	mov	r0, r6
 8003d2a:	3701      	adds	r7, #1
 8003d2c:	f10b 0b1c 	add.w	fp, fp, #28
 8003d30:	429a      	cmp	r2, r3
 8003d32:	bf38      	it	cc
 8003d34:	461a      	movcc	r2, r3
 8003d36:	9201      	str	r2, [sp, #4]
 8003d38:	f000 ff54 	bl	8004be4 <get_tensor_byte_size>
 8003d3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d40:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	fb00 f303 	mul.w	r3, r0, r3
 8003d4a:	f8c8 300c 	str.w	r3, [r8, #12]
 8003d4e:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8003d52:	440b      	add	r3, r1
 8003d54:	f8c8 1004 	str.w	r1, [r8, #4]
 8003d58:	f844 300a 	str.w	r3, [r4, sl]
 8003d5c:	69b0      	ldr	r0, [r6, #24]
 8003d5e:	6803      	ldr	r3, [r0, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	d44d      	bmi.n	8003e00 <ai_platform_network_process+0x2e8>
 8003d64:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	4419      	add	r1, r3
 8003d6c:	6081      	str	r1, [r0, #8]
 8003d6e:	69b3      	ldr	r3, [r6, #24]
 8003d70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d7a:	42bb      	cmp	r3, r7
 8003d7c:	d883      	bhi.n	8003c86 <ai_platform_network_process+0x16e>
 8003d7e:	e044      	b.n	8003e0a <ai_platform_network_process+0x2f2>
 8003d80:	6902      	ldr	r2, [r0, #16]
 8003d82:	6183      	str	r3, [r0, #24]
 8003d84:	f002 0203 	and.w	r2, r2, #3
 8003d88:	2a03      	cmp	r2, #3
 8003d8a:	d016      	beq.n	8003dba <ai_platform_network_process+0x2a2>
 8003d8c:	2230      	movs	r2, #48	@ 0x30
 8003d8e:	2111      	movs	r1, #17
 8003d90:	f105 000c 	add.w	r0, r5, #12
 8003d94:	2400      	movs	r4, #0
 8003d96:	f000 f90d 	bl	8003fb4 <core_set_error>
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	b005      	add	sp, #20
 8003d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da2:	f8b8 3000 	ldrh.w	r3, [r8]
 8003da6:	429f      	cmp	r7, r3
 8003da8:	f4ff aee2 	bcc.w	8003b70 <ai_platform_network_process+0x58>
 8003dac:	e757      	b.n	8003c5e <ai_platform_network_process+0x146>
 8003dae:	2400      	movs	r4, #0
 8003db0:	4620      	mov	r0, r4
 8003db2:	b005      	add	sp, #20
 8003db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db8:	9d03      	ldr	r5, [sp, #12]
 8003dba:	2400      	movs	r4, #0
 8003dbc:	2217      	movs	r2, #23
 8003dbe:	2112      	movs	r1, #18
 8003dc0:	f105 000c 	add.w	r0, r5, #12
 8003dc4:	f000 f8f6 	bl	8003fb4 <core_set_error>
 8003dc8:	4620      	mov	r0, r4
 8003dca:	b005      	add	sp, #20
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd0:	9d03      	ldr	r5, [sp, #12]
 8003dd2:	2400      	movs	r4, #0
 8003dd4:	2218      	movs	r2, #24
 8003dd6:	2112      	movs	r1, #18
 8003dd8:	f105 000c 	add.w	r0, r5, #12
 8003ddc:	f000 f8ea 	bl	8003fb4 <core_set_error>
 8003de0:	4620      	mov	r0, r4
 8003de2:	b005      	add	sp, #20
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	9d02      	ldr	r5, [sp, #8]
 8003dea:	2218      	movs	r2, #24
 8003dec:	2113      	movs	r1, #19
 8003dee:	f105 000c 	add.w	r0, r5, #12
 8003df2:	2400      	movs	r4, #0
 8003df4:	f000 f8de 	bl	8003fb4 <core_set_error>
 8003df8:	e7cf      	b.n	8003d9a <ai_platform_network_process+0x282>
 8003dfa:	bf00      	nop
 8003dfc:	a1c00100 	.word	0xa1c00100
 8003e00:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003e04:	429f      	cmp	r7, r3
 8003e06:	f4ff af3e 	bcc.w	8003c86 <ai_platform_network_process+0x16e>
 8003e0a:	9d02      	ldr	r5, [sp, #8]
 8003e0c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003e10:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003e12:	832b      	strh	r3, [r5, #24]
 8003e14:	2a00      	cmp	r2, #0
 8003e16:	f040 808b 	bne.w	8003f30 <ai_platform_network_process+0x418>
 8003e1a:	4616      	mov	r6, r2
 8003e1c:	4617      	mov	r7, r2
 8003e1e:	8b6c      	ldrh	r4, [r5, #26]
 8003e20:	429c      	cmp	r4, r3
 8003e22:	d2ba      	bcs.n	8003d9a <ai_platform_network_process+0x282>
 8003e24:	46ab      	mov	fp, r5
 8003e26:	2e00      	cmp	r6, #0
 8003e28:	d030      	beq.n	8003e8c <ai_platform_network_process+0x374>
 8003e2a:	f04f 0800 	mov.w	r8, #0
 8003e2e:	e014      	b.n	8003e5a <ai_platform_network_process+0x342>
 8003e30:	6882      	ldr	r2, [r0, #8]
 8003e32:	68c5      	ldr	r5, [r0, #12]
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	4413      	add	r3, r2
 8003e3a:	6083      	str	r3, [r0, #8]
 8003e3c:	698b      	ldr	r3, [r1, #24]
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	f859 200a 	ldr.w	r2, [r9, sl]
 8003e46:	f108 0801 	add.w	r8, r8, #1
 8003e4a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003e4e:	440b      	add	r3, r1
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d301      	bcc.n	8003e58 <ai_platform_network_process+0x340>
 8003e54:	68e3      	ldr	r3, [r4, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	8833      	ldrh	r3, [r6, #0]
 8003e5c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003e60:	4543      	cmp	r3, r8
 8003e62:	d913      	bls.n	8003e8c <ai_platform_network_process+0x374>
 8003e64:	6873      	ldr	r3, [r6, #4]
 8003e66:	b18b      	cbz	r3, 8003e8c <ai_platform_network_process+0x374>
 8003e68:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003e6c:	b171      	cbz	r1, 8003e8c <ai_platform_network_process+0x374>
 8003e6e:	6988      	ldr	r0, [r1, #24]
 8003e70:	68b2      	ldr	r2, [r6, #8]
 8003e72:	6803      	ldr	r3, [r0, #0]
 8003e74:	f8d2 9000 	ldr.w	r9, [r2]
 8003e78:	009d      	lsls	r5, r3, #2
 8003e7a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003e7e:	d5d7      	bpl.n	8003e30 <ai_platform_network_process+0x318>
 8003e80:	6881      	ldr	r1, [r0, #8]
 8003e82:	68a2      	ldr	r2, [r4, #8]
 8003e84:	6860      	ldr	r0, [r4, #4]
 8003e86:	f000 fd55 	bl	8004934 <st_int8_copy>
 8003e8a:	e7da      	b.n	8003e42 <ai_platform_network_process+0x32a>
 8003e8c:	4658      	mov	r0, fp
 8003e8e:	f000 f8e7 	bl	8004060 <ai_layers_forward_all>
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d03d      	beq.n	8003f12 <ai_platform_network_process+0x3fa>
 8003e96:	2400      	movs	r4, #0
 8003e98:	e016      	b.n	8003ec8 <ai_platform_network_process+0x3b0>
 8003e9a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003e9e:	f859 100a 	ldr.w	r1, [r9, sl]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d302      	bcc.n	8003eae <ai_platform_network_process+0x396>
 8003ea8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003eac:	1acb      	subs	r3, r1, r3
 8003eae:	f8c8 3004 	str.w	r3, [r8, #4]
 8003eb2:	6981      	ldr	r1, [r0, #24]
 8003eb4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003eb8:	1b52      	subs	r2, r2, r5
 8003eba:	4413      	add	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
 8003ebe:	6983      	ldr	r3, [r0, #24]
 8003ec0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	3401      	adds	r4, #1
 8003ec8:	883b      	ldrh	r3, [r7, #0]
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	d921      	bls.n	8003f12 <ai_platform_network_process+0x3fa>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	b1fb      	cbz	r3, 8003f12 <ai_platform_network_process+0x3fa>
 8003ed2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ed6:	b1e0      	cbz	r0, 8003f12 <ai_platform_network_process+0x3fa>
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003ede:	6983      	ldr	r3, [r0, #24]
 8003ee0:	f8d2 9000 	ldr.w	r9, [r2]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	d5d5      	bpl.n	8003e9a <ai_platform_network_process+0x382>
 8003eee:	6898      	ldr	r0, [r3, #8]
 8003ef0:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8003ef4:	f000 fd1e 	bl	8004934 <st_int8_copy>
 8003ef8:	f859 200a 	ldr.w	r2, [r9, sl]
 8003efc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003f00:	440b      	add	r3, r1
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d302      	bcc.n	8003f0c <ai_platform_network_process+0x3f4>
 8003f06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f10:	e7d9      	b.n	8003ec6 <ai_platform_network_process+0x3ae>
 8003f12:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8003f16:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8003f1a:	3401      	adds	r4, #1
 8003f1c:	b2a4      	uxth	r4, r4
 8003f1e:	42a3      	cmp	r3, r4
 8003f20:	f8ab 401a 	strh.w	r4, [fp, #26]
 8003f24:	f63f af7f 	bhi.w	8003e26 <ai_platform_network_process+0x30e>
 8003f28:	4620      	mov	r0, r4
 8003f2a:	b005      	add	sp, #20
 8003f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f30:	2a01      	cmp	r2, #1
 8003f32:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8003f34:	d033      	beq.n	8003f9e <ai_platform_network_process+0x486>
 8003f36:	f106 070c 	add.w	r7, r6, #12
 8003f3a:	e770      	b.n	8003e1e <ai_platform_network_process+0x306>
 8003f3c:	9d03      	ldr	r5, [sp, #12]
 8003f3e:	2219      	movs	r2, #25
 8003f40:	2112      	movs	r1, #18
 8003f42:	2400      	movs	r4, #0
 8003f44:	f105 000c 	add.w	r0, r5, #12
 8003f48:	f000 f834 	bl	8003fb4 <core_set_error>
 8003f4c:	e725      	b.n	8003d9a <ai_platform_network_process+0x282>
 8003f4e:	9d03      	ldr	r5, [sp, #12]
 8003f50:	4604      	mov	r4, r0
 8003f52:	2221      	movs	r2, #33	@ 0x21
 8003f54:	2112      	movs	r1, #18
 8003f56:	f105 000c 	add.w	r0, r5, #12
 8003f5a:	f000 f82b 	bl	8003fb4 <core_set_error>
 8003f5e:	e71c      	b.n	8003d9a <ai_platform_network_process+0x282>
 8003f60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f64:	832b      	strh	r3, [r5, #24]
 8003f66:	e755      	b.n	8003e14 <ai_platform_network_process+0x2fc>
 8003f68:	9d02      	ldr	r5, [sp, #8]
 8003f6a:	2219      	movs	r2, #25
 8003f6c:	2113      	movs	r1, #19
 8003f6e:	2400      	movs	r4, #0
 8003f70:	f105 000c 	add.w	r0, r5, #12
 8003f74:	f000 f81e 	bl	8003fb4 <core_set_error>
 8003f78:	e70f      	b.n	8003d9a <ai_platform_network_process+0x282>
 8003f7a:	9d02      	ldr	r5, [sp, #8]
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	2221      	movs	r2, #33	@ 0x21
 8003f80:	2113      	movs	r1, #19
 8003f82:	f105 000c 	add.w	r0, r5, #12
 8003f86:	f000 f815 	bl	8003fb4 <core_set_error>
 8003f8a:	e706      	b.n	8003d9a <ai_platform_network_process+0x282>
 8003f8c:	9d02      	ldr	r5, [sp, #8]
 8003f8e:	2217      	movs	r2, #23
 8003f90:	2113      	movs	r1, #19
 8003f92:	2400      	movs	r4, #0
 8003f94:	f105 000c 	add.w	r0, r5, #12
 8003f98:	f000 f80c 	bl	8003fb4 <core_set_error>
 8003f9c:	e6fd      	b.n	8003d9a <ai_platform_network_process+0x282>
 8003f9e:	2700      	movs	r7, #0
 8003fa0:	e73d      	b.n	8003e1e <ai_platform_network_process+0x306>
 8003fa2:	bf00      	nop

08003fa4 <core_init>:
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	4770      	bx	lr

08003fa8 <core_get_error>:
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2200      	movs	r2, #0
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <core_set_error>:
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	7800      	ldrb	r0, [r0, #0]
 8003fb8:	b108      	cbz	r0, 8003fbe <core_set_error+0xa>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	4770      	bx	lr
 8003fbe:	7019      	strb	r1, [r3, #0]
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	f362 211f 	bfi	r1, r2, #8, #24
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	4770      	bx	lr

08003fcc <ai_check_custom_types>:
 8003fcc:	b082      	sub	sp, #8
 8003fce:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <ai_check_custom_types+0x4c>)
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	b118      	cbz	r0, 8003fdc <ai_check_custom_types+0x10>
 8003fd4:	7803      	ldrb	r3, [r0, #0]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d002      	beq.n	8003fe0 <ai_check_custom_types+0x14>
 8003fda:	2000      	movs	r0, #0
 8003fdc:	b002      	add	sp, #8
 8003fde:	4770      	bx	lr
 8003fe0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <ai_check_custom_types+0x26>
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f080 0001 	eor.w	r0, r0, #1
 8003fee:	b002      	add	sp, #8
 8003ff0:	4770      	bx	lr
 8003ff2:	7842      	ldrb	r2, [r0, #1]
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1f4      	bne.n	8003fe8 <ai_check_custom_types+0x1c>
 8003ffe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004002:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004006:	429a      	cmp	r2, r3
 8004008:	d1ee      	bne.n	8003fe8 <ai_check_custom_types+0x1c>
 800400a:	7842      	ldrb	r2, [r0, #1]
 800400c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d1e9      	bne.n	8003fe8 <ai_check_custom_types+0x1c>
 8004014:	2000      	movs	r0, #0
 8004016:	e7e8      	b.n	8003fea <ai_check_custom_types+0x1e>
 8004018:	84048403 	.word	0x84048403

0800401c <ai_layers_init_all>:
 800401c:	2100      	movs	r1, #0
 800401e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004020:	b13b      	cbz	r3, 8004032 <ai_layers_init_all+0x16>
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	3101      	adds	r1, #1
 8004026:	60d8      	str	r0, [r3, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	4613      	mov	r3, r2
 800402c:	d001      	beq.n	8004032 <ai_layers_init_all+0x16>
 800402e:	2a00      	cmp	r2, #0
 8004030:	d1f6      	bne.n	8004020 <ai_layers_init_all+0x4>
 8004032:	4608      	mov	r0, r1
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop

08004038 <ai_layers_post_init_all>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	2500      	movs	r5, #0
 800403c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800403e:	b16c      	cbz	r4, 800405c <ai_layers_post_init_all+0x24>
 8004040:	6863      	ldr	r3, [r4, #4]
 8004042:	07db      	lsls	r3, r3, #31
 8004044:	d504      	bpl.n	8004050 <ai_layers_post_init_all+0x18>
 8004046:	6a23      	ldr	r3, [r4, #32]
 8004048:	4620      	mov	r0, r4
 800404a:	b10b      	cbz	r3, 8004050 <ai_layers_post_init_all+0x18>
 800404c:	3501      	adds	r5, #1
 800404e:	4798      	blx	r3
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	42a3      	cmp	r3, r4
 8004054:	461c      	mov	r4, r3
 8004056:	d001      	beq.n	800405c <ai_layers_post_init_all+0x24>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <ai_layers_post_init_all+0x6>
 800405c:	4628      	mov	r0, r5
 800405e:	bd38      	pop	{r3, r4, r5, pc}

08004060 <ai_layers_forward_all>:
 8004060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8004068:	4604      	mov	r4, r0
 800406a:	f1b8 0f00 	cmp.w	r8, #0
 800406e:	d02a      	beq.n	80040c6 <ai_layers_forward_all+0x66>
 8004070:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004072:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8004074:	b319      	cbz	r1, 80040be <ai_layers_forward_all+0x5e>
 8004076:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004078:	2001      	movs	r0, #1
 800407a:	47c0      	blx	r8
 800407c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800407e:	b1f6      	cbz	r6, 80040be <ai_layers_forward_all+0x5e>
 8004080:	2700      	movs	r7, #0
 8004082:	4631      	mov	r1, r6
 8004084:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004086:	2002      	movs	r0, #2
 8004088:	47c0      	blx	r8
 800408a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800408c:	4628      	mov	r0, r5
 800408e:	696b      	ldr	r3, [r5, #20]
 8004090:	4798      	blx	r3
 8004092:	692e      	ldr	r6, [r5, #16]
 8004094:	2003      	movs	r0, #3
 8004096:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004098:	42b5      	cmp	r5, r6
 800409a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800409c:	d007      	beq.n	80040ae <ai_layers_forward_all+0x4e>
 800409e:	47c0      	blx	r8
 80040a0:	3701      	adds	r7, #1
 80040a2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80040a4:	2e00      	cmp	r6, #0
 80040a6:	d1ec      	bne.n	8004082 <ai_layers_forward_all+0x22>
 80040a8:	4638      	mov	r0, r7
 80040aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ae:	2003      	movs	r0, #3
 80040b0:	3701      	adds	r7, #1
 80040b2:	47c0      	blx	r8
 80040b4:	2300      	movs	r3, #0
 80040b6:	4638      	mov	r0, r7
 80040b8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80040ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040be:	2700      	movs	r7, #0
 80040c0:	4638      	mov	r0, r7
 80040c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c6:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80040c8:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	d0f7      	beq.n	80040be <ai_layers_forward_all+0x5e>
 80040ce:	4647      	mov	r7, r8
 80040d0:	696b      	ldr	r3, [r5, #20]
 80040d2:	4628      	mov	r0, r5
 80040d4:	4798      	blx	r3
 80040d6:	462b      	mov	r3, r5
 80040d8:	692d      	ldr	r5, [r5, #16]
 80040da:	429d      	cmp	r5, r3
 80040dc:	d004      	beq.n	80040e8 <ai_layers_forward_all+0x88>
 80040de:	3701      	adds	r7, #1
 80040e0:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80040e2:	2d00      	cmp	r5, #0
 80040e4:	d1f4      	bne.n	80040d0 <ai_layers_forward_all+0x70>
 80040e6:	e7df      	b.n	80040a8 <ai_layers_forward_all+0x48>
 80040e8:	2300      	movs	r3, #0
 80040ea:	3701      	adds	r7, #1
 80040ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80040ee:	e7db      	b.n	80040a8 <ai_layers_forward_all+0x48>

080040f0 <forward_dense_integer_SSSA_ch>:
 80040f0:	6983      	ldr	r3, [r0, #24]
 80040f2:	8818      	ldrh	r0, [r3, #0]
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f000 80af 	beq.w	8004258 <forward_dense_integer_SSSA_ch+0x168>
 80040fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fe:	685c      	ldr	r4, [r3, #4]
 8004100:	b08f      	sub	sp, #60	@ 0x3c
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	b103      	cbz	r3, 8004108 <forward_dense_integer_SSSA_ch+0x18>
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2801      	cmp	r0, #1
 800410a:	f000 813f 	beq.w	800438c <forward_dense_integer_SSSA_ch+0x29c>
 800410e:	6922      	ldr	r2, [r4, #16]
 8004110:	b102      	cbz	r2, 8004114 <forward_dense_integer_SSSA_ch+0x24>
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	2802      	cmp	r0, #2
 8004116:	f000 813c 	beq.w	8004392 <forward_dense_integer_SSSA_ch+0x2a2>
 800411a:	69e5      	ldr	r5, [r4, #28]
 800411c:	2d00      	cmp	r5, #0
 800411e:	f000 80eb 	beq.w	80042f8 <forward_dense_integer_SSSA_ch+0x208>
 8004122:	8b26      	ldrh	r6, [r4, #24]
 8004124:	6829      	ldr	r1, [r5, #0]
 8004126:	2e01      	cmp	r6, #1
 8004128:	f240 8110 	bls.w	800434c <forward_dense_integer_SSSA_ch+0x25c>
 800412c:	686d      	ldr	r5, [r5, #4]
 800412e:	2803      	cmp	r0, #3
 8004130:	f000 8132 	beq.w	8004398 <forward_dense_integer_SSSA_ch+0x2a8>
 8004134:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8004138:	69a8      	ldr	r0, [r5, #24]
 800413a:	f1b8 0f00 	cmp.w	r8, #0
 800413e:	f000 80f2 	beq.w	8004326 <forward_dense_integer_SSSA_ch+0x236>
 8004142:	6880      	ldr	r0, [r0, #8]
 8004144:	68dc      	ldr	r4, [r3, #12]
 8004146:	900d      	str	r0, [sp, #52]	@ 0x34
 8004148:	68d0      	ldr	r0, [r2, #12]
 800414a:	6866      	ldr	r6, [r4, #4]
 800414c:	f8d8 8000 	ldr.w	r8, [r8]
 8004150:	6995      	ldr	r5, [r2, #24]
 8004152:	fa1f fa86 	uxth.w	sl, r6
 8004156:	9609      	str	r6, [sp, #36]	@ 0x24
 8004158:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 800415c:	68c0      	ldr	r0, [r0, #12]
 800415e:	fa1f fb89 	uxth.w	fp, r9
 8004162:	fb00 f004 	mul.w	r0, r0, r4
 8004166:	699c      	ldr	r4, [r3, #24]
 8004168:	9008      	str	r0, [sp, #32]
 800416a:	f1b8 0f00 	cmp.w	r8, #0
 800416e:	d003      	beq.n	8004178 <forward_dense_integer_SSSA_ch+0x88>
 8004170:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8004174:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8d2 c000 	ldr.w	ip, [r2]
 800417e:	6808      	ldr	r0, [r1, #0]
 8004180:	698a      	ldr	r2, [r1, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d06a      	beq.n	800425c <forward_dense_integer_SSSA_ch+0x16c>
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	2900      	cmp	r1, #0
 800418a:	f000 8098 	beq.w	80042be <forward_dense_integer_SSSA_ch+0x1ce>
 800418e:	885e      	ldrh	r6, [r3, #2]
 8004190:	2e00      	cmp	r6, #0
 8004192:	f000 8084 	beq.w	800429e <forward_dense_integer_SSSA_ch+0x1ae>
 8004196:	680f      	ldr	r7, [r1, #0]
 8004198:	ed97 0a00 	vldr	s0, [r7]
 800419c:	f1bc 0f00 	cmp.w	ip, #0
 80041a0:	f000 8083 	beq.w	80042aa <forward_dense_integer_SSSA_ch+0x1ba>
 80041a4:	f8dc e004 	ldr.w	lr, [ip, #4]
 80041a8:	f1be 0f00 	cmp.w	lr, #0
 80041ac:	f000 8092 	beq.w	80042d4 <forward_dense_integer_SSSA_ch+0x1e4>
 80041b0:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	d05f      	beq.n	8004278 <forward_dense_integer_SSSA_ch+0x188>
 80041b8:	6897      	ldr	r7, [r2, #8]
 80041ba:	f8de 2000 	ldr.w	r2, [lr]
 80041be:	68ad      	ldr	r5, [r5, #8]
 80041c0:	68a4      	ldr	r4, [r4, #8]
 80041c2:	edd2 0a00 	vldr	s1, [r2]
 80041c6:	2900      	cmp	r1, #0
 80041c8:	d060      	beq.n	800428c <forward_dense_integer_SSSA_ch+0x19c>
 80041ca:	885b      	ldrh	r3, [r3, #2]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 808a 	beq.w	80042e6 <forward_dense_integer_SSSA_ch+0x1f6>
 80041d2:	684b      	ldr	r3, [r1, #4]
 80041d4:	f993 3000 	ldrsb.w	r3, [r3]
 80041d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80041da:	f1bc 0f00 	cmp.w	ip, #0
 80041de:	f000 80d2 	beq.w	8004386 <forward_dense_integer_SSSA_ch+0x296>
 80041e2:	f1be 0f00 	cmp.w	lr, #0
 80041e6:	f000 8084 	beq.w	80042f2 <forward_dense_integer_SSSA_ch+0x202>
 80041ea:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80041ee:	2e00      	cmp	r6, #0
 80041f0:	d14f      	bne.n	8004292 <forward_dense_integer_SSSA_ch+0x1a2>
 80041f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80041f4:	b110      	cbz	r0, 80041fc <forward_dense_integer_SSSA_ch+0x10c>
 80041f6:	6840      	ldr	r0, [r0, #4]
 80041f8:	b100      	cbz	r0, 80041fc <forward_dense_integer_SSSA_ch+0x10c>
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	fa1f f989 	uxth.w	r9, r9
 8004200:	4642      	mov	r2, r8
 8004202:	4659      	mov	r1, fp
 8004204:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 8004208:	930a      	str	r3, [sp, #40]	@ 0x28
 800420a:	f000 f8cb 	bl	80043a4 <align_factor_ch>
 800420e:	9b08      	ldr	r3, [sp, #32]
 8004210:	b1fb      	cbz	r3, 8004252 <forward_dense_integer_SSSA_ch+0x162>
 8004212:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004216:	4652      	mov	r2, sl
 8004218:	2600      	movs	r6, #0
 800421a:	468a      	mov	sl, r1
 800421c:	4639      	mov	r1, r7
 800421e:	4647      	mov	r7, r8
 8004220:	4698      	mov	r8, r3
 8004222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004224:	3601      	adds	r6, #1
 8004226:	4620      	mov	r0, r4
 8004228:	4454      	add	r4, sl
 800422a:	9304      	str	r3, [sp, #16]
 800422c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800422e:	9303      	str	r3, [sp, #12]
 8004230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004232:	9302      	str	r3, [sp, #8]
 8004234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004236:	e9cd 5705 	strd	r5, r7, [sp, #20]
 800423a:	e9cd 7300 	strd	r7, r3, [sp]
 800423e:	465b      	mov	r3, fp
 8004240:	444d      	add	r5, r9
 8004242:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8004246:	f000 f8dd 	bl	8004404 <st_sssa8_ch_fully_connected>
 800424a:	4546      	cmp	r6, r8
 800424c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8004250:	d1e7      	bne.n	8004222 <forward_dense_integer_SSSA_ch+0x132>
 8004252:	b00f      	add	sp, #60	@ 0x3c
 8004254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004258:	6843      	ldr	r3, [r0, #4]
 800425a:	deff      	udf	#255	@ 0xff
 800425c:	f1bc 0f00 	cmp.w	ip, #0
 8004260:	d052      	beq.n	8004308 <forward_dense_integer_SSSA_ch+0x218>
 8004262:	f8dc e004 	ldr.w	lr, [ip, #4]
 8004266:	f1be 0f00 	cmp.w	lr, #0
 800426a:	d058      	beq.n	800431e <forward_dense_integer_SSSA_ch+0x22e>
 800426c:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8004270:	2e00      	cmp	r6, #0
 8004272:	d16d      	bne.n	8004350 <forward_dense_integer_SSSA_ch+0x260>
 8004274:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 8004278:	68ad      	ldr	r5, [r5, #8]
 800427a:	68a4      	ldr	r4, [r4, #8]
 800427c:	6897      	ldr	r7, [r2, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d03d      	beq.n	80042fe <forward_dense_integer_SSSA_ch+0x20e>
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 8004288:	2900      	cmp	r1, #0
 800428a:	d19e      	bne.n	80041ca <forward_dense_integer_SSSA_ch+0xda>
 800428c:	910c      	str	r1, [sp, #48]	@ 0x30
 800428e:	2e00      	cmp	r6, #0
 8004290:	d0af      	beq.n	80041f2 <forward_dense_integer_SSSA_ch+0x102>
 8004292:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004296:	f993 3000 	ldrsb.w	r3, [r3]
 800429a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800429c:	e7aa      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 800429e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 80042a2:	f1bc 0f00 	cmp.w	ip, #0
 80042a6:	f47f af7d 	bne.w	80041a4 <forward_dense_integer_SSSA_ch+0xb4>
 80042aa:	68ad      	ldr	r5, [r5, #8]
 80042ac:	68a4      	ldr	r4, [r4, #8]
 80042ae:	6897      	ldr	r7, [r2, #8]
 80042b0:	2e00      	cmp	r6, #0
 80042b2:	d158      	bne.n	8004366 <forward_dense_integer_SSSA_ch+0x276>
 80042b4:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 80042b8:	960c      	str	r6, [sp, #48]	@ 0x30
 80042ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80042bc:	e79a      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 80042be:	f1bc 0f00 	cmp.w	ip, #0
 80042c2:	d021      	beq.n	8004308 <forward_dense_integer_SSSA_ch+0x218>
 80042c4:	f8dc e004 	ldr.w	lr, [ip, #4]
 80042c8:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 80042cc:	f1be 0f00 	cmp.w	lr, #0
 80042d0:	f47f af6e 	bne.w	80041b0 <forward_dense_integer_SSSA_ch+0xc0>
 80042d4:	68ad      	ldr	r5, [r5, #8]
 80042d6:	68a4      	ldr	r4, [r4, #8]
 80042d8:	6897      	ldr	r7, [r2, #8]
 80042da:	b179      	cbz	r1, 80042fc <forward_dense_integer_SSSA_ch+0x20c>
 80042dc:	885b      	ldrh	r3, [r3, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d14a      	bne.n	8004378 <forward_dense_integer_SSSA_ch+0x288>
 80042e2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 80042e6:	2300      	movs	r3, #0
 80042e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80042ea:	f1be 0f00 	cmp.w	lr, #0
 80042ee:	f47f af7c 	bne.w	80041ea <forward_dense_integer_SSSA_ch+0xfa>
 80042f2:	2300      	movs	r3, #0
 80042f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042f6:	e77d      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 80042f8:	4629      	mov	r1, r5
 80042fa:	e718      	b.n	800412e <forward_dense_integer_SSSA_ch+0x3e>
 80042fc:	460b      	mov	r3, r1
 80042fe:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 8004302:	930c      	str	r3, [sp, #48]	@ 0x30
 8004304:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004306:	e775      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 8004308:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 800430c:	4663      	mov	r3, ip
 800430e:	eef0 0a40 	vmov.f32	s1, s0
 8004312:	68ad      	ldr	r5, [r5, #8]
 8004314:	68a4      	ldr	r4, [r4, #8]
 8004316:	6897      	ldr	r7, [r2, #8]
 8004318:	930c      	str	r3, [sp, #48]	@ 0x30
 800431a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800431c:	e76a      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 800431e:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 8004322:	4673      	mov	r3, lr
 8004324:	e7f3      	b.n	800430e <forward_dense_integer_SSSA_ch+0x21e>
 8004326:	6880      	ldr	r0, [r0, #8]
 8004328:	68dc      	ldr	r4, [r3, #12]
 800432a:	900d      	str	r0, [sp, #52]	@ 0x34
 800432c:	68d0      	ldr	r0, [r2, #12]
 800432e:	6866      	ldr	r6, [r4, #4]
 8004330:	6995      	ldr	r5, [r2, #24]
 8004332:	fa1f fa86 	uxth.w	sl, r6
 8004336:	9609      	str	r6, [sp, #36]	@ 0x24
 8004338:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 800433c:	68c0      	ldr	r0, [r0, #12]
 800433e:	fa1f fb89 	uxth.w	fp, r9
 8004342:	fb00 f004 	mul.w	r0, r0, r4
 8004346:	699c      	ldr	r4, [r3, #24]
 8004348:	9008      	str	r0, [sp, #32]
 800434a:	e715      	b.n	8004178 <forward_dense_integer_SSSA_ch+0x88>
 800434c:	2500      	movs	r5, #0
 800434e:	e6ee      	b.n	800412e <forward_dense_integer_SSSA_ch+0x3e>
 8004350:	930c      	str	r3, [sp, #48]	@ 0x30
 8004352:	f8de 3000 	ldr.w	r3, [lr]
 8004356:	68ad      	ldr	r5, [r5, #8]
 8004358:	68a4      	ldr	r4, [r4, #8]
 800435a:	6897      	ldr	r7, [r2, #8]
 800435c:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 8004360:	edd3 0a00 	vldr	s1, [r3]
 8004364:	e795      	b.n	8004292 <forward_dense_integer_SSSA_ch+0x1a2>
 8004366:	684b      	ldr	r3, [r1, #4]
 8004368:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 800436c:	f993 3000 	ldrsb.w	r3, [r3]
 8004370:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8004374:	930c      	str	r3, [sp, #48]	@ 0x30
 8004376:	e73d      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 8004378:	684b      	ldr	r3, [r1, #4]
 800437a:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80043a0 <forward_dense_integer_SSSA_ch+0x2b0>
 800437e:	f993 3000 	ldrsb.w	r3, [r3]
 8004382:	930c      	str	r3, [sp, #48]	@ 0x30
 8004384:	e7b5      	b.n	80042f2 <forward_dense_integer_SSSA_ch+0x202>
 8004386:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800438a:	e733      	b.n	80041f4 <forward_dense_integer_SSSA_ch+0x104>
 800438c:	2300      	movs	r3, #0
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	deff      	udf	#255	@ 0xff
 8004392:	2300      	movs	r3, #0
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	deff      	udf	#255	@ 0xff
 8004398:	2300      	movs	r3, #0
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	deff      	udf	#255	@ 0xff
 800439e:	bf00      	nop
 80043a0:	00000000 	.word	0x00000000

080043a4 <align_factor_ch>:
 80043a4:	b361      	cbz	r1, 8004400 <align_factor_ch+0x5c>
 80043a6:	ee80 7a20 	vdiv.f32	s14, s0, s1
 80043aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80043ae:	b570      	push	{r4, r5, r6, lr}
 80043b0:	1e9d      	subs	r5, r3, #2
 80043b2:	1f14      	subs	r4, r2, #4
 80043b4:	2600      	movs	r6, #0
 80043b6:	ecf0 7a01 	vldmia	r0!, {s15}
 80043ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043be:	ee17 ea90 	vmov	lr, s15
 80043c2:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 80043c6:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 80043ca:	f1be 0f00 	cmp.w	lr, #0
 80043ce:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 80043d2:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 80043d6:	bfb8      	it	lt
 80043d8:	f1cc 0c00 	rsblt	ip, ip, #0
 80043dc:	2a1f      	cmp	r2, #31
 80043de:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 80043e2:	dc06      	bgt.n	80043f2 <align_factor_ch+0x4e>
 80043e4:	4281      	cmp	r1, r0
 80043e6:	f825 2f02 	strh.w	r2, [r5, #2]!
 80043ea:	f844 3f04 	str.w	r3, [r4, #4]!
 80043ee:	d1e2      	bne.n	80043b6 <align_factor_ch+0x12>
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	4281      	cmp	r1, r0
 80043f4:	f825 6f02 	strh.w	r6, [r5, #2]!
 80043f8:	f844 6f04 	str.w	r6, [r4, #4]!
 80043fc:	d1db      	bne.n	80043b6 <align_factor_ch+0x12>
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <st_sssa8_ch_fully_connected>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	b097      	sub	sp, #92	@ 0x5c
 800440a:	468a      	mov	sl, r1
 800440c:	4693      	mov	fp, r2
 800440e:	4619      	mov	r1, r3
 8004410:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8004412:	9314      	str	r3, [sp, #80]	@ 0x50
 8004414:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004418:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800441c:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800441e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004422:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 8004426:	9512      	str	r5, [sp, #72]	@ 0x48
 8004428:	930d      	str	r3, [sp, #52]	@ 0x34
 800442a:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 800442e:	2900      	cmp	r1, #0
 8004430:	f000 827b 	beq.w	800492a <st_sssa8_ch_fully_connected+0x526>
 8004434:	463c      	mov	r4, r7
 8004436:	3504      	adds	r5, #4
 8004438:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800443c:	f04f 0c01 	mov.w	ip, #1
 8004440:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8004444:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8004448:	1e51      	subs	r1, r2, #1
 800444a:	fa0c f602 	lsl.w	r6, ip, r2
 800444e:	fa03 f202 	lsl.w	r2, r3, r2
 8004452:	b289      	uxth	r1, r1
 8004454:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 8004458:	2914      	cmp	r1, #20
 800445a:	f200 81e8 	bhi.w	800482e <st_sssa8_ch_fully_connected+0x42a>
 800445e:	42bc      	cmp	r4, r7
 8004460:	f845 2c04 	str.w	r2, [r5, #-4]
 8004464:	f105 0504 	add.w	r5, r5, #4
 8004468:	d1ec      	bne.n	8004444 <st_sssa8_ch_fully_connected+0x40>
 800446a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800446c:	fa1f f38e 	uxth.w	r3, lr
 8004470:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8004472:	eba7 0508 	sub.w	r5, r7, r8
 8004476:	0852      	lsrs	r2, r2, #1
 8004478:	f8cd e000 	str.w	lr, [sp]
 800447c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8004480:	4631      	mov	r1, r6
 8004482:	4614      	mov	r4, r2
 8004484:	9215      	str	r2, [sp, #84]	@ 0x54
 8004486:	465a      	mov	r2, fp
 8004488:	9513      	str	r5, [sp, #76]	@ 0x4c
 800448a:	f000 fadb 	bl	8004a44 <st_int8_reordered_no_shift_zero>
 800448e:	2c00      	cmp	r4, #0
 8004490:	f000 8179 	beq.w	8004786 <st_sssa8_ch_fully_connected+0x382>
 8004494:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8004496:	1e62      	subs	r2, r4, #1
 8004498:	f1ab 0310 	sub.w	r3, fp, #16
 800449c:	46d9      	mov	r9, fp
 800449e:	b292      	uxth	r2, r2
 80044a0:	f100 0110 	add.w	r1, r0, #16
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80044aa:	3301      	adds	r3, #1
 80044ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80044ae:	f1ab 0203 	sub.w	r2, fp, #3
 80044b2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80044b4:	4602      	mov	r2, r0
 80044b6:	3208      	adds	r2, #8
 80044b8:	9208      	str	r2, [sp, #32]
 80044ba:	1d2a      	adds	r2, r5, #4
 80044bc:	9207      	str	r2, [sp, #28]
 80044be:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80044c0:	3202      	adds	r2, #2
 80044c2:	9204      	str	r2, [sp, #16]
 80044c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044c6:	3204      	adds	r2, #4
 80044c8:	9205      	str	r2, [sp, #20]
 80044ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80044cc:	3204      	adds	r2, #4
 80044ce:	9206      	str	r2, [sp, #24]
 80044d0:	011a      	lsls	r2, r3, #4
 80044d2:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80044d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80044d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80044da:	f1ab 0304 	sub.w	r3, fp, #4
 80044de:	9311      	str	r3, [sp, #68]	@ 0x44
 80044e0:	9b08      	ldr	r3, [sp, #32]
 80044e2:	f1b9 0f0f 	cmp.w	r9, #15
 80044e6:	eb0a 0b09 	add.w	fp, sl, r9
 80044ea:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 80044ee:	f340 81ef 	ble.w	80048d0 <st_sssa8_ch_fully_connected+0x4cc>
 80044f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044f4:	465c      	mov	r4, fp
 80044f6:	eb0a 0502 	add.w	r5, sl, r2
 80044fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80044fc:	f8da 6000 	ldr.w	r6, [sl]
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	ea4f 2736 	mov.w	r7, r6, ror #8
 8004506:	f8d2 e000 	ldr.w	lr, [r2]
 800450a:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800450e:	fa2f f787 	sxtb16	r7, r7
 8004512:	fa2f f686 	sxtb16	r6, r6
 8004516:	fa2f fc8c 	sxtb16	ip, ip
 800451a:	fa2f f080 	sxtb16	r0, r0
 800451e:	fb2e 1106 	smlad	r1, lr, r6, r1
 8004522:	fb2e 3300 	smlad	r3, lr, r0, r3
 8004526:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800452a:	fb2e 1707 	smlad	r7, lr, r7, r1
 800452e:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8004532:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004536:	6860      	ldr	r0, [r4, #4]
 8004538:	ea4f 2631 	mov.w	r6, r1, ror #8
 800453c:	6893      	ldr	r3, [r2, #8]
 800453e:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8004542:	fa2f f686 	sxtb16	r6, r6
 8004546:	fa2f f181 	sxtb16	r1, r1
 800454a:	fa2f fc8c 	sxtb16	ip, ip
 800454e:	fa2f f080 	sxtb16	r0, r0
 8004552:	fb23 7101 	smlad	r1, r3, r1, r7
 8004556:	fb23 e300 	smlad	r3, r3, r0, lr
 800455a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800455e:	fb2e 1606 	smlad	r6, lr, r6, r1
 8004562:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8004566:	f8da 0008 	ldr.w	r0, [sl, #8]
 800456a:	68a1      	ldr	r1, [r4, #8]
 800456c:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8004570:	6913      	ldr	r3, [r2, #16]
 8004572:	ea4f 2731 	mov.w	r7, r1, ror #8
 8004576:	fa2f fc8c 	sxtb16	ip, ip
 800457a:	fa2f f080 	sxtb16	r0, r0
 800457e:	fa2f f787 	sxtb16	r7, r7
 8004582:	fa2f f181 	sxtb16	r1, r1
 8004586:	fb23 6000 	smlad	r0, r3, r0, r6
 800458a:	fb23 e301 	smlad	r3, r3, r1, lr
 800458e:	6951      	ldr	r1, [r2, #20]
 8004590:	fb21 000c 	smlad	r0, r1, ip, r0
 8004594:	fb21 3c07 	smlad	ip, r1, r7, r3
 8004598:	f8da 100c 	ldr.w	r1, [sl, #12]
 800459c:	3410      	adds	r4, #16
 800459e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 80045a2:	f10a 0a10 	add.w	sl, sl, #16
 80045a6:	ea4f 2731 	mov.w	r7, r1, ror #8
 80045aa:	6993      	ldr	r3, [r2, #24]
 80045ac:	ea4f 263e 	mov.w	r6, lr, ror #8
 80045b0:	fa2f f787 	sxtb16	r7, r7
 80045b4:	fa2f f181 	sxtb16	r1, r1
 80045b8:	fa2f fe8e 	sxtb16	lr, lr
 80045bc:	fa2f f686 	sxtb16	r6, r6
 80045c0:	fb23 0101 	smlad	r1, r3, r1, r0
 80045c4:	fb23 c00e 	smlad	r0, r3, lr, ip
 80045c8:	69d3      	ldr	r3, [r2, #28]
 80045ca:	3220      	adds	r2, #32
 80045cc:	fb23 1107 	smlad	r1, r3, r7, r1
 80045d0:	fb23 0306 	smlad	r3, r3, r6, r0
 80045d4:	4555      	cmp	r5, sl
 80045d6:	d191      	bne.n	80044fc <st_sssa8_ch_fully_connected+0xf8>
 80045d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80045dc:	4493      	add	fp, r2
 80045de:	4690      	mov	r8, r2
 80045e0:	9003      	str	r0, [sp, #12]
 80045e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80045e4:	4542      	cmp	r2, r8
 80045e6:	f340 8171 	ble.w	80048cc <st_sssa8_ch_fully_connected+0x4c8>
 80045ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80045ec:	46dc      	mov	ip, fp
 80045ee:	9d03      	ldr	r5, [sp, #12]
 80045f0:	eba2 0208 	sub.w	r2, r2, r8
 80045f4:	0892      	lsrs	r2, r2, #2
 80045f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80045f8:	3201      	adds	r2, #1
 80045fa:	0090      	lsls	r0, r2, #2
 80045fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80045fe:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 8004602:	900a      	str	r0, [sp, #40]	@ 0x28
 8004604:	f85a 7b04 	ldr.w	r7, [sl], #4
 8004608:	f85c 0b04 	ldr.w	r0, [ip], #4
 800460c:	ea4f 2637 	mov.w	r6, r7, ror #8
 8004610:	682a      	ldr	r2, [r5, #0]
 8004612:	ea4f 2430 	mov.w	r4, r0, ror #8
 8004616:	fa2f f686 	sxtb16	r6, r6
 800461a:	fa2f f787 	sxtb16	r7, r7
 800461e:	fa2f f484 	sxtb16	r4, r4
 8004622:	fa2f f080 	sxtb16	r0, r0
 8004626:	fb22 1107 	smlad	r1, r2, r7, r1
 800462a:	fb22 3200 	smlad	r2, r2, r0, r3
 800462e:	686b      	ldr	r3, [r5, #4]
 8004630:	3508      	adds	r5, #8
 8004632:	fb23 1106 	smlad	r1, r3, r6, r1
 8004636:	fb23 2304 	smlad	r3, r3, r4, r2
 800463a:	45d6      	cmp	lr, sl
 800463c:	d1e2      	bne.n	8004604 <st_sssa8_ch_fully_connected+0x200>
 800463e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004640:	f108 0804 	add.w	r8, r8, #4
 8004644:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004646:	4493      	add	fp, r2
 8004648:	9a03      	ldr	r2, [sp, #12]
 800464a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800464e:	9203      	str	r2, [sp, #12]
 8004650:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004652:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8004656:	45c1      	cmp	r9, r8
 8004658:	dd37      	ble.n	80046ca <st_sssa8_ch_fully_connected+0x2c6>
 800465a:	9c03      	ldr	r4, [sp, #12]
 800465c:	f99e 0000 	ldrsb.w	r0, [lr]
 8004660:	f9b4 2000 	ldrsh.w	r2, [r4]
 8004664:	fb12 1100 	smlabb	r1, r2, r0, r1
 8004668:	f99b 0000 	ldrsb.w	r0, [fp]
 800466c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8004670:	f108 0201 	add.w	r2, r8, #1
 8004674:	454a      	cmp	r2, r9
 8004676:	da25      	bge.n	80046c4 <st_sssa8_ch_fully_connected+0x2c0>
 8004678:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800467c:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 8004680:	fb12 1100 	smlabb	r1, r2, r0, r1
 8004684:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8004688:	fb12 3300 	smlabb	r3, r2, r0, r3
 800468c:	f108 0202 	add.w	r2, r8, #2
 8004690:	4591      	cmp	r9, r2
 8004692:	dd17      	ble.n	80046c4 <st_sssa8_ch_fully_connected+0x2c0>
 8004694:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8004698:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 800469c:	fb12 1100 	smlabb	r1, r2, r0, r1
 80046a0:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 80046a4:	fb12 3300 	smlabb	r3, r2, r0, r3
 80046a8:	f108 0203 	add.w	r2, r8, #3
 80046ac:	4591      	cmp	r9, r2
 80046ae:	dd09      	ble.n	80046c4 <st_sssa8_ch_fully_connected+0x2c0>
 80046b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80046b4:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 80046b8:	fb12 3300 	smlabb	r3, r2, r0, r3
 80046bc:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 80046c0:	fb12 1100 	smlabb	r1, r2, r0, r1
 80046c4:	eba9 0808 	sub.w	r8, r9, r8
 80046c8:	44c6      	add	lr, r8
 80046ca:	9d07      	ldr	r5, [sp, #28]
 80046cc:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 80046d0:	2815      	cmp	r0, #21
 80046d2:	f340 80c2 	ble.w	800485a <st_sssa8_ch_fully_connected+0x456>
 80046d6:	1e84      	subs	r4, r0, #2
 80046d8:	2201      	movs	r2, #1
 80046da:	3801      	subs	r0, #1
 80046dc:	fa02 f404 	lsl.w	r4, r2, r4
 80046e0:	9a05      	ldr	r2, [sp, #20]
 80046e2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80046e6:	fb51 4202 	smmla	r2, r1, r2, r4
 80046ea:	9906      	ldr	r1, [sp, #24]
 80046ec:	4102      	asrs	r2, r0
 80046ee:	1eac      	subs	r4, r5, #2
 80046f0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80046f4:	440a      	add	r2, r1
 80046f6:	f302 0207 	ssat	r2, #8, r2
 80046fa:	9904      	ldr	r1, [sp, #16]
 80046fc:	b252      	sxtb	r2, r2
 80046fe:	1e48      	subs	r0, r1, #1
 8004700:	f801 2c02 	strb.w	r2, [r1, #-2]
 8004704:	f9b4 4000 	ldrsh.w	r4, [r4]
 8004708:	2c15      	cmp	r4, #21
 800470a:	f340 8098 	ble.w	800483e <st_sssa8_ch_fully_connected+0x43a>
 800470e:	1ea1      	subs	r1, r4, #2
 8004710:	2201      	movs	r2, #1
 8004712:	3c01      	subs	r4, #1
 8004714:	fa02 f101 	lsl.w	r1, r2, r1
 8004718:	9a05      	ldr	r2, [sp, #20]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	fb53 1302 	smmla	r3, r3, r2, r1
 8004720:	9a06      	ldr	r2, [sp, #24]
 8004722:	4123      	asrs	r3, r4
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	4413      	add	r3, r2
 8004728:	f303 0307 	ssat	r3, #8, r3
 800472c:	b25b      	sxtb	r3, r3
 800472e:	9a07      	ldr	r2, [sp, #28]
 8004730:	eb0e 0a09 	add.w	sl, lr, r9
 8004734:	7003      	strb	r3, [r0, #0]
 8004736:	3204      	adds	r2, #4
 8004738:	9b08      	ldr	r3, [sp, #32]
 800473a:	9207      	str	r2, [sp, #28]
 800473c:	3308      	adds	r3, #8
 800473e:	9a04      	ldr	r2, [sp, #16]
 8004740:	9308      	str	r3, [sp, #32]
 8004742:	3202      	adds	r2, #2
 8004744:	9204      	str	r2, [sp, #16]
 8004746:	9a05      	ldr	r2, [sp, #20]
 8004748:	3208      	adds	r2, #8
 800474a:	9205      	str	r2, [sp, #20]
 800474c:	9a06      	ldr	r2, [sp, #24]
 800474e:	3208      	adds	r2, #8
 8004750:	9206      	str	r2, [sp, #24]
 8004752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004754:	429a      	cmp	r2, r3
 8004756:	f47f aec3 	bne.w	80044e0 <st_sssa8_ch_fully_connected+0xdc>
 800475a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800475c:	46cb      	mov	fp, r9
 800475e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004760:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004764:	9220      	str	r2, [sp, #128]	@ 0x80
 8004766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004768:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800476c:	9213      	str	r2, [sp, #76]	@ 0x4c
 800476e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004770:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004774:	9224      	str	r2, [sp, #144]	@ 0x90
 8004776:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8004778:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800477c:	9225      	str	r2, [sp, #148]	@ 0x94
 800477e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004784:	9312      	str	r3, [sp, #72]	@ 0x48
 8004786:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d54c      	bpl.n	8004826 <st_sssa8_ch_fully_connected+0x422>
 800478c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800478e:	ea5f 079b 	movs.w	r7, fp, lsr #2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f000 80c7 	beq.w	8004926 <st_sssa8_ch_fully_connected+0x522>
 8004798:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 800479c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800479e:	f85a 2b04 	ldr.w	r2, [sl], #4
 80047a2:	3008      	adds	r0, #8
 80047a4:	f850 5c08 	ldr.w	r5, [r0, #-8]
 80047a8:	ea4f 2132 	mov.w	r1, r2, ror #8
 80047ac:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80047b0:	fa2f f282 	sxtb16	r2, r2
 80047b4:	fa2f f181 	sxtb16	r1, r1
 80047b8:	fb25 3302 	smlad	r3, r5, r2, r3
 80047bc:	fb24 3301 	smlad	r3, r4, r1, r3
 80047c0:	45b2      	cmp	sl, r6
 80047c2:	d1ec      	bne.n	800479e <st_sssa8_ch_fully_connected+0x39a>
 80047c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80047c6:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 80047ca:	920d      	str	r2, [sp, #52]	@ 0x34
 80047cc:	f01b 0203 	ands.w	r2, fp, #3
 80047d0:	d014      	beq.n	80047fc <st_sssa8_ch_fully_connected+0x3f8>
 80047d2:	3a01      	subs	r2, #1
 80047d4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80047d6:	f996 1000 	ldrsb.w	r1, [r6]
 80047da:	8820      	ldrh	r0, [r4, #0]
 80047dc:	b292      	uxth	r2, r2
 80047de:	fb10 3301 	smlabb	r3, r0, r1, r3
 80047e2:	b15a      	cbz	r2, 80047fc <st_sssa8_ch_fully_connected+0x3f8>
 80047e4:	f996 1001 	ldrsb.w	r1, [r6, #1]
 80047e8:	2a01      	cmp	r2, #1
 80047ea:	8860      	ldrh	r0, [r4, #2]
 80047ec:	fb10 3301 	smlabb	r3, r0, r1, r3
 80047f0:	d004      	beq.n	80047fc <st_sssa8_ch_fully_connected+0x3f8>
 80047f2:	f996 2002 	ldrsb.w	r2, [r6, #2]
 80047f6:	88a1      	ldrh	r1, [r4, #4]
 80047f8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80047fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80047fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004802:	2a15      	cmp	r2, #21
 8004804:	dd69      	ble.n	80048da <st_sssa8_ch_fully_connected+0x4d6>
 8004806:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004808:	1e95      	subs	r5, r2, #2
 800480a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800480c:	3a01      	subs	r2, #1
 800480e:	6804      	ldr	r4, [r0, #0]
 8004810:	2001      	movs	r0, #1
 8004812:	6809      	ldr	r1, [r1, #0]
 8004814:	40a8      	lsls	r0, r5
 8004816:	fb53 0301 	smmla	r3, r3, r1, r0
 800481a:	4113      	asrs	r3, r2
 800481c:	4423      	add	r3, r4
 800481e:	f303 0307 	ssat	r3, #8, r3
 8004822:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8004824:	7013      	strb	r3, [r2, #0]
 8004826:	2000      	movs	r0, #0
 8004828:	b017      	add	sp, #92	@ 0x5c
 800482a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482e:	42bc      	cmp	r4, r7
 8004830:	f845 3c04 	str.w	r3, [r5, #-4]
 8004834:	f105 0504 	add.w	r5, r5, #4
 8004838:	f47f ae04 	bne.w	8004444 <st_sssa8_ch_fully_connected+0x40>
 800483c:	e615      	b.n	800446a <st_sssa8_ch_fully_connected+0x66>
 800483e:	2c00      	cmp	r4, #0
 8004840:	dd1f      	ble.n	8004882 <st_sssa8_ch_fully_connected+0x47e>
 8004842:	9a05      	ldr	r2, [sp, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	9906      	ldr	r1, [sp, #24]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	6809      	ldr	r1, [r1, #0]
 800484c:	fb53 1302 	smmla	r3, r3, r2, r1
 8004850:	4123      	asrs	r3, r4
 8004852:	f303 0307 	ssat	r3, #8, r3
 8004856:	b25b      	sxtb	r3, r3
 8004858:	e769      	b.n	800472e <st_sssa8_ch_fully_connected+0x32a>
 800485a:	2800      	cmp	r0, #0
 800485c:	dd21      	ble.n	80048a2 <st_sssa8_ch_fully_connected+0x49e>
 800485e:	462c      	mov	r4, r5
 8004860:	9a05      	ldr	r2, [sp, #20]
 8004862:	004d      	lsls	r5, r1, #1
 8004864:	9906      	ldr	r1, [sp, #24]
 8004866:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800486a:	3c02      	subs	r4, #2
 800486c:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8004870:	fb55 1502 	smmla	r5, r5, r2, r1
 8004874:	4105      	asrs	r5, r0
 8004876:	f305 0207 	ssat	r2, #8, r5
 800487a:	9904      	ldr	r1, [sp, #16]
 800487c:	b252      	sxtb	r2, r2
 800487e:	1e48      	subs	r0, r1, #1
 8004880:	e73e      	b.n	8004700 <st_sssa8_ch_fully_connected+0x2fc>
 8004882:	f1c4 0401 	rsb	r4, r4, #1
 8004886:	40a3      	lsls	r3, r4
 8004888:	f303 031f 	ssat	r3, #32, r3
 800488c:	9a05      	ldr	r2, [sp, #20]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	fb53 f212 	smmulr	r2, r3, r2
 8004894:	9b06      	ldr	r3, [sp, #24]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4413      	add	r3, r2
 800489a:	f303 0307 	ssat	r3, #8, r3
 800489e:	b25b      	sxtb	r3, r3
 80048a0:	e745      	b.n	800472e <st_sssa8_ch_fully_connected+0x32a>
 80048a2:	f1c0 0001 	rsb	r0, r0, #1
 80048a6:	1eac      	subs	r4, r5, #2
 80048a8:	4081      	lsls	r1, r0
 80048aa:	f301 011f 	ssat	r1, #32, r1
 80048ae:	9a05      	ldr	r2, [sp, #20]
 80048b0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80048b4:	fb51 f212 	smmulr	r2, r1, r2
 80048b8:	9906      	ldr	r1, [sp, #24]
 80048ba:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80048be:	440a      	add	r2, r1
 80048c0:	f302 0207 	ssat	r2, #8, r2
 80048c4:	9904      	ldr	r1, [sp, #16]
 80048c6:	b252      	sxtb	r2, r2
 80048c8:	1e48      	subs	r0, r1, #1
 80048ca:	e719      	b.n	8004700 <st_sssa8_ch_fully_connected+0x2fc>
 80048cc:	46d6      	mov	lr, sl
 80048ce:	e6c2      	b.n	8004656 <st_sssa8_ch_fully_connected+0x252>
 80048d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80048d2:	f04f 0800 	mov.w	r8, #0
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	e683      	b.n	80045e2 <st_sssa8_ch_fully_connected+0x1de>
 80048da:	2a00      	cmp	r2, #0
 80048dc:	dd0f      	ble.n	80048fe <st_sssa8_ch_fully_connected+0x4fa>
 80048de:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80048e4:	6809      	ldr	r1, [r1, #0]
 80048e6:	6800      	ldr	r0, [r0, #0]
 80048e8:	fb53 0301 	smmla	r3, r3, r1, r0
 80048ec:	4113      	asrs	r3, r2
 80048ee:	f303 0307 	ssat	r3, #8, r3
 80048f2:	2000      	movs	r0, #0
 80048f4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80048f6:	7013      	strb	r3, [r2, #0]
 80048f8:	b017      	add	sp, #92	@ 0x5c
 80048fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fe:	f1c2 0201 	rsb	r2, r2, #1
 8004902:	4093      	lsls	r3, r2
 8004904:	f303 031f 	ssat	r3, #32, r3
 8004908:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	fb53 f312 	smmulr	r3, r3, r2
 8004910:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	4413      	add	r3, r2
 8004916:	f303 0307 	ssat	r3, #8, r3
 800491a:	2000      	movs	r0, #0
 800491c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800491e:	7013      	strb	r3, [r2, #0]
 8004920:	b017      	add	sp, #92	@ 0x5c
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	4656      	mov	r6, sl
 8004928:	e750      	b.n	80047cc <st_sssa8_ch_fully_connected+0x3c8>
 800492a:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800492e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004930:	e59b      	b.n	800446a <st_sssa8_ch_fully_connected+0x66>
 8004932:	bf00      	nop

08004934 <st_int8_copy>:
 8004934:	4288      	cmp	r0, r1
 8004936:	d010      	beq.n	800495a <st_int8_copy+0x26>
 8004938:	b17a      	cbz	r2, 800495a <st_int8_copy+0x26>
 800493a:	4288      	cmp	r0, r1
 800493c:	eb00 0302 	add.w	r3, r0, r2
 8004940:	d20c      	bcs.n	800495c <st_int8_copy+0x28>
 8004942:	428b      	cmp	r3, r1
 8004944:	d90a      	bls.n	800495c <st_int8_copy+0x28>
 8004946:	4283      	cmp	r3, r0
 8004948:	440a      	add	r2, r1
 800494a:	d906      	bls.n	800495a <st_int8_copy+0x26>
 800494c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8004950:	4283      	cmp	r3, r0
 8004952:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004956:	d1f9      	bne.n	800494c <st_int8_copy+0x18>
 8004958:	4770      	bx	lr
 800495a:	4770      	bx	lr
 800495c:	078b      	lsls	r3, r1, #30
 800495e:	d102      	bne.n	8004966 <st_int8_copy+0x32>
 8004960:	e008      	b.n	8004974 <st_int8_copy+0x40>
 8004962:	2a00      	cmp	r2, #0
 8004964:	d04c      	beq.n	8004a00 <st_int8_copy+0xcc>
 8004966:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800496a:	3a01      	subs	r2, #1
 800496c:	f801 3b01 	strb.w	r3, [r1], #1
 8004970:	078b      	lsls	r3, r1, #30
 8004972:	d1f6      	bne.n	8004962 <st_int8_copy+0x2e>
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800497c:	d05d      	beq.n	8004a3a <st_int8_copy+0x106>
 800497e:	ea41 0300 	orr.w	r3, r1, r0
 8004982:	075b      	lsls	r3, r3, #29
 8004984:	d13d      	bne.n	8004a02 <st_int8_copy+0xce>
 8004986:	f1be 0f01 	cmp.w	lr, #1
 800498a:	d03a      	beq.n	8004a02 <st_int8_copy+0xce>
 800498c:	f100 0310 	add.w	r3, r0, #16
 8004990:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8004994:	f101 0c10 	add.w	ip, r1, #16
 8004998:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800499c:	3310      	adds	r3, #16
 800499e:	f10c 0c10 	add.w	ip, ip, #16
 80049a2:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 80049a6:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 80049aa:	4573      	cmp	r3, lr
 80049ac:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 80049b0:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 80049b4:	d1f2      	bne.n	800499c <st_int8_copy+0x68>
 80049b6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80049ba:	4421      	add	r1, r4
 80049bc:	4420      	add	r0, r4
 80049be:	f002 0203 	and.w	r2, r2, #3
 80049c2:	b16b      	cbz	r3, 80049e0 <st_int8_copy+0xac>
 80049c4:	6804      	ldr	r4, [r0, #0]
 80049c6:	600c      	str	r4, [r1, #0]
 80049c8:	1e5c      	subs	r4, r3, #1
 80049ca:	d005      	beq.n	80049d8 <st_int8_copy+0xa4>
 80049cc:	6845      	ldr	r5, [r0, #4]
 80049ce:	2c01      	cmp	r4, #1
 80049d0:	604d      	str	r5, [r1, #4]
 80049d2:	d001      	beq.n	80049d8 <st_int8_copy+0xa4>
 80049d4:	6884      	ldr	r4, [r0, #8]
 80049d6:	608c      	str	r4, [r1, #8]
 80049d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80049dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80049e0:	b162      	cbz	r2, 80049fc <st_int8_copy+0xc8>
 80049e2:	f990 3000 	ldrsb.w	r3, [r0]
 80049e6:	3a01      	subs	r2, #1
 80049e8:	700b      	strb	r3, [r1, #0]
 80049ea:	d007      	beq.n	80049fc <st_int8_copy+0xc8>
 80049ec:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80049f0:	2a01      	cmp	r2, #1
 80049f2:	704b      	strb	r3, [r1, #1]
 80049f4:	d002      	beq.n	80049fc <st_int8_copy+0xc8>
 80049f6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80049fa:	708b      	strb	r3, [r1, #2]
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	4770      	bx	lr
 8004a02:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8004a06:	460b      	mov	r3, r1
 8004a08:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8004a0c:	4684      	mov	ip, r0
 8004a0e:	f8dc 8000 	ldr.w	r8, [ip]
 8004a12:	3310      	adds	r3, #16
 8004a14:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8004a18:	f10c 0c10 	add.w	ip, ip, #16
 8004a1c:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8004a20:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8004a24:	f843 8c10 	str.w	r8, [r3, #-16]
 8004a28:	f843 7c0c 	str.w	r7, [r3, #-12]
 8004a2c:	f843 6c08 	str.w	r6, [r3, #-8]
 8004a30:	f843 5c04 	str.w	r5, [r3, #-4]
 8004a34:	459e      	cmp	lr, r3
 8004a36:	d1ea      	bne.n	8004a0e <st_int8_copy+0xda>
 8004a38:	e7bd      	b.n	80049b6 <st_int8_copy+0x82>
 8004a3a:	0893      	lsrs	r3, r2, #2
 8004a3c:	f002 0203 	and.w	r2, r2, #3
 8004a40:	e7bf      	b.n	80049c2 <st_int8_copy+0x8e>
 8004a42:	bf00      	nop

08004a44 <st_int8_reordered_no_shift_zero>:
 8004a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a46:	0897      	lsrs	r7, r2, #2
 8004a48:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8004a4c:	d02d      	beq.n	8004aaa <st_int8_reordered_no_shift_zero+0x66>
 8004a4e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8004a52:	468e      	mov	lr, r1
 8004a54:	f850 cb04 	ldr.w	ip, [r0], #4
 8004a58:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8004a5c:	fad4 f403 	ssub16	r4, r4, r3
 8004a60:	fa2f fc8c 	sxtb16	ip, ip
 8004a64:	fadc fc03 	ssub16	ip, ip, r3
 8004a68:	42a8      	cmp	r0, r5
 8004a6a:	f8ce c000 	str.w	ip, [lr]
 8004a6e:	f8ce 4004 	str.w	r4, [lr, #4]
 8004a72:	f10e 0e08 	add.w	lr, lr, #8
 8004a76:	d1ed      	bne.n	8004a54 <st_int8_reordered_no_shift_zero+0x10>
 8004a78:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8004a7c:	f012 0203 	ands.w	r2, r2, #3
 8004a80:	d012      	beq.n	8004aa8 <st_int8_reordered_no_shift_zero+0x64>
 8004a82:	f995 0000 	ldrsb.w	r0, [r5]
 8004a86:	b273      	sxtb	r3, r6
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	eba0 0003 	sub.w	r0, r0, r3
 8004a8e:	8008      	strh	r0, [r1, #0]
 8004a90:	d00a      	beq.n	8004aa8 <st_int8_reordered_no_shift_zero+0x64>
 8004a92:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8004a96:	2a01      	cmp	r2, #1
 8004a98:	eba0 0003 	sub.w	r0, r0, r3
 8004a9c:	8048      	strh	r0, [r1, #2]
 8004a9e:	d003      	beq.n	8004aa8 <st_int8_reordered_no_shift_zero+0x64>
 8004aa0:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	808b      	strh	r3, [r1, #4]
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aaa:	4605      	mov	r5, r0
 8004aac:	e7e6      	b.n	8004a7c <st_int8_reordered_no_shift_zero+0x38>
 8004aae:	bf00      	nop

08004ab0 <ai_array_to_buffer_fmt>:
 8004ab0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d053      	beq.n	8004b60 <ai_array_to_buffer_fmt+0xb0>
 8004ab8:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8004abc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <ai_array_to_buffer_fmt+0xbc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d010      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004ac2:	dc21      	bgt.n	8004b08 <ai_array_to_buffer_fmt+0x58>
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b70 <ai_array_to_buffer_fmt+0xc0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00c      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004aca:	dd0f      	ble.n	8004aec <ai_array_to_buffer_fmt+0x3c>
 8004acc:	4a29      	ldr	r2, [pc, #164]	@ (8004b74 <ai_array_to_buffer_fmt+0xc4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d008      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004ad2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004ada:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <ai_array_to_buffer_fmt+0xc8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bf0c      	ite	eq
 8004ae0:	4613      	moveq	r3, r2
 8004ae2:	2340      	movne	r3, #64	@ 0x40
 8004ae4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004ae8:	4318      	orrs	r0, r3
 8004aea:	4770      	bx	lr
 8004aec:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d0f7      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004af4:	dd2a      	ble.n	8004b4c <ai_array_to_buffer_fmt+0x9c>
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <ai_array_to_buffer_fmt+0xcc>)
 8004af8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bf0c      	ite	eq
 8004b00:	4613      	moveq	r3, r2
 8004b02:	2340      	movne	r3, #64	@ 0x40
 8004b04:	4318      	orrs	r0, r3
 8004b06:	4770      	bx	lr
 8004b08:	4a1d      	ldr	r2, [pc, #116]	@ (8004b80 <ai_array_to_buffer_fmt+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d0ea      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b0e:	dd0f      	ble.n	8004b30 <ai_array_to_buffer_fmt+0x80>
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <ai_array_to_buffer_fmt+0xd4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d0e6      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b16:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d0e2      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b88 <ai_array_to_buffer_fmt+0xd8>)
 8004b20:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf0c      	ite	eq
 8004b28:	4613      	moveq	r3, r2
 8004b2a:	2340      	movne	r3, #64	@ 0x40
 8004b2c:	4318      	orrs	r0, r3
 8004b2e:	4770      	bx	lr
 8004b30:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d0d5      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b38:	3207      	adds	r2, #7
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d0d2      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b3e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bf0c      	ite	eq
 8004b46:	4613      	moveq	r3, r2
 8004b48:	2340      	movne	r3, #64	@ 0x40
 8004b4a:	e7cb      	b.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b4c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d0c7      	beq.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b54:	3280      	adds	r2, #128	@ 0x80
 8004b56:	4293      	cmp	r3, r2
 8004b58:	bf0c      	ite	eq
 8004b5a:	4613      	moveq	r3, r2
 8004b5c:	2340      	movne	r3, #64	@ 0x40
 8004b5e:	e7c1      	b.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <ai_array_to_buffer_fmt+0xdc>)
 8004b62:	4003      	ands	r3, r0
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b68:	e7bc      	b.n	8004ae4 <ai_array_to_buffer_fmt+0x34>
 8004b6a:	bf00      	nop
 8004b6c:	00840040 	.word	0x00840040
 8004b70:	00040840 	.word	0x00040840
 8004b74:	00041040 	.word	0x00041040
 8004b78:	0004084f 	.word	0x0004084f
 8004b7c:	00040447 	.word	0x00040447
 8004b80:	00840840 	.word	0x00840840
 8004b84:	00841040 	.word	0x00841040
 8004b88:	0084084f 	.word	0x0084084f
 8004b8c:	00803fff 	.word	0x00803fff

08004b90 <ai_array_get_data_byte_size>:
 8004b90:	b169      	cbz	r1, 8004bae <ai_array_get_data_byte_size+0x1e>
 8004b92:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004b96:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8004b9a:	fb03 f101 	mul.w	r1, r3, r1
 8004b9e:	1dcb      	adds	r3, r1, #7
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	fa23 f000 	lsr.w	r0, r3, r0
 8004ba8:	3007      	adds	r0, #7
 8004baa:	08c0      	lsrs	r0, r0, #3
 8004bac:	4770      	bx	lr
 8004bae:	4608      	mov	r0, r1
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <ai_version_get>:
 8004bb4:	0212      	lsls	r2, r2, #8
 8004bb6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004bba:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004bbe:	4770      	bx	lr

08004bc0 <ai_platform_version_get>:
 8004bc0:	0e01      	lsrs	r1, r0, #24
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8004bc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004bcc:	f361 0307 	bfi	r3, r1, #0, #8
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	f362 230f 	bfi	r3, r2, #8, #8
 8004bd6:	f360 4317 	bfi	r3, r0, #16, #8
 8004bda:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8004bde:	b002      	add	sp, #8
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <get_tensor_byte_size>:
 8004be4:	b430      	push	{r4, r5}
 8004be6:	6985      	ldr	r5, [r0, #24]
 8004be8:	68c4      	ldr	r4, [r0, #12]
 8004bea:	6941      	ldr	r1, [r0, #20]
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <get_tensor_byte_size+0x24>)
 8004bee:	6828      	ldr	r0, [r5, #0]
 8004bf0:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <get_tensor_byte_size+0x28>)
 8004bf2:	4003      	ands	r3, r0
 8004bf4:	68c9      	ldr	r1, [r1, #12]
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	fb01 f000 	mul.w	r0, r1, r0
 8004bfe:	d101      	bne.n	8004c04 <get_tensor_byte_size+0x20>
 8004c00:	3007      	adds	r0, #7
 8004c02:	08c0      	lsrs	r0, r0, #3
 8004c04:	bc30      	pop	{r4, r5}
 8004c06:	4770      	bx	lr
 8004c08:	017fffff 	.word	0x017fffff
 8004c0c:	000400c0 	.word	0x000400c0

08004c10 <__cvt>:
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c12:	ed2d 8b02 	vpush	{d8}
 8004c16:	eeb0 8b40 	vmov.f64	d8, d0
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	4617      	mov	r7, r2
 8004c1e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004c20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c22:	ee18 2a90 	vmov	r2, s17
 8004c26:	f025 0520 	bic.w	r5, r5, #32
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	bfb6      	itet	lt
 8004c2e:	222d      	movlt	r2, #45	@ 0x2d
 8004c30:	2200      	movge	r2, #0
 8004c32:	eeb1 8b40 	vneglt.f64	d8, d0
 8004c36:	2d46      	cmp	r5, #70	@ 0x46
 8004c38:	460c      	mov	r4, r1
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	d004      	beq.n	8004c48 <__cvt+0x38>
 8004c3e:	2d45      	cmp	r5, #69	@ 0x45
 8004c40:	d100      	bne.n	8004c44 <__cvt+0x34>
 8004c42:	3401      	adds	r4, #1
 8004c44:	2102      	movs	r1, #2
 8004c46:	e000      	b.n	8004c4a <__cvt+0x3a>
 8004c48:	2103      	movs	r1, #3
 8004c4a:	ab03      	add	r3, sp, #12
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	ab02      	add	r3, sp, #8
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4622      	mov	r2, r4
 8004c54:	4633      	mov	r3, r6
 8004c56:	eeb0 0b48 	vmov.f64	d0, d8
 8004c5a:	f000 ff81 	bl	8005b60 <_dtoa_r>
 8004c5e:	2d47      	cmp	r5, #71	@ 0x47
 8004c60:	d114      	bne.n	8004c8c <__cvt+0x7c>
 8004c62:	07fb      	lsls	r3, r7, #31
 8004c64:	d50a      	bpl.n	8004c7c <__cvt+0x6c>
 8004c66:	1902      	adds	r2, r0, r4
 8004c68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	bf08      	it	eq
 8004c72:	9203      	streq	r2, [sp, #12]
 8004c74:	2130      	movs	r1, #48	@ 0x30
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d319      	bcc.n	8004cb0 <__cvt+0xa0>
 8004c7c:	9b03      	ldr	r3, [sp, #12]
 8004c7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c80:	1a1b      	subs	r3, r3, r0
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	b005      	add	sp, #20
 8004c86:	ecbd 8b02 	vpop	{d8}
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8c:	2d46      	cmp	r5, #70	@ 0x46
 8004c8e:	eb00 0204 	add.w	r2, r0, r4
 8004c92:	d1e9      	bne.n	8004c68 <__cvt+0x58>
 8004c94:	7803      	ldrb	r3, [r0, #0]
 8004c96:	2b30      	cmp	r3, #48	@ 0x30
 8004c98:	d107      	bne.n	8004caa <__cvt+0x9a>
 8004c9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	bf1c      	itt	ne
 8004ca4:	f1c4 0401 	rsbne	r4, r4, #1
 8004ca8:	6034      	strne	r4, [r6, #0]
 8004caa:	6833      	ldr	r3, [r6, #0]
 8004cac:	441a      	add	r2, r3
 8004cae:	e7db      	b.n	8004c68 <__cvt+0x58>
 8004cb0:	1c5c      	adds	r4, r3, #1
 8004cb2:	9403      	str	r4, [sp, #12]
 8004cb4:	7019      	strb	r1, [r3, #0]
 8004cb6:	e7de      	b.n	8004c76 <__cvt+0x66>

08004cb8 <__exponent>:
 8004cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	bfba      	itte	lt
 8004cbe:	4249      	neglt	r1, r1
 8004cc0:	232d      	movlt	r3, #45	@ 0x2d
 8004cc2:	232b      	movge	r3, #43	@ 0x2b
 8004cc4:	2909      	cmp	r1, #9
 8004cc6:	7002      	strb	r2, [r0, #0]
 8004cc8:	7043      	strb	r3, [r0, #1]
 8004cca:	dd29      	ble.n	8004d20 <__exponent+0x68>
 8004ccc:	f10d 0307 	add.w	r3, sp, #7
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	270a      	movs	r7, #10
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cda:	fb07 1416 	mls	r4, r7, r6, r1
 8004cde:	3430      	adds	r4, #48	@ 0x30
 8004ce0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	2c63      	cmp	r4, #99	@ 0x63
 8004ce8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004cec:	4631      	mov	r1, r6
 8004cee:	dcf1      	bgt.n	8004cd4 <__exponent+0x1c>
 8004cf0:	3130      	adds	r1, #48	@ 0x30
 8004cf2:	1e94      	subs	r4, r2, #2
 8004cf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004cf8:	1c41      	adds	r1, r0, #1
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	42ab      	cmp	r3, r5
 8004cfe:	d30a      	bcc.n	8004d16 <__exponent+0x5e>
 8004d00:	f10d 0309 	add.w	r3, sp, #9
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	42ac      	cmp	r4, r5
 8004d08:	bf88      	it	hi
 8004d0a:	2300      	movhi	r3, #0
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	4403      	add	r3, r0
 8004d10:	1a18      	subs	r0, r3, r0
 8004d12:	b003      	add	sp, #12
 8004d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d1e:	e7ed      	b.n	8004cfc <__exponent+0x44>
 8004d20:	2330      	movs	r3, #48	@ 0x30
 8004d22:	3130      	adds	r1, #48	@ 0x30
 8004d24:	7083      	strb	r3, [r0, #2]
 8004d26:	70c1      	strb	r1, [r0, #3]
 8004d28:	1d03      	adds	r3, r0, #4
 8004d2a:	e7f1      	b.n	8004d10 <__exponent+0x58>
 8004d2c:	0000      	movs	r0, r0
	...

08004d30 <_printf_float>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	b08d      	sub	sp, #52	@ 0x34
 8004d36:	460c      	mov	r4, r1
 8004d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	461f      	mov	r7, r3
 8004d40:	4605      	mov	r5, r0
 8004d42:	f000 fe17 	bl	8005974 <_localeconv_r>
 8004d46:	f8d0 b000 	ldr.w	fp, [r0]
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	f7fb fac8 	bl	80002e0 <strlen>
 8004d50:	2300      	movs	r3, #0
 8004d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d54:	f8d8 3000 	ldr.w	r3, [r8]
 8004d58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	9005      	str	r0, [sp, #20]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	f103 0108 	add.w	r1, r3, #8
 8004d6a:	f8c8 1000 	str.w	r1, [r8]
 8004d6e:	ed93 0b00 	vldr	d0, [r3]
 8004d72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004fd0 <_printf_float+0x2a0>
 8004d76:	eeb0 7bc0 	vabs.f64	d7, d0
 8004d7a:	eeb4 7b46 	vcmp.f64	d7, d6
 8004d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004d86:	dd24      	ble.n	8004dd2 <_printf_float+0xa2>
 8004d88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d502      	bpl.n	8004d98 <_printf_float+0x68>
 8004d92:	232d      	movs	r3, #45	@ 0x2d
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d98:	498f      	ldr	r1, [pc, #572]	@ (8004fd8 <_printf_float+0x2a8>)
 8004d9a:	4b90      	ldr	r3, [pc, #576]	@ (8004fdc <_printf_float+0x2ac>)
 8004d9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004da0:	bf94      	ite	ls
 8004da2:	4688      	movls	r8, r1
 8004da4:	4698      	movhi	r8, r3
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	2303      	movs	r3, #3
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	6022      	str	r2, [r4, #0]
 8004db0:	f04f 0a00 	mov.w	sl, #0
 8004db4:	9700      	str	r7, [sp, #0]
 8004db6:	4633      	mov	r3, r6
 8004db8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 fa7b 	bl	80052b8 <_printf_common>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f040 8089 	bne.w	8004eda <_printf_float+0x1aa>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dcc:	b00d      	add	sp, #52	@ 0x34
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	eeb4 0b40 	vcmp.f64	d0, d0
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	d709      	bvc.n	8004df0 <_printf_float+0xc0>
 8004ddc:	ee10 3a90 	vmov	r3, s1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bfbc      	itt	lt
 8004de4:	232d      	movlt	r3, #45	@ 0x2d
 8004de6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004dea:	497d      	ldr	r1, [pc, #500]	@ (8004fe0 <_printf_float+0x2b0>)
 8004dec:	4b7d      	ldr	r3, [pc, #500]	@ (8004fe4 <_printf_float+0x2b4>)
 8004dee:	e7d5      	b.n	8004d9c <_printf_float+0x6c>
 8004df0:	6863      	ldr	r3, [r4, #4]
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004df8:	d139      	bne.n	8004e6e <_printf_float+0x13e>
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e02:	2300      	movs	r3, #0
 8004e04:	6022      	str	r2, [r4, #0]
 8004e06:	9303      	str	r3, [sp, #12]
 8004e08:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004e0e:	ab09      	add	r3, sp, #36	@ 0x24
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	6861      	ldr	r1, [r4, #4]
 8004e14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f7ff fef9 	bl	8004c10 <__cvt>
 8004e1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e24:	4680      	mov	r8, r0
 8004e26:	d129      	bne.n	8004e7c <_printf_float+0x14c>
 8004e28:	1cc8      	adds	r0, r1, #3
 8004e2a:	db02      	blt.n	8004e32 <_printf_float+0x102>
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	dd41      	ble.n	8004eb6 <_printf_float+0x186>
 8004e32:	f1a9 0902 	sub.w	r9, r9, #2
 8004e36:	fa5f f989 	uxtb.w	r9, r9
 8004e3a:	3901      	subs	r1, #1
 8004e3c:	464a      	mov	r2, r9
 8004e3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e44:	f7ff ff38 	bl	8004cb8 <__exponent>
 8004e48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e4a:	1813      	adds	r3, r2, r0
 8004e4c:	2a01      	cmp	r2, #1
 8004e4e:	4682      	mov	sl, r0
 8004e50:	6123      	str	r3, [r4, #16]
 8004e52:	dc02      	bgt.n	8004e5a <_printf_float+0x12a>
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	07d2      	lsls	r2, r2, #31
 8004e58:	d501      	bpl.n	8004e5e <_printf_float+0x12e>
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0a6      	beq.n	8004db4 <_printf_float+0x84>
 8004e66:	232d      	movs	r3, #45	@ 0x2d
 8004e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e6c:	e7a2      	b.n	8004db4 <_printf_float+0x84>
 8004e6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e72:	d1c4      	bne.n	8004dfe <_printf_float+0xce>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1c2      	bne.n	8004dfe <_printf_float+0xce>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7bf      	b.n	8004dfc <_printf_float+0xcc>
 8004e7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004e80:	d9db      	bls.n	8004e3a <_printf_float+0x10a>
 8004e82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004e86:	d118      	bne.n	8004eba <_printf_float+0x18a>
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	6863      	ldr	r3, [r4, #4]
 8004e8c:	dd0b      	ble.n	8004ea6 <_printf_float+0x176>
 8004e8e:	6121      	str	r1, [r4, #16]
 8004e90:	b913      	cbnz	r3, 8004e98 <_printf_float+0x168>
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	07d0      	lsls	r0, r2, #31
 8004e96:	d502      	bpl.n	8004e9e <_printf_float+0x16e>
 8004e98:	3301      	adds	r3, #1
 8004e9a:	440b      	add	r3, r1
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ea0:	f04f 0a00 	mov.w	sl, #0
 8004ea4:	e7db      	b.n	8004e5e <_printf_float+0x12e>
 8004ea6:	b913      	cbnz	r3, 8004eae <_printf_float+0x17e>
 8004ea8:	6822      	ldr	r2, [r4, #0]
 8004eaa:	07d2      	lsls	r2, r2, #31
 8004eac:	d501      	bpl.n	8004eb2 <_printf_float+0x182>
 8004eae:	3302      	adds	r3, #2
 8004eb0:	e7f4      	b.n	8004e9c <_printf_float+0x16c>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e7f2      	b.n	8004e9c <_printf_float+0x16c>
 8004eb6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	db05      	blt.n	8004ecc <_printf_float+0x19c>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	6121      	str	r1, [r4, #16]
 8004ec4:	07d8      	lsls	r0, r3, #31
 8004ec6:	d5ea      	bpl.n	8004e9e <_printf_float+0x16e>
 8004ec8:	1c4b      	adds	r3, r1, #1
 8004eca:	e7e7      	b.n	8004e9c <_printf_float+0x16c>
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	bfd4      	ite	le
 8004ed0:	f1c1 0202 	rsble	r2, r1, #2
 8004ed4:	2201      	movgt	r2, #1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	e7e0      	b.n	8004e9c <_printf_float+0x16c>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	055a      	lsls	r2, r3, #21
 8004ede:	d407      	bmi.n	8004ef0 <_printf_float+0x1c0>
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b8      	blx	r7
 8004eea:	3001      	adds	r0, #1
 8004eec:	d12a      	bne.n	8004f44 <_printf_float+0x214>
 8004eee:	e76b      	b.n	8004dc8 <_printf_float+0x98>
 8004ef0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004ef4:	f240 80e0 	bls.w	80050b8 <_printf_float+0x388>
 8004ef8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004efc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f04:	d133      	bne.n	8004f6e <_printf_float+0x23e>
 8004f06:	4a38      	ldr	r2, [pc, #224]	@ (8004fe8 <_printf_float+0x2b8>)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f af59 	beq.w	8004dc8 <_printf_float+0x98>
 8004f16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f1a:	4543      	cmp	r3, r8
 8004f1c:	db02      	blt.n	8004f24 <_printf_float+0x1f4>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	07d8      	lsls	r0, r3, #31
 8004f22:	d50f      	bpl.n	8004f44 <_printf_float+0x214>
 8004f24:	9b05      	ldr	r3, [sp, #20]
 8004f26:	465a      	mov	r2, fp
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f af4a 	beq.w	8004dc8 <_printf_float+0x98>
 8004f34:	f04f 0900 	mov.w	r9, #0
 8004f38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004f3c:	f104 0a1a 	add.w	sl, r4, #26
 8004f40:	45c8      	cmp	r8, r9
 8004f42:	dc09      	bgt.n	8004f58 <_printf_float+0x228>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	079b      	lsls	r3, r3, #30
 8004f48:	f100 8107 	bmi.w	800515a <_printf_float+0x42a>
 8004f4c:	68e0      	ldr	r0, [r4, #12]
 8004f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f50:	4298      	cmp	r0, r3
 8004f52:	bfb8      	it	lt
 8004f54:	4618      	movlt	r0, r3
 8004f56:	e739      	b.n	8004dcc <_printf_float+0x9c>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	f43f af30 	beq.w	8004dc8 <_printf_float+0x98>
 8004f68:	f109 0901 	add.w	r9, r9, #1
 8004f6c:	e7e8      	b.n	8004f40 <_printf_float+0x210>
 8004f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dc3b      	bgt.n	8004fec <_printf_float+0x2bc>
 8004f74:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe8 <_printf_float+0x2b8>)
 8004f76:	2301      	movs	r3, #1
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f af22 	beq.w	8004dc8 <_printf_float+0x98>
 8004f84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f88:	ea59 0303 	orrs.w	r3, r9, r3
 8004f8c:	d102      	bne.n	8004f94 <_printf_float+0x264>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	07d9      	lsls	r1, r3, #31
 8004f92:	d5d7      	bpl.n	8004f44 <_printf_float+0x214>
 8004f94:	9b05      	ldr	r3, [sp, #20]
 8004f96:	465a      	mov	r2, fp
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f43f af12 	beq.w	8004dc8 <_printf_float+0x98>
 8004fa4:	f04f 0a00 	mov.w	sl, #0
 8004fa8:	f104 0b1a 	add.w	fp, r4, #26
 8004fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fae:	425b      	negs	r3, r3
 8004fb0:	4553      	cmp	r3, sl
 8004fb2:	dc01      	bgt.n	8004fb8 <_printf_float+0x288>
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	e794      	b.n	8004ee2 <_printf_float+0x1b2>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	465a      	mov	r2, fp
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f af00 	beq.w	8004dc8 <_printf_float+0x98>
 8004fc8:	f10a 0a01 	add.w	sl, sl, #1
 8004fcc:	e7ee      	b.n	8004fac <_printf_float+0x27c>
 8004fce:	bf00      	nop
 8004fd0:	ffffffff 	.word	0xffffffff
 8004fd4:	7fefffff 	.word	0x7fefffff
 8004fd8:	08035e98 	.word	0x08035e98
 8004fdc:	08035e9c 	.word	0x08035e9c
 8004fe0:	08035ea0 	.word	0x08035ea0
 8004fe4:	08035ea4 	.word	0x08035ea4
 8004fe8:	0801ac1f 	.word	0x0801ac1f
 8004fec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ff2:	4553      	cmp	r3, sl
 8004ff4:	bfa8      	it	ge
 8004ff6:	4653      	movge	r3, sl
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	4699      	mov	r9, r3
 8004ffc:	dc37      	bgt.n	800506e <_printf_float+0x33e>
 8004ffe:	2300      	movs	r3, #0
 8005000:	9307      	str	r3, [sp, #28]
 8005002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005006:	f104 021a 	add.w	r2, r4, #26
 800500a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800500c:	9907      	ldr	r1, [sp, #28]
 800500e:	9306      	str	r3, [sp, #24]
 8005010:	eba3 0309 	sub.w	r3, r3, r9
 8005014:	428b      	cmp	r3, r1
 8005016:	dc31      	bgt.n	800507c <_printf_float+0x34c>
 8005018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501a:	459a      	cmp	sl, r3
 800501c:	dc3b      	bgt.n	8005096 <_printf_float+0x366>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	07da      	lsls	r2, r3, #31
 8005022:	d438      	bmi.n	8005096 <_printf_float+0x366>
 8005024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005026:	ebaa 0903 	sub.w	r9, sl, r3
 800502a:	9b06      	ldr	r3, [sp, #24]
 800502c:	ebaa 0303 	sub.w	r3, sl, r3
 8005030:	4599      	cmp	r9, r3
 8005032:	bfa8      	it	ge
 8005034:	4699      	movge	r9, r3
 8005036:	f1b9 0f00 	cmp.w	r9, #0
 800503a:	dc34      	bgt.n	80050a6 <_printf_float+0x376>
 800503c:	f04f 0800 	mov.w	r8, #0
 8005040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005044:	f104 0b1a 	add.w	fp, r4, #26
 8005048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504a:	ebaa 0303 	sub.w	r3, sl, r3
 800504e:	eba3 0309 	sub.w	r3, r3, r9
 8005052:	4543      	cmp	r3, r8
 8005054:	f77f af76 	ble.w	8004f44 <_printf_float+0x214>
 8005058:	2301      	movs	r3, #1
 800505a:	465a      	mov	r2, fp
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f aeb0 	beq.w	8004dc8 <_printf_float+0x98>
 8005068:	f108 0801 	add.w	r8, r8, #1
 800506c:	e7ec      	b.n	8005048 <_printf_float+0x318>
 800506e:	4642      	mov	r2, r8
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	d1c1      	bne.n	8004ffe <_printf_float+0x2ce>
 800507a:	e6a5      	b.n	8004dc8 <_printf_float+0x98>
 800507c:	2301      	movs	r3, #1
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	9206      	str	r2, [sp, #24]
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f ae9e 	beq.w	8004dc8 <_printf_float+0x98>
 800508c:	9b07      	ldr	r3, [sp, #28]
 800508e:	9a06      	ldr	r2, [sp, #24]
 8005090:	3301      	adds	r3, #1
 8005092:	9307      	str	r3, [sp, #28]
 8005094:	e7b9      	b.n	800500a <_printf_float+0x2da>
 8005096:	9b05      	ldr	r3, [sp, #20]
 8005098:	465a      	mov	r2, fp
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	d1bf      	bne.n	8005024 <_printf_float+0x2f4>
 80050a4:	e690      	b.n	8004dc8 <_printf_float+0x98>
 80050a6:	9a06      	ldr	r2, [sp, #24]
 80050a8:	464b      	mov	r3, r9
 80050aa:	4442      	add	r2, r8
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	d1c2      	bne.n	800503c <_printf_float+0x30c>
 80050b6:	e687      	b.n	8004dc8 <_printf_float+0x98>
 80050b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80050bc:	f1b9 0f01 	cmp.w	r9, #1
 80050c0:	dc01      	bgt.n	80050c6 <_printf_float+0x396>
 80050c2:	07db      	lsls	r3, r3, #31
 80050c4:	d536      	bpl.n	8005134 <_printf_float+0x404>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4642      	mov	r2, r8
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	f43f ae79 	beq.w	8004dc8 <_printf_float+0x98>
 80050d6:	9b05      	ldr	r3, [sp, #20]
 80050d8:	465a      	mov	r2, fp
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f ae71 	beq.w	8004dc8 <_printf_float+0x98>
 80050e6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80050ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80050ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80050f6:	d018      	beq.n	800512a <_printf_float+0x3fa>
 80050f8:	464b      	mov	r3, r9
 80050fa:	f108 0201 	add.w	r2, r8, #1
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	47b8      	blx	r7
 8005104:	3001      	adds	r0, #1
 8005106:	d10c      	bne.n	8005122 <_printf_float+0x3f2>
 8005108:	e65e      	b.n	8004dc8 <_printf_float+0x98>
 800510a:	2301      	movs	r3, #1
 800510c:	465a      	mov	r2, fp
 800510e:	4631      	mov	r1, r6
 8005110:	4628      	mov	r0, r5
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	f43f ae57 	beq.w	8004dc8 <_printf_float+0x98>
 800511a:	f108 0801 	add.w	r8, r8, #1
 800511e:	45c8      	cmp	r8, r9
 8005120:	dbf3      	blt.n	800510a <_printf_float+0x3da>
 8005122:	4653      	mov	r3, sl
 8005124:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005128:	e6dc      	b.n	8004ee4 <_printf_float+0x1b4>
 800512a:	f04f 0800 	mov.w	r8, #0
 800512e:	f104 0b1a 	add.w	fp, r4, #26
 8005132:	e7f4      	b.n	800511e <_printf_float+0x3ee>
 8005134:	2301      	movs	r3, #1
 8005136:	4642      	mov	r2, r8
 8005138:	e7e1      	b.n	80050fe <_printf_float+0x3ce>
 800513a:	2301      	movs	r3, #1
 800513c:	464a      	mov	r2, r9
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	f43f ae3f 	beq.w	8004dc8 <_printf_float+0x98>
 800514a:	f108 0801 	add.w	r8, r8, #1
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005152:	1a5b      	subs	r3, r3, r1
 8005154:	4543      	cmp	r3, r8
 8005156:	dcf0      	bgt.n	800513a <_printf_float+0x40a>
 8005158:	e6f8      	b.n	8004f4c <_printf_float+0x21c>
 800515a:	f04f 0800 	mov.w	r8, #0
 800515e:	f104 0919 	add.w	r9, r4, #25
 8005162:	e7f4      	b.n	800514e <_printf_float+0x41e>

08005164 <malloc>:
 8005164:	4b02      	ldr	r3, [pc, #8]	@ (8005170 <malloc+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f000 b825 	b.w	80051b8 <_malloc_r>
 800516e:	bf00      	nop
 8005170:	200014f8 	.word	0x200014f8

08005174 <sbrk_aligned>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4e0f      	ldr	r6, [pc, #60]	@ (80051b4 <sbrk_aligned+0x40>)
 8005178:	460c      	mov	r4, r1
 800517a:	6831      	ldr	r1, [r6, #0]
 800517c:	4605      	mov	r5, r0
 800517e:	b911      	cbnz	r1, 8005186 <sbrk_aligned+0x12>
 8005180:	f000 fbfc 	bl	800597c <_sbrk_r>
 8005184:	6030      	str	r0, [r6, #0]
 8005186:	4621      	mov	r1, r4
 8005188:	4628      	mov	r0, r5
 800518a:	f000 fbf7 	bl	800597c <_sbrk_r>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	d103      	bne.n	800519a <sbrk_aligned+0x26>
 8005192:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005196:	4620      	mov	r0, r4
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	1cc4      	adds	r4, r0, #3
 800519c:	f024 0403 	bic.w	r4, r4, #3
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d0f8      	beq.n	8005196 <sbrk_aligned+0x22>
 80051a4:	1a21      	subs	r1, r4, r0
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 fbe8 	bl	800597c <_sbrk_r>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d1f2      	bne.n	8005196 <sbrk_aligned+0x22>
 80051b0:	e7ef      	b.n	8005192 <sbrk_aligned+0x1e>
 80051b2:	bf00      	nop
 80051b4:	20001d80 	.word	0x20001d80

080051b8 <_malloc_r>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	1ccd      	adds	r5, r1, #3
 80051be:	f025 0503 	bic.w	r5, r5, #3
 80051c2:	3508      	adds	r5, #8
 80051c4:	2d0c      	cmp	r5, #12
 80051c6:	bf38      	it	cc
 80051c8:	250c      	movcc	r5, #12
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	4606      	mov	r6, r0
 80051ce:	db01      	blt.n	80051d4 <_malloc_r+0x1c>
 80051d0:	42a9      	cmp	r1, r5
 80051d2:	d904      	bls.n	80051de <_malloc_r+0x26>
 80051d4:	230c      	movs	r3, #12
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	2000      	movs	r0, #0
 80051da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052b4 <_malloc_r+0xfc>
 80051e2:	f000 faa3 	bl	800572c <__malloc_lock>
 80051e6:	f8d8 3000 	ldr.w	r3, [r8]
 80051ea:	461c      	mov	r4, r3
 80051ec:	bb44      	cbnz	r4, 8005240 <_malloc_r+0x88>
 80051ee:	4629      	mov	r1, r5
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff ffbf 	bl	8005174 <sbrk_aligned>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	4604      	mov	r4, r0
 80051fa:	d158      	bne.n	80052ae <_malloc_r+0xf6>
 80051fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005200:	4627      	mov	r7, r4
 8005202:	2f00      	cmp	r7, #0
 8005204:	d143      	bne.n	800528e <_malloc_r+0xd6>
 8005206:	2c00      	cmp	r4, #0
 8005208:	d04b      	beq.n	80052a2 <_malloc_r+0xea>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	4639      	mov	r1, r7
 800520e:	4630      	mov	r0, r6
 8005210:	eb04 0903 	add.w	r9, r4, r3
 8005214:	f000 fbb2 	bl	800597c <_sbrk_r>
 8005218:	4581      	cmp	r9, r0
 800521a:	d142      	bne.n	80052a2 <_malloc_r+0xea>
 800521c:	6821      	ldr	r1, [r4, #0]
 800521e:	1a6d      	subs	r5, r5, r1
 8005220:	4629      	mov	r1, r5
 8005222:	4630      	mov	r0, r6
 8005224:	f7ff ffa6 	bl	8005174 <sbrk_aligned>
 8005228:	3001      	adds	r0, #1
 800522a:	d03a      	beq.n	80052a2 <_malloc_r+0xea>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	442b      	add	r3, r5
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	f8d8 3000 	ldr.w	r3, [r8]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	bb62      	cbnz	r2, 8005294 <_malloc_r+0xdc>
 800523a:	f8c8 7000 	str.w	r7, [r8]
 800523e:	e00f      	b.n	8005260 <_malloc_r+0xa8>
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	1b52      	subs	r2, r2, r5
 8005244:	d420      	bmi.n	8005288 <_malloc_r+0xd0>
 8005246:	2a0b      	cmp	r2, #11
 8005248:	d917      	bls.n	800527a <_malloc_r+0xc2>
 800524a:	1961      	adds	r1, r4, r5
 800524c:	42a3      	cmp	r3, r4
 800524e:	6025      	str	r5, [r4, #0]
 8005250:	bf18      	it	ne
 8005252:	6059      	strne	r1, [r3, #4]
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	bf08      	it	eq
 8005258:	f8c8 1000 	streq.w	r1, [r8]
 800525c:	5162      	str	r2, [r4, r5]
 800525e:	604b      	str	r3, [r1, #4]
 8005260:	4630      	mov	r0, r6
 8005262:	f000 fa69 	bl	8005738 <__malloc_unlock>
 8005266:	f104 000b 	add.w	r0, r4, #11
 800526a:	1d23      	adds	r3, r4, #4
 800526c:	f020 0007 	bic.w	r0, r0, #7
 8005270:	1ac2      	subs	r2, r0, r3
 8005272:	bf1c      	itt	ne
 8005274:	1a1b      	subne	r3, r3, r0
 8005276:	50a3      	strne	r3, [r4, r2]
 8005278:	e7af      	b.n	80051da <_malloc_r+0x22>
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	42a3      	cmp	r3, r4
 800527e:	bf0c      	ite	eq
 8005280:	f8c8 2000 	streq.w	r2, [r8]
 8005284:	605a      	strne	r2, [r3, #4]
 8005286:	e7eb      	b.n	8005260 <_malloc_r+0xa8>
 8005288:	4623      	mov	r3, r4
 800528a:	6864      	ldr	r4, [r4, #4]
 800528c:	e7ae      	b.n	80051ec <_malloc_r+0x34>
 800528e:	463c      	mov	r4, r7
 8005290:	687f      	ldr	r7, [r7, #4]
 8005292:	e7b6      	b.n	8005202 <_malloc_r+0x4a>
 8005294:	461a      	mov	r2, r3
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	42a3      	cmp	r3, r4
 800529a:	d1fb      	bne.n	8005294 <_malloc_r+0xdc>
 800529c:	2300      	movs	r3, #0
 800529e:	6053      	str	r3, [r2, #4]
 80052a0:	e7de      	b.n	8005260 <_malloc_r+0xa8>
 80052a2:	230c      	movs	r3, #12
 80052a4:	6033      	str	r3, [r6, #0]
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 fa46 	bl	8005738 <__malloc_unlock>
 80052ac:	e794      	b.n	80051d8 <_malloc_r+0x20>
 80052ae:	6005      	str	r5, [r0, #0]
 80052b0:	e7d6      	b.n	8005260 <_malloc_r+0xa8>
 80052b2:	bf00      	nop
 80052b4:	20001d84 	.word	0x20001d84

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4698      	mov	r8, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfb8      	it	lt
 80052cc:	4613      	movlt	r3, r2
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052d4:	4607      	mov	r7, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc26      	bgt.n	800534e <_printf_common+0x96>
 8005300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	3b00      	subs	r3, #0
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42b      	bmi.n	8005368 <_printf_common+0xb0>
 8005310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005314:	4641      	mov	r1, r8
 8005316:	4638      	mov	r0, r7
 8005318:	47c8      	blx	r9
 800531a:	3001      	adds	r0, #1
 800531c:	d01e      	beq.n	800535c <_printf_common+0xa4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	f003 0306 	and.w	r3, r3, #6
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf02      	ittt	eq
 800532a:	68e5      	ldreq	r5, [r4, #12]
 800532c:	6833      	ldreq	r3, [r6, #0]
 800532e:	1aed      	subeq	r5, r5, r3
 8005330:	68a3      	ldr	r3, [r4, #8]
 8005332:	bf0c      	ite	eq
 8005334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005338:	2500      	movne	r5, #0
 800533a:	4293      	cmp	r3, r2
 800533c:	bfc4      	itt	gt
 800533e:	1a9b      	subgt	r3, r3, r2
 8005340:	18ed      	addgt	r5, r5, r3
 8005342:	2600      	movs	r6, #0
 8005344:	341a      	adds	r4, #26
 8005346:	42b5      	cmp	r5, r6
 8005348:	d11a      	bne.n	8005380 <_printf_common+0xc8>
 800534a:	2000      	movs	r0, #0
 800534c:	e008      	b.n	8005360 <_printf_common+0xa8>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4641      	mov	r1, r8
 8005354:	4638      	mov	r0, r7
 8005356:	47c8      	blx	r9
 8005358:	3001      	adds	r0, #1
 800535a:	d103      	bne.n	8005364 <_printf_common+0xac>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	3501      	adds	r5, #1
 8005366:	e7c6      	b.n	80052f6 <_printf_common+0x3e>
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	2030      	movs	r0, #48	@ 0x30
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005372:	4422      	add	r2, r4
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800537c:	3302      	adds	r3, #2
 800537e:	e7c7      	b.n	8005310 <_printf_common+0x58>
 8005380:	2301      	movs	r3, #1
 8005382:	4622      	mov	r2, r4
 8005384:	4641      	mov	r1, r8
 8005386:	4638      	mov	r0, r7
 8005388:	47c8      	blx	r9
 800538a:	3001      	adds	r0, #1
 800538c:	d0e6      	beq.n	800535c <_printf_common+0xa4>
 800538e:	3601      	adds	r6, #1
 8005390:	e7d9      	b.n	8005346 <_printf_common+0x8e>
	...

08005394 <_printf_i>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	7e0f      	ldrb	r7, [r1, #24]
 800539a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800539c:	2f78      	cmp	r7, #120	@ 0x78
 800539e:	4691      	mov	r9, r2
 80053a0:	4680      	mov	r8, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	469a      	mov	sl, r3
 80053a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053aa:	d807      	bhi.n	80053bc <_printf_i+0x28>
 80053ac:	2f62      	cmp	r7, #98	@ 0x62
 80053ae:	d80a      	bhi.n	80053c6 <_printf_i+0x32>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	f000 80d2 	beq.w	800555a <_printf_i+0x1c6>
 80053b6:	2f58      	cmp	r7, #88	@ 0x58
 80053b8:	f000 80b9 	beq.w	800552e <_printf_i+0x19a>
 80053bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053c4:	e03a      	b.n	800543c <_printf_i+0xa8>
 80053c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ca:	2b15      	cmp	r3, #21
 80053cc:	d8f6      	bhi.n	80053bc <_printf_i+0x28>
 80053ce:	a101      	add	r1, pc, #4	@ (adr r1, 80053d4 <_printf_i+0x40>)
 80053d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080053bd 	.word	0x080053bd
 80053e0:	080053bd 	.word	0x080053bd
 80053e4:	080053bd 	.word	0x080053bd
 80053e8:	080053bd 	.word	0x080053bd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080053bd 	.word	0x080053bd
 80053f4:	080053bd 	.word	0x080053bd
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	080053bd 	.word	0x080053bd
 8005400:	08005541 	.word	0x08005541
 8005404:	0800546b 	.word	0x0800546b
 8005408:	080054fb 	.word	0x080054fb
 800540c:	080053bd 	.word	0x080053bd
 8005410:	080053bd 	.word	0x080053bd
 8005414:	08005563 	.word	0x08005563
 8005418:	080053bd 	.word	0x080053bd
 800541c:	0800546b 	.word	0x0800546b
 8005420:	080053bd 	.word	0x080053bd
 8005424:	080053bd 	.word	0x080053bd
 8005428:	08005503 	.word	0x08005503
 800542c:	6833      	ldr	r3, [r6, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6032      	str	r2, [r6, #0]
 8005434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800543c:	2301      	movs	r3, #1
 800543e:	e09d      	b.n	800557c <_printf_i+0x1e8>
 8005440:	6833      	ldr	r3, [r6, #0]
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	1d19      	adds	r1, r3, #4
 8005446:	6031      	str	r1, [r6, #0]
 8005448:	0606      	lsls	r6, r0, #24
 800544a:	d501      	bpl.n	8005450 <_printf_i+0xbc>
 800544c:	681d      	ldr	r5, [r3, #0]
 800544e:	e003      	b.n	8005458 <_printf_i+0xc4>
 8005450:	0645      	lsls	r5, r0, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0xb8>
 8005454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005458:	2d00      	cmp	r5, #0
 800545a:	da03      	bge.n	8005464 <_printf_i+0xd0>
 800545c:	232d      	movs	r3, #45	@ 0x2d
 800545e:	426d      	negs	r5, r5
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005464:	4859      	ldr	r0, [pc, #356]	@ (80055cc <_printf_i+0x238>)
 8005466:	230a      	movs	r3, #10
 8005468:	e011      	b.n	800548e <_printf_i+0xfa>
 800546a:	6821      	ldr	r1, [r4, #0]
 800546c:	6833      	ldr	r3, [r6, #0]
 800546e:	0608      	lsls	r0, r1, #24
 8005470:	f853 5b04 	ldr.w	r5, [r3], #4
 8005474:	d402      	bmi.n	800547c <_printf_i+0xe8>
 8005476:	0649      	lsls	r1, r1, #25
 8005478:	bf48      	it	mi
 800547a:	b2ad      	uxthmi	r5, r5
 800547c:	2f6f      	cmp	r7, #111	@ 0x6f
 800547e:	4853      	ldr	r0, [pc, #332]	@ (80055cc <_printf_i+0x238>)
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	bf14      	ite	ne
 8005484:	230a      	movne	r3, #10
 8005486:	2308      	moveq	r3, #8
 8005488:	2100      	movs	r1, #0
 800548a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800548e:	6866      	ldr	r6, [r4, #4]
 8005490:	60a6      	str	r6, [r4, #8]
 8005492:	2e00      	cmp	r6, #0
 8005494:	bfa2      	ittt	ge
 8005496:	6821      	ldrge	r1, [r4, #0]
 8005498:	f021 0104 	bicge.w	r1, r1, #4
 800549c:	6021      	strge	r1, [r4, #0]
 800549e:	b90d      	cbnz	r5, 80054a4 <_printf_i+0x110>
 80054a0:	2e00      	cmp	r6, #0
 80054a2:	d04b      	beq.n	800553c <_printf_i+0x1a8>
 80054a4:	4616      	mov	r6, r2
 80054a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80054aa:	fb03 5711 	mls	r7, r3, r1, r5
 80054ae:	5dc7      	ldrb	r7, [r0, r7]
 80054b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054b4:	462f      	mov	r7, r5
 80054b6:	42bb      	cmp	r3, r7
 80054b8:	460d      	mov	r5, r1
 80054ba:	d9f4      	bls.n	80054a6 <_printf_i+0x112>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10b      	bne.n	80054d8 <_printf_i+0x144>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	07df      	lsls	r7, r3, #31
 80054c4:	d508      	bpl.n	80054d8 <_printf_i+0x144>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	4299      	cmp	r1, r3
 80054cc:	bfde      	ittt	le
 80054ce:	2330      	movle	r3, #48	@ 0x30
 80054d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80054d8:	1b92      	subs	r2, r2, r6
 80054da:	6122      	str	r2, [r4, #16]
 80054dc:	f8cd a000 	str.w	sl, [sp]
 80054e0:	464b      	mov	r3, r9
 80054e2:	aa03      	add	r2, sp, #12
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fee6 	bl	80052b8 <_printf_common>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d14a      	bne.n	8005586 <_printf_i+0x1f2>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054f4:	b004      	add	sp, #16
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	4833      	ldr	r0, [pc, #204]	@ (80055d0 <_printf_i+0x23c>)
 8005504:	2778      	movs	r7, #120	@ 0x78
 8005506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	6831      	ldr	r1, [r6, #0]
 800550e:	061f      	lsls	r7, r3, #24
 8005510:	f851 5b04 	ldr.w	r5, [r1], #4
 8005514:	d402      	bmi.n	800551c <_printf_i+0x188>
 8005516:	065f      	lsls	r7, r3, #25
 8005518:	bf48      	it	mi
 800551a:	b2ad      	uxthmi	r5, r5
 800551c:	6031      	str	r1, [r6, #0]
 800551e:	07d9      	lsls	r1, r3, #31
 8005520:	bf44      	itt	mi
 8005522:	f043 0320 	orrmi.w	r3, r3, #32
 8005526:	6023      	strmi	r3, [r4, #0]
 8005528:	b11d      	cbz	r5, 8005532 <_printf_i+0x19e>
 800552a:	2310      	movs	r3, #16
 800552c:	e7ac      	b.n	8005488 <_printf_i+0xf4>
 800552e:	4827      	ldr	r0, [pc, #156]	@ (80055cc <_printf_i+0x238>)
 8005530:	e7e9      	b.n	8005506 <_printf_i+0x172>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f023 0320 	bic.w	r3, r3, #32
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	e7f6      	b.n	800552a <_printf_i+0x196>
 800553c:	4616      	mov	r6, r2
 800553e:	e7bd      	b.n	80054bc <_printf_i+0x128>
 8005540:	6833      	ldr	r3, [r6, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	1d18      	adds	r0, r3, #4
 8005548:	6030      	str	r0, [r6, #0]
 800554a:	062e      	lsls	r6, r5, #24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	d501      	bpl.n	8005554 <_printf_i+0x1c0>
 8005550:	6019      	str	r1, [r3, #0]
 8005552:	e002      	b.n	800555a <_printf_i+0x1c6>
 8005554:	0668      	lsls	r0, r5, #25
 8005556:	d5fb      	bpl.n	8005550 <_printf_i+0x1bc>
 8005558:	8019      	strh	r1, [r3, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	4616      	mov	r6, r2
 8005560:	e7bc      	b.n	80054dc <_printf_i+0x148>
 8005562:	6833      	ldr	r3, [r6, #0]
 8005564:	1d1a      	adds	r2, r3, #4
 8005566:	6032      	str	r2, [r6, #0]
 8005568:	681e      	ldr	r6, [r3, #0]
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	2100      	movs	r1, #0
 800556e:	4630      	mov	r0, r6
 8005570:	f7fa fe66 	bl	8000240 <memchr>
 8005574:	b108      	cbz	r0, 800557a <_printf_i+0x1e6>
 8005576:	1b80      	subs	r0, r0, r6
 8005578:	6060      	str	r0, [r4, #4]
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	2300      	movs	r3, #0
 8005580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005584:	e7aa      	b.n	80054dc <_printf_i+0x148>
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	4632      	mov	r2, r6
 800558a:	4649      	mov	r1, r9
 800558c:	4640      	mov	r0, r8
 800558e:	47d0      	blx	sl
 8005590:	3001      	adds	r0, #1
 8005592:	d0ad      	beq.n	80054f0 <_printf_i+0x15c>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	079b      	lsls	r3, r3, #30
 8005598:	d413      	bmi.n	80055c2 <_printf_i+0x22e>
 800559a:	68e0      	ldr	r0, [r4, #12]
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	4298      	cmp	r0, r3
 80055a0:	bfb8      	it	lt
 80055a2:	4618      	movlt	r0, r3
 80055a4:	e7a6      	b.n	80054f4 <_printf_i+0x160>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4632      	mov	r2, r6
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	47d0      	blx	sl
 80055b0:	3001      	adds	r0, #1
 80055b2:	d09d      	beq.n	80054f0 <_printf_i+0x15c>
 80055b4:	3501      	adds	r5, #1
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	9903      	ldr	r1, [sp, #12]
 80055ba:	1a5b      	subs	r3, r3, r1
 80055bc:	42ab      	cmp	r3, r5
 80055be:	dcf2      	bgt.n	80055a6 <_printf_i+0x212>
 80055c0:	e7eb      	b.n	800559a <_printf_i+0x206>
 80055c2:	2500      	movs	r5, #0
 80055c4:	f104 0619 	add.w	r6, r4, #25
 80055c8:	e7f5      	b.n	80055b6 <_printf_i+0x222>
 80055ca:	bf00      	nop
 80055cc:	08035ea8 	.word	0x08035ea8
 80055d0:	08035eb9 	.word	0x08035eb9

080055d4 <__sflush_r>:
 80055d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	0716      	lsls	r6, r2, #28
 80055de:	4605      	mov	r5, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	d454      	bmi.n	800568e <__sflush_r+0xba>
 80055e4:	684b      	ldr	r3, [r1, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dc02      	bgt.n	80055f0 <__sflush_r+0x1c>
 80055ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dd48      	ble.n	8005682 <__sflush_r+0xae>
 80055f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	d045      	beq.n	8005682 <__sflush_r+0xae>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055fc:	682f      	ldr	r7, [r5, #0]
 80055fe:	6a21      	ldr	r1, [r4, #32]
 8005600:	602b      	str	r3, [r5, #0]
 8005602:	d030      	beq.n	8005666 <__sflush_r+0x92>
 8005604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	0759      	lsls	r1, r3, #29
 800560a:	d505      	bpl.n	8005618 <__sflush_r+0x44>
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005612:	b10b      	cbz	r3, 8005618 <__sflush_r+0x44>
 8005614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800561c:	6a21      	ldr	r1, [r4, #32]
 800561e:	4628      	mov	r0, r5
 8005620:	47b0      	blx	r6
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	d106      	bne.n	8005636 <__sflush_r+0x62>
 8005628:	6829      	ldr	r1, [r5, #0]
 800562a:	291d      	cmp	r1, #29
 800562c:	d82b      	bhi.n	8005686 <__sflush_r+0xb2>
 800562e:	4a2a      	ldr	r2, [pc, #168]	@ (80056d8 <__sflush_r+0x104>)
 8005630:	410a      	asrs	r2, r1
 8005632:	07d6      	lsls	r6, r2, #31
 8005634:	d427      	bmi.n	8005686 <__sflush_r+0xb2>
 8005636:	2200      	movs	r2, #0
 8005638:	6062      	str	r2, [r4, #4]
 800563a:	04d9      	lsls	r1, r3, #19
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	d504      	bpl.n	800564c <__sflush_r+0x78>
 8005642:	1c42      	adds	r2, r0, #1
 8005644:	d101      	bne.n	800564a <__sflush_r+0x76>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	b903      	cbnz	r3, 800564c <__sflush_r+0x78>
 800564a:	6560      	str	r0, [r4, #84]	@ 0x54
 800564c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800564e:	602f      	str	r7, [r5, #0]
 8005650:	b1b9      	cbz	r1, 8005682 <__sflush_r+0xae>
 8005652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005656:	4299      	cmp	r1, r3
 8005658:	d002      	beq.n	8005660 <__sflush_r+0x8c>
 800565a:	4628      	mov	r0, r5
 800565c:	f000 ffd6 	bl	800660c <_free_r>
 8005660:	2300      	movs	r3, #0
 8005662:	6363      	str	r3, [r4, #52]	@ 0x34
 8005664:	e00d      	b.n	8005682 <__sflush_r+0xae>
 8005666:	2301      	movs	r3, #1
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	4602      	mov	r2, r0
 800566e:	1c50      	adds	r0, r2, #1
 8005670:	d1c9      	bne.n	8005606 <__sflush_r+0x32>
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0c6      	beq.n	8005606 <__sflush_r+0x32>
 8005678:	2b1d      	cmp	r3, #29
 800567a:	d001      	beq.n	8005680 <__sflush_r+0xac>
 800567c:	2b16      	cmp	r3, #22
 800567e:	d11e      	bne.n	80056be <__sflush_r+0xea>
 8005680:	602f      	str	r7, [r5, #0]
 8005682:	2000      	movs	r0, #0
 8005684:	e022      	b.n	80056cc <__sflush_r+0xf8>
 8005686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568a:	b21b      	sxth	r3, r3
 800568c:	e01b      	b.n	80056c6 <__sflush_r+0xf2>
 800568e:	690f      	ldr	r7, [r1, #16]
 8005690:	2f00      	cmp	r7, #0
 8005692:	d0f6      	beq.n	8005682 <__sflush_r+0xae>
 8005694:	0793      	lsls	r3, r2, #30
 8005696:	680e      	ldr	r6, [r1, #0]
 8005698:	bf08      	it	eq
 800569a:	694b      	ldreq	r3, [r1, #20]
 800569c:	600f      	str	r7, [r1, #0]
 800569e:	bf18      	it	ne
 80056a0:	2300      	movne	r3, #0
 80056a2:	eba6 0807 	sub.w	r8, r6, r7
 80056a6:	608b      	str	r3, [r1, #8]
 80056a8:	f1b8 0f00 	cmp.w	r8, #0
 80056ac:	dde9      	ble.n	8005682 <__sflush_r+0xae>
 80056ae:	6a21      	ldr	r1, [r4, #32]
 80056b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056b2:	4643      	mov	r3, r8
 80056b4:	463a      	mov	r2, r7
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b0      	blx	r6
 80056ba:	2800      	cmp	r0, #0
 80056bc:	dc08      	bgt.n	80056d0 <__sflush_r+0xfc>
 80056be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d0:	4407      	add	r7, r0
 80056d2:	eba8 0800 	sub.w	r8, r8, r0
 80056d6:	e7e7      	b.n	80056a8 <__sflush_r+0xd4>
 80056d8:	dfbffffe 	.word	0xdfbffffe

080056dc <_fflush_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b913      	cbnz	r3, 80056ec <_fflush_r+0x10>
 80056e6:	2500      	movs	r5, #0
 80056e8:	4628      	mov	r0, r5
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	b118      	cbz	r0, 80056f6 <_fflush_r+0x1a>
 80056ee:	6a03      	ldr	r3, [r0, #32]
 80056f0:	b90b      	cbnz	r3, 80056f6 <_fflush_r+0x1a>
 80056f2:	f000 f8d3 	bl	800589c <__sinit>
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f3      	beq.n	80056e6 <_fflush_r+0xa>
 80056fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005700:	07d0      	lsls	r0, r2, #31
 8005702:	d404      	bmi.n	800570e <_fflush_r+0x32>
 8005704:	0599      	lsls	r1, r3, #22
 8005706:	d402      	bmi.n	800570e <_fflush_r+0x32>
 8005708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570a:	f000 f972 	bl	80059f2 <__retarget_lock_acquire_recursive>
 800570e:	4628      	mov	r0, r5
 8005710:	4621      	mov	r1, r4
 8005712:	f7ff ff5f 	bl	80055d4 <__sflush_r>
 8005716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005718:	07da      	lsls	r2, r3, #31
 800571a:	4605      	mov	r5, r0
 800571c:	d4e4      	bmi.n	80056e8 <_fflush_r+0xc>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	d4e1      	bmi.n	80056e8 <_fflush_r+0xc>
 8005724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005726:	f000 f965 	bl	80059f4 <__retarget_lock_release_recursive>
 800572a:	e7dd      	b.n	80056e8 <_fflush_r+0xc>

0800572c <__malloc_lock>:
 800572c:	4801      	ldr	r0, [pc, #4]	@ (8005734 <__malloc_lock+0x8>)
 800572e:	f000 b960 	b.w	80059f2 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	20001ec4 	.word	0x20001ec4

08005738 <__malloc_unlock>:
 8005738:	4801      	ldr	r0, [pc, #4]	@ (8005740 <__malloc_unlock+0x8>)
 800573a:	f000 b95b 	b.w	80059f4 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	20001ec4 	.word	0x20001ec4

08005744 <siprintf>:
 8005744:	b40e      	push	{r1, r2, r3}
 8005746:	b500      	push	{lr}
 8005748:	b09c      	sub	sp, #112	@ 0x70
 800574a:	ab1d      	add	r3, sp, #116	@ 0x74
 800574c:	9002      	str	r0, [sp, #8]
 800574e:	9006      	str	r0, [sp, #24]
 8005750:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005754:	4809      	ldr	r0, [pc, #36]	@ (800577c <siprintf+0x38>)
 8005756:	9107      	str	r1, [sp, #28]
 8005758:	9104      	str	r1, [sp, #16]
 800575a:	4909      	ldr	r1, [pc, #36]	@ (8005780 <siprintf+0x3c>)
 800575c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005760:	9105      	str	r1, [sp, #20]
 8005762:	6800      	ldr	r0, [r0, #0]
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	a902      	add	r1, sp, #8
 8005768:	f000 fff6 	bl	8006758 <_svfiprintf_r>
 800576c:	9b02      	ldr	r3, [sp, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	b01c      	add	sp, #112	@ 0x70
 8005774:	f85d eb04 	ldr.w	lr, [sp], #4
 8005778:	b003      	add	sp, #12
 800577a:	4770      	bx	lr
 800577c:	200014f8 	.word	0x200014f8
 8005780:	ffff0208 	.word	0xffff0208

08005784 <std>:
 8005784:	2300      	movs	r3, #0
 8005786:	b510      	push	{r4, lr}
 8005788:	4604      	mov	r4, r0
 800578a:	e9c0 3300 	strd	r3, r3, [r0]
 800578e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005792:	6083      	str	r3, [r0, #8]
 8005794:	8181      	strh	r1, [r0, #12]
 8005796:	6643      	str	r3, [r0, #100]	@ 0x64
 8005798:	81c2      	strh	r2, [r0, #14]
 800579a:	6183      	str	r3, [r0, #24]
 800579c:	4619      	mov	r1, r3
 800579e:	2208      	movs	r2, #8
 80057a0:	305c      	adds	r0, #92	@ 0x5c
 80057a2:	f000 f8df 	bl	8005964 <memset>
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <std+0x58>)
 80057a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <std+0x5c>)
 80057ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <std+0x60>)
 80057b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <std+0x64>)
 80057b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <std+0x68>)
 80057b8:	6224      	str	r4, [r4, #32]
 80057ba:	429c      	cmp	r4, r3
 80057bc:	d006      	beq.n	80057cc <std+0x48>
 80057be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057c2:	4294      	cmp	r4, r2
 80057c4:	d002      	beq.n	80057cc <std+0x48>
 80057c6:	33d0      	adds	r3, #208	@ 0xd0
 80057c8:	429c      	cmp	r4, r3
 80057ca:	d105      	bne.n	80057d8 <std+0x54>
 80057cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d4:	f000 b90c 	b.w	80059f0 <__retarget_lock_init_recursive>
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	bf00      	nop
 80057dc:	08007065 	.word	0x08007065
 80057e0:	08007087 	.word	0x08007087
 80057e4:	080070bf 	.word	0x080070bf
 80057e8:	080070e3 	.word	0x080070e3
 80057ec:	20001d88 	.word	0x20001d88

080057f0 <stdio_exit_handler>:
 80057f0:	4a02      	ldr	r2, [pc, #8]	@ (80057fc <stdio_exit_handler+0xc>)
 80057f2:	4903      	ldr	r1, [pc, #12]	@ (8005800 <stdio_exit_handler+0x10>)
 80057f4:	4803      	ldr	r0, [pc, #12]	@ (8005804 <stdio_exit_handler+0x14>)
 80057f6:	f000 b897 	b.w	8005928 <_fwalk_sglue>
 80057fa:	bf00      	nop
 80057fc:	200014ec 	.word	0x200014ec
 8005800:	080056dd 	.word	0x080056dd
 8005804:	200014fc 	.word	0x200014fc

08005808 <cleanup_stdio>:
 8005808:	6841      	ldr	r1, [r0, #4]
 800580a:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <cleanup_stdio+0x34>)
 800580c:	4299      	cmp	r1, r3
 800580e:	b510      	push	{r4, lr}
 8005810:	4604      	mov	r4, r0
 8005812:	d001      	beq.n	8005818 <cleanup_stdio+0x10>
 8005814:	f7ff ff62 	bl	80056dc <_fflush_r>
 8005818:	68a1      	ldr	r1, [r4, #8]
 800581a:	4b09      	ldr	r3, [pc, #36]	@ (8005840 <cleanup_stdio+0x38>)
 800581c:	4299      	cmp	r1, r3
 800581e:	d002      	beq.n	8005826 <cleanup_stdio+0x1e>
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff ff5b 	bl	80056dc <_fflush_r>
 8005826:	68e1      	ldr	r1, [r4, #12]
 8005828:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <cleanup_stdio+0x3c>)
 800582a:	4299      	cmp	r1, r3
 800582c:	d004      	beq.n	8005838 <cleanup_stdio+0x30>
 800582e:	4620      	mov	r0, r4
 8005830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005834:	f7ff bf52 	b.w	80056dc <_fflush_r>
 8005838:	bd10      	pop	{r4, pc}
 800583a:	bf00      	nop
 800583c:	20001d88 	.word	0x20001d88
 8005840:	20001df0 	.word	0x20001df0
 8005844:	20001e58 	.word	0x20001e58

08005848 <global_stdio_init.part.0>:
 8005848:	b510      	push	{r4, lr}
 800584a:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <global_stdio_init.part.0+0x30>)
 800584c:	4c0b      	ldr	r4, [pc, #44]	@ (800587c <global_stdio_init.part.0+0x34>)
 800584e:	4a0c      	ldr	r2, [pc, #48]	@ (8005880 <global_stdio_init.part.0+0x38>)
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	4620      	mov	r0, r4
 8005854:	2200      	movs	r2, #0
 8005856:	2104      	movs	r1, #4
 8005858:	f7ff ff94 	bl	8005784 <std>
 800585c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005860:	2201      	movs	r2, #1
 8005862:	2109      	movs	r1, #9
 8005864:	f7ff ff8e 	bl	8005784 <std>
 8005868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800586c:	2202      	movs	r2, #2
 800586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005872:	2112      	movs	r1, #18
 8005874:	f7ff bf86 	b.w	8005784 <std>
 8005878:	20001ec0 	.word	0x20001ec0
 800587c:	20001d88 	.word	0x20001d88
 8005880:	080057f1 	.word	0x080057f1

08005884 <__sfp_lock_acquire>:
 8005884:	4801      	ldr	r0, [pc, #4]	@ (800588c <__sfp_lock_acquire+0x8>)
 8005886:	f000 b8b4 	b.w	80059f2 <__retarget_lock_acquire_recursive>
 800588a:	bf00      	nop
 800588c:	20001ec5 	.word	0x20001ec5

08005890 <__sfp_lock_release>:
 8005890:	4801      	ldr	r0, [pc, #4]	@ (8005898 <__sfp_lock_release+0x8>)
 8005892:	f000 b8af 	b.w	80059f4 <__retarget_lock_release_recursive>
 8005896:	bf00      	nop
 8005898:	20001ec5 	.word	0x20001ec5

0800589c <__sinit>:
 800589c:	b510      	push	{r4, lr}
 800589e:	4604      	mov	r4, r0
 80058a0:	f7ff fff0 	bl	8005884 <__sfp_lock_acquire>
 80058a4:	6a23      	ldr	r3, [r4, #32]
 80058a6:	b11b      	cbz	r3, 80058b0 <__sinit+0x14>
 80058a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ac:	f7ff bff0 	b.w	8005890 <__sfp_lock_release>
 80058b0:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <__sinit+0x28>)
 80058b2:	6223      	str	r3, [r4, #32]
 80058b4:	4b04      	ldr	r3, [pc, #16]	@ (80058c8 <__sinit+0x2c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f5      	bne.n	80058a8 <__sinit+0xc>
 80058bc:	f7ff ffc4 	bl	8005848 <global_stdio_init.part.0>
 80058c0:	e7f2      	b.n	80058a8 <__sinit+0xc>
 80058c2:	bf00      	nop
 80058c4:	08005809 	.word	0x08005809
 80058c8:	20001ec0 	.word	0x20001ec0

080058cc <_realloc_r>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	4680      	mov	r8, r0
 80058d2:	4615      	mov	r5, r2
 80058d4:	460c      	mov	r4, r1
 80058d6:	b921      	cbnz	r1, 80058e2 <_realloc_r+0x16>
 80058d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4611      	mov	r1, r2
 80058de:	f7ff bc6b 	b.w	80051b8 <_malloc_r>
 80058e2:	b92a      	cbnz	r2, 80058f0 <_realloc_r+0x24>
 80058e4:	f000 fe92 	bl	800660c <_free_r>
 80058e8:	2400      	movs	r4, #0
 80058ea:	4620      	mov	r0, r4
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	f001 fbb0 	bl	8007054 <_malloc_usable_size_r>
 80058f4:	4285      	cmp	r5, r0
 80058f6:	4606      	mov	r6, r0
 80058f8:	d802      	bhi.n	8005900 <_realloc_r+0x34>
 80058fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058fe:	d8f4      	bhi.n	80058ea <_realloc_r+0x1e>
 8005900:	4629      	mov	r1, r5
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff fc58 	bl	80051b8 <_malloc_r>
 8005908:	4607      	mov	r7, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	d0ec      	beq.n	80058e8 <_realloc_r+0x1c>
 800590e:	42b5      	cmp	r5, r6
 8005910:	462a      	mov	r2, r5
 8005912:	4621      	mov	r1, r4
 8005914:	bf28      	it	cs
 8005916:	4632      	movcs	r2, r6
 8005918:	f000 f86d 	bl	80059f6 <memcpy>
 800591c:	4621      	mov	r1, r4
 800591e:	4640      	mov	r0, r8
 8005920:	f000 fe74 	bl	800660c <_free_r>
 8005924:	463c      	mov	r4, r7
 8005926:	e7e0      	b.n	80058ea <_realloc_r+0x1e>

08005928 <_fwalk_sglue>:
 8005928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800592c:	4607      	mov	r7, r0
 800592e:	4688      	mov	r8, r1
 8005930:	4614      	mov	r4, r2
 8005932:	2600      	movs	r6, #0
 8005934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005938:	f1b9 0901 	subs.w	r9, r9, #1
 800593c:	d505      	bpl.n	800594a <_fwalk_sglue+0x22>
 800593e:	6824      	ldr	r4, [r4, #0]
 8005940:	2c00      	cmp	r4, #0
 8005942:	d1f7      	bne.n	8005934 <_fwalk_sglue+0xc>
 8005944:	4630      	mov	r0, r6
 8005946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594a:	89ab      	ldrh	r3, [r5, #12]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d907      	bls.n	8005960 <_fwalk_sglue+0x38>
 8005950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005954:	3301      	adds	r3, #1
 8005956:	d003      	beq.n	8005960 <_fwalk_sglue+0x38>
 8005958:	4629      	mov	r1, r5
 800595a:	4638      	mov	r0, r7
 800595c:	47c0      	blx	r8
 800595e:	4306      	orrs	r6, r0
 8005960:	3568      	adds	r5, #104	@ 0x68
 8005962:	e7e9      	b.n	8005938 <_fwalk_sglue+0x10>

08005964 <memset>:
 8005964:	4402      	add	r2, r0
 8005966:	4603      	mov	r3, r0
 8005968:	4293      	cmp	r3, r2
 800596a:	d100      	bne.n	800596e <memset+0xa>
 800596c:	4770      	bx	lr
 800596e:	f803 1b01 	strb.w	r1, [r3], #1
 8005972:	e7f9      	b.n	8005968 <memset+0x4>

08005974 <_localeconv_r>:
 8005974:	4800      	ldr	r0, [pc, #0]	@ (8005978 <_localeconv_r+0x4>)
 8005976:	4770      	bx	lr
 8005978:	20001638 	.word	0x20001638

0800597c <_sbrk_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d06      	ldr	r5, [pc, #24]	@ (8005998 <_sbrk_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb fcb6 	bl	80012f8 <_sbrk>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_sbrk_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_sbrk_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20001ec8 	.word	0x20001ec8

0800599c <__errno>:
 800599c:	4b01      	ldr	r3, [pc, #4]	@ (80059a4 <__errno+0x8>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	200014f8 	.word	0x200014f8

080059a8 <__libc_init_array>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4d0d      	ldr	r5, [pc, #52]	@ (80059e0 <__libc_init_array+0x38>)
 80059ac:	4c0d      	ldr	r4, [pc, #52]	@ (80059e4 <__libc_init_array+0x3c>)
 80059ae:	1b64      	subs	r4, r4, r5
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	2600      	movs	r6, #0
 80059b4:	42a6      	cmp	r6, r4
 80059b6:	d109      	bne.n	80059cc <__libc_init_array+0x24>
 80059b8:	4d0b      	ldr	r5, [pc, #44]	@ (80059e8 <__libc_init_array+0x40>)
 80059ba:	4c0c      	ldr	r4, [pc, #48]	@ (80059ec <__libc_init_array+0x44>)
 80059bc:	f001 fee0 	bl	8007780 <_init>
 80059c0:	1b64      	subs	r4, r4, r5
 80059c2:	10a4      	asrs	r4, r4, #2
 80059c4:	2600      	movs	r6, #0
 80059c6:	42a6      	cmp	r6, r4
 80059c8:	d105      	bne.n	80059d6 <__libc_init_array+0x2e>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d0:	4798      	blx	r3
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7ee      	b.n	80059b4 <__libc_init_array+0xc>
 80059d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059da:	4798      	blx	r3
 80059dc:	3601      	adds	r6, #1
 80059de:	e7f2      	b.n	80059c6 <__libc_init_array+0x1e>
 80059e0:	08036214 	.word	0x08036214
 80059e4:	08036214 	.word	0x08036214
 80059e8:	08036214 	.word	0x08036214
 80059ec:	08036218 	.word	0x08036218

080059f0 <__retarget_lock_init_recursive>:
 80059f0:	4770      	bx	lr

080059f2 <__retarget_lock_acquire_recursive>:
 80059f2:	4770      	bx	lr

080059f4 <__retarget_lock_release_recursive>:
 80059f4:	4770      	bx	lr

080059f6 <memcpy>:
 80059f6:	440a      	add	r2, r1
 80059f8:	4291      	cmp	r1, r2
 80059fa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80059fe:	d100      	bne.n	8005a02 <memcpy+0xc>
 8005a00:	4770      	bx	lr
 8005a02:	b510      	push	{r4, lr}
 8005a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0c:	4291      	cmp	r1, r2
 8005a0e:	d1f9      	bne.n	8005a04 <memcpy+0xe>
 8005a10:	bd10      	pop	{r4, pc}
	...

08005a14 <__assert_func>:
 8005a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a16:	4614      	mov	r4, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b09      	ldr	r3, [pc, #36]	@ (8005a40 <__assert_func+0x2c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4605      	mov	r5, r0
 8005a20:	68d8      	ldr	r0, [r3, #12]
 8005a22:	b954      	cbnz	r4, 8005a3a <__assert_func+0x26>
 8005a24:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <__assert_func+0x30>)
 8005a26:	461c      	mov	r4, r3
 8005a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a2c:	9100      	str	r1, [sp, #0]
 8005a2e:	462b      	mov	r3, r5
 8005a30:	4905      	ldr	r1, [pc, #20]	@ (8005a48 <__assert_func+0x34>)
 8005a32:	f001 fb5b 	bl	80070ec <fiprintf>
 8005a36:	f001 fbcb 	bl	80071d0 <abort>
 8005a3a:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <__assert_func+0x38>)
 8005a3c:	e7f4      	b.n	8005a28 <__assert_func+0x14>
 8005a3e:	bf00      	nop
 8005a40:	200014f8 	.word	0x200014f8
 8005a44:	08007839 	.word	0x08007839
 8005a48:	08035ed7 	.word	0x08035ed7
 8005a4c:	08035eca 	.word	0x08035eca

08005a50 <quorem>:
 8005a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	6903      	ldr	r3, [r0, #16]
 8005a56:	690c      	ldr	r4, [r1, #16]
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	db7e      	blt.n	8005b5c <quorem+0x10c>
 8005a5e:	3c01      	subs	r4, #1
 8005a60:	f101 0814 	add.w	r8, r1, #20
 8005a64:	00a3      	lsls	r3, r4, #2
 8005a66:	f100 0514 	add.w	r5, r0, #20
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a82:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a86:	d32e      	bcc.n	8005ae6 <quorem+0x96>
 8005a88:	f04f 0a00 	mov.w	sl, #0
 8005a8c:	46c4      	mov	ip, r8
 8005a8e:	46ae      	mov	lr, r5
 8005a90:	46d3      	mov	fp, sl
 8005a92:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a96:	b298      	uxth	r0, r3
 8005a98:	fb06 a000 	mla	r0, r6, r0, sl
 8005a9c:	0c02      	lsrs	r2, r0, #16
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	fb06 2303 	mla	r3, r6, r3, r2
 8005aa4:	f8de 2000 	ldr.w	r2, [lr]
 8005aa8:	b280      	uxth	r0, r0
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	1a12      	subs	r2, r2, r0
 8005aae:	445a      	add	r2, fp
 8005ab0:	f8de 0000 	ldr.w	r0, [lr]
 8005ab4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005abe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ac8:	45e1      	cmp	r9, ip
 8005aca:	f84e 2b04 	str.w	r2, [lr], #4
 8005ace:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ad2:	d2de      	bcs.n	8005a92 <quorem+0x42>
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	58eb      	ldr	r3, [r5, r3]
 8005ad8:	b92b      	cbnz	r3, 8005ae6 <quorem+0x96>
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	3b04      	subs	r3, #4
 8005ade:	429d      	cmp	r5, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	d32f      	bcc.n	8005b44 <quorem+0xf4>
 8005ae4:	613c      	str	r4, [r7, #16]
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f001 f9ac 	bl	8006e44 <__mcmp>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	db25      	blt.n	8005b3c <quorem+0xec>
 8005af0:	4629      	mov	r1, r5
 8005af2:	2000      	movs	r0, #0
 8005af4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005af8:	f8d1 c000 	ldr.w	ip, [r1]
 8005afc:	fa1f fe82 	uxth.w	lr, r2
 8005b00:	fa1f f38c 	uxth.w	r3, ip
 8005b04:	eba3 030e 	sub.w	r3, r3, lr
 8005b08:	4403      	add	r3, r0
 8005b0a:	0c12      	lsrs	r2, r2, #16
 8005b0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b1a:	45c1      	cmp	r9, r8
 8005b1c:	f841 3b04 	str.w	r3, [r1], #4
 8005b20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b24:	d2e6      	bcs.n	8005af4 <quorem+0xa4>
 8005b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b2e:	b922      	cbnz	r2, 8005b3a <quorem+0xea>
 8005b30:	3b04      	subs	r3, #4
 8005b32:	429d      	cmp	r5, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	d30b      	bcc.n	8005b50 <quorem+0x100>
 8005b38:	613c      	str	r4, [r7, #16]
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	b003      	add	sp, #12
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	3b04      	subs	r3, #4
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d1cb      	bne.n	8005ae4 <quorem+0x94>
 8005b4c:	3c01      	subs	r4, #1
 8005b4e:	e7c6      	b.n	8005ade <quorem+0x8e>
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	3b04      	subs	r3, #4
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	d1ef      	bne.n	8005b38 <quorem+0xe8>
 8005b58:	3c01      	subs	r4, #1
 8005b5a:	e7ea      	b.n	8005b32 <quorem+0xe2>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e7ee      	b.n	8005b3e <quorem+0xee>

08005b60 <_dtoa_r>:
 8005b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	ed2d 8b02 	vpush	{d8}
 8005b68:	69c7      	ldr	r7, [r0, #28]
 8005b6a:	b091      	sub	sp, #68	@ 0x44
 8005b6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b70:	ec55 4b10 	vmov	r4, r5, d0
 8005b74:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005b76:	9107      	str	r1, [sp, #28]
 8005b78:	4681      	mov	r9, r0
 8005b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8005b7e:	b97f      	cbnz	r7, 8005ba0 <_dtoa_r+0x40>
 8005b80:	2010      	movs	r0, #16
 8005b82:	f7fd fa23 	bl	8002fcc <__wrap_malloc>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f8c9 001c 	str.w	r0, [r9, #28]
 8005b8c:	b920      	cbnz	r0, 8005b98 <_dtoa_r+0x38>
 8005b8e:	4ba0      	ldr	r3, [pc, #640]	@ (8005e10 <_dtoa_r+0x2b0>)
 8005b90:	21ef      	movs	r1, #239	@ 0xef
 8005b92:	48a0      	ldr	r0, [pc, #640]	@ (8005e14 <_dtoa_r+0x2b4>)
 8005b94:	f7ff ff3e 	bl	8005a14 <__assert_func>
 8005b98:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b9c:	6007      	str	r7, [r0, #0]
 8005b9e:	60c7      	str	r7, [r0, #12]
 8005ba0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ba4:	6819      	ldr	r1, [r3, #0]
 8005ba6:	b159      	cbz	r1, 8005bc0 <_dtoa_r+0x60>
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	604a      	str	r2, [r1, #4]
 8005bac:	2301      	movs	r3, #1
 8005bae:	4093      	lsls	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
 8005bb2:	4648      	mov	r0, r9
 8005bb4:	f000 ff0c 	bl	80069d0 <_Bfree>
 8005bb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	1e2b      	subs	r3, r5, #0
 8005bc2:	bfbb      	ittet	lt
 8005bc4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005bc8:	9303      	strlt	r3, [sp, #12]
 8005bca:	2300      	movge	r3, #0
 8005bcc:	2201      	movlt	r2, #1
 8005bce:	bfac      	ite	ge
 8005bd0:	6033      	strge	r3, [r6, #0]
 8005bd2:	6032      	strlt	r2, [r6, #0]
 8005bd4:	4b90      	ldr	r3, [pc, #576]	@ (8005e18 <_dtoa_r+0x2b8>)
 8005bd6:	9e03      	ldr	r6, [sp, #12]
 8005bd8:	43b3      	bics	r3, r6
 8005bda:	d110      	bne.n	8005bfe <_dtoa_r+0x9e>
 8005bdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005bde:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005be8:	4323      	orrs	r3, r4
 8005bea:	f000 84de 	beq.w	80065aa <_dtoa_r+0xa4a>
 8005bee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005bf0:	4f8a      	ldr	r7, [pc, #552]	@ (8005e1c <_dtoa_r+0x2bc>)
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 84e0 	beq.w	80065b8 <_dtoa_r+0xa58>
 8005bf8:	1cfb      	adds	r3, r7, #3
 8005bfa:	f000 bcdb 	b.w	80065b4 <_dtoa_r+0xa54>
 8005bfe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005c02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0a:	d10a      	bne.n	8005c22 <_dtoa_r+0xc2>
 8005c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c0e:	2301      	movs	r3, #1
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005c14:	b113      	cbz	r3, 8005c1c <_dtoa_r+0xbc>
 8005c16:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005c18:	4b81      	ldr	r3, [pc, #516]	@ (8005e20 <_dtoa_r+0x2c0>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4f81      	ldr	r7, [pc, #516]	@ (8005e24 <_dtoa_r+0x2c4>)
 8005c1e:	f000 bccb 	b.w	80065b8 <_dtoa_r+0xa58>
 8005c22:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c24:	a90f      	add	r1, sp, #60	@ 0x3c
 8005c26:	4648      	mov	r0, r9
 8005c28:	eeb0 0b48 	vmov.f64	d0, d8
 8005c2c:	f001 f9ba 	bl	8006fa4 <__d2b>
 8005c30:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005c34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c36:	9001      	str	r0, [sp, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d045      	beq.n	8005cc8 <_dtoa_r+0x168>
 8005c3c:	eeb0 7b48 	vmov.f64	d7, d8
 8005c40:	ee18 1a90 	vmov	r1, s17
 8005c44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005c48:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005c4c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005c50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005c54:	2500      	movs	r5, #0
 8005c56:	ee07 1a90 	vmov	s15, r1
 8005c5a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005c5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005df8 <_dtoa_r+0x298>
 8005c62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c66:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005e00 <_dtoa_r+0x2a0>
 8005c6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005c6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005e08 <_dtoa_r+0x2a8>
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005c7a:	eeb0 7b46 	vmov.f64	d7, d6
 8005c7e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005c82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005c86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8e:	ee16 8a90 	vmov	r8, s13
 8005c92:	d508      	bpl.n	8005ca6 <_dtoa_r+0x146>
 8005c94:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005c98:	eeb4 6b47 	vcmp.f64	d6, d7
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	bf18      	it	ne
 8005ca2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8005ca6:	f1b8 0f16 	cmp.w	r8, #22
 8005caa:	d82b      	bhi.n	8005d04 <_dtoa_r+0x1a4>
 8005cac:	495e      	ldr	r1, [pc, #376]	@ (8005e28 <_dtoa_r+0x2c8>)
 8005cae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005cb2:	ed91 7b00 	vldr	d7, [r1]
 8005cb6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbe:	d501      	bpl.n	8005cc4 <_dtoa_r+0x164>
 8005cc0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	e01e      	b.n	8005d06 <_dtoa_r+0x1a6>
 8005cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cca:	4413      	add	r3, r2
 8005ccc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005cd0:	2920      	cmp	r1, #32
 8005cd2:	bfc1      	itttt	gt
 8005cd4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005cd8:	408e      	lslgt	r6, r1
 8005cda:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005cde:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005ce2:	bfd6      	itet	le
 8005ce4:	f1c1 0120 	rsble	r1, r1, #32
 8005ce8:	4331      	orrgt	r1, r6
 8005cea:	fa04 f101 	lslle.w	r1, r4, r1
 8005cee:	ee07 1a90 	vmov	s15, r1
 8005cf2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	ee17 1a90 	vmov	r1, s15
 8005cfc:	2501      	movs	r5, #1
 8005cfe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005d02:	e7a8      	b.n	8005c56 <_dtoa_r+0xf6>
 8005d04:	2101      	movs	r1, #1
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	1e53      	subs	r3, r2, #1
 8005d0a:	9306      	str	r3, [sp, #24]
 8005d0c:	bf45      	ittet	mi
 8005d0e:	f1c2 0301 	rsbmi	r3, r2, #1
 8005d12:	9305      	strmi	r3, [sp, #20]
 8005d14:	2300      	movpl	r3, #0
 8005d16:	2300      	movmi	r3, #0
 8005d18:	bf4c      	ite	mi
 8005d1a:	9306      	strmi	r3, [sp, #24]
 8005d1c:	9305      	strpl	r3, [sp, #20]
 8005d1e:	f1b8 0f00 	cmp.w	r8, #0
 8005d22:	910c      	str	r1, [sp, #48]	@ 0x30
 8005d24:	db18      	blt.n	8005d58 <_dtoa_r+0x1f8>
 8005d26:	9b06      	ldr	r3, [sp, #24]
 8005d28:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005d2c:	4443      	add	r3, r8
 8005d2e:	9306      	str	r3, [sp, #24]
 8005d30:	2300      	movs	r3, #0
 8005d32:	9a07      	ldr	r2, [sp, #28]
 8005d34:	2a09      	cmp	r2, #9
 8005d36:	d849      	bhi.n	8005dcc <_dtoa_r+0x26c>
 8005d38:	2a05      	cmp	r2, #5
 8005d3a:	bfc4      	itt	gt
 8005d3c:	3a04      	subgt	r2, #4
 8005d3e:	9207      	strgt	r2, [sp, #28]
 8005d40:	9a07      	ldr	r2, [sp, #28]
 8005d42:	f1a2 0202 	sub.w	r2, r2, #2
 8005d46:	bfcc      	ite	gt
 8005d48:	2400      	movgt	r4, #0
 8005d4a:	2401      	movle	r4, #1
 8005d4c:	2a03      	cmp	r2, #3
 8005d4e:	d848      	bhi.n	8005de2 <_dtoa_r+0x282>
 8005d50:	e8df f002 	tbb	[pc, r2]
 8005d54:	3a2c2e0b 	.word	0x3a2c2e0b
 8005d58:	9b05      	ldr	r3, [sp, #20]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	eba3 0308 	sub.w	r3, r3, r8
 8005d60:	9305      	str	r3, [sp, #20]
 8005d62:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d64:	f1c8 0300 	rsb	r3, r8, #0
 8005d68:	e7e3      	b.n	8005d32 <_dtoa_r+0x1d2>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	9208      	str	r2, [sp, #32]
 8005d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	dc39      	bgt.n	8005de8 <_dtoa_r+0x288>
 8005d74:	f04f 0b01 	mov.w	fp, #1
 8005d78:	46da      	mov	sl, fp
 8005d7a:	465a      	mov	r2, fp
 8005d7c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005d80:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005d84:	2100      	movs	r1, #0
 8005d86:	2004      	movs	r0, #4
 8005d88:	f100 0614 	add.w	r6, r0, #20
 8005d8c:	4296      	cmp	r6, r2
 8005d8e:	d930      	bls.n	8005df2 <_dtoa_r+0x292>
 8005d90:	6079      	str	r1, [r7, #4]
 8005d92:	4648      	mov	r0, r9
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	f000 fddb 	bl	8006950 <_Balloc>
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d146      	bne.n	8005e30 <_dtoa_r+0x2d0>
 8005da2:	4b22      	ldr	r3, [pc, #136]	@ (8005e2c <_dtoa_r+0x2cc>)
 8005da4:	4602      	mov	r2, r0
 8005da6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005daa:	e6f2      	b.n	8005b92 <_dtoa_r+0x32>
 8005dac:	2201      	movs	r2, #1
 8005dae:	e7dd      	b.n	8005d6c <_dtoa_r+0x20c>
 8005db0:	2200      	movs	r2, #0
 8005db2:	9208      	str	r2, [sp, #32]
 8005db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005db6:	eb08 0b02 	add.w	fp, r8, r2
 8005dba:	f10b 0a01 	add.w	sl, fp, #1
 8005dbe:	4652      	mov	r2, sl
 8005dc0:	2a01      	cmp	r2, #1
 8005dc2:	bfb8      	it	lt
 8005dc4:	2201      	movlt	r2, #1
 8005dc6:	e7db      	b.n	8005d80 <_dtoa_r+0x220>
 8005dc8:	2201      	movs	r2, #1
 8005dca:	e7f2      	b.n	8005db2 <_dtoa_r+0x252>
 8005dcc:	2401      	movs	r4, #1
 8005dce:	2200      	movs	r2, #0
 8005dd0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005dd4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005dd8:	2100      	movs	r1, #0
 8005dda:	46da      	mov	sl, fp
 8005ddc:	2212      	movs	r2, #18
 8005dde:	9109      	str	r1, [sp, #36]	@ 0x24
 8005de0:	e7ce      	b.n	8005d80 <_dtoa_r+0x220>
 8005de2:	2201      	movs	r2, #1
 8005de4:	9208      	str	r2, [sp, #32]
 8005de6:	e7f5      	b.n	8005dd4 <_dtoa_r+0x274>
 8005de8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8005dec:	46da      	mov	sl, fp
 8005dee:	465a      	mov	r2, fp
 8005df0:	e7c6      	b.n	8005d80 <_dtoa_r+0x220>
 8005df2:	3101      	adds	r1, #1
 8005df4:	0040      	lsls	r0, r0, #1
 8005df6:	e7c7      	b.n	8005d88 <_dtoa_r+0x228>
 8005df8:	636f4361 	.word	0x636f4361
 8005dfc:	3fd287a7 	.word	0x3fd287a7
 8005e00:	8b60c8b3 	.word	0x8b60c8b3
 8005e04:	3fc68a28 	.word	0x3fc68a28
 8005e08:	509f79fb 	.word	0x509f79fb
 8005e0c:	3fd34413 	.word	0x3fd34413
 8005e10:	08035f13 	.word	0x08035f13
 8005e14:	08035f2a 	.word	0x08035f2a
 8005e18:	7ff00000 	.word	0x7ff00000
 8005e1c:	08035f0f 	.word	0x08035f0f
 8005e20:	0801ac20 	.word	0x0801ac20
 8005e24:	0801ac1f 	.word	0x0801ac1f
 8005e28:	08036038 	.word	0x08036038
 8005e2c:	08035f82 	.word	0x08035f82
 8005e30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005e34:	f1ba 0f0e 	cmp.w	sl, #14
 8005e38:	6010      	str	r0, [r2, #0]
 8005e3a:	d86f      	bhi.n	8005f1c <_dtoa_r+0x3bc>
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	d06d      	beq.n	8005f1c <_dtoa_r+0x3bc>
 8005e40:	f1b8 0f00 	cmp.w	r8, #0
 8005e44:	f340 80c2 	ble.w	8005fcc <_dtoa_r+0x46c>
 8005e48:	4aca      	ldr	r2, [pc, #808]	@ (8006174 <_dtoa_r+0x614>)
 8005e4a:	f008 010f 	and.w	r1, r8, #15
 8005e4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005e52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005e56:	ed92 7b00 	vldr	d7, [r2]
 8005e5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005e5e:	f000 80a9 	beq.w	8005fb4 <_dtoa_r+0x454>
 8005e62:	4ac5      	ldr	r2, [pc, #788]	@ (8006178 <_dtoa_r+0x618>)
 8005e64:	ed92 6b08 	vldr	d6, [r2, #32]
 8005e68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005e6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005e70:	f001 010f 	and.w	r1, r1, #15
 8005e74:	2203      	movs	r2, #3
 8005e76:	48c0      	ldr	r0, [pc, #768]	@ (8006178 <_dtoa_r+0x618>)
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	f040 809d 	bne.w	8005fb8 <_dtoa_r+0x458>
 8005e7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005e82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005e86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e90:	2900      	cmp	r1, #0
 8005e92:	f000 80c1 	beq.w	8006018 <_dtoa_r+0x4b8>
 8005e96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005e9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea2:	f140 80b9 	bpl.w	8006018 <_dtoa_r+0x4b8>
 8005ea6:	f1ba 0f00 	cmp.w	sl, #0
 8005eaa:	f000 80b5 	beq.w	8006018 <_dtoa_r+0x4b8>
 8005eae:	f1bb 0f00 	cmp.w	fp, #0
 8005eb2:	dd31      	ble.n	8005f18 <_dtoa_r+0x3b8>
 8005eb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005eb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ebc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ec0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8005ec4:	9104      	str	r1, [sp, #16]
 8005ec6:	3201      	adds	r2, #1
 8005ec8:	465c      	mov	r4, fp
 8005eca:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005ece:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005ed2:	ee07 2a90 	vmov	s15, r2
 8005ed6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005eda:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ede:	ee15 2a90 	vmov	r2, s11
 8005ee2:	ec51 0b15 	vmov	r0, r1, d5
 8005ee6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005eea:	2c00      	cmp	r4, #0
 8005eec:	f040 8098 	bne.w	8006020 <_dtoa_r+0x4c0>
 8005ef0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005ef4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005ef8:	ec41 0b17 	vmov	d7, r0, r1
 8005efc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f04:	f300 8261 	bgt.w	80063ca <_dtoa_r+0x86a>
 8005f08:	eeb1 7b47 	vneg.f64	d7, d7
 8005f0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	f100 80f5 	bmi.w	8006102 <_dtoa_r+0x5a2>
 8005f18:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005f1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	f2c0 812c 	blt.w	800617c <_dtoa_r+0x61c>
 8005f24:	f1b8 0f0e 	cmp.w	r8, #14
 8005f28:	f300 8128 	bgt.w	800617c <_dtoa_r+0x61c>
 8005f2c:	4b91      	ldr	r3, [pc, #580]	@ (8006174 <_dtoa_r+0x614>)
 8005f2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005f32:	ed93 6b00 	vldr	d6, [r3]
 8005f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da03      	bge.n	8005f44 <_dtoa_r+0x3e4>
 8005f3c:	f1ba 0f00 	cmp.w	sl, #0
 8005f40:	f340 80d2 	ble.w	80060e8 <_dtoa_r+0x588>
 8005f44:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005f48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f4c:	463e      	mov	r6, r7
 8005f4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005f52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005f56:	ee15 3a10 	vmov	r3, s10
 8005f5a:	3330      	adds	r3, #48	@ 0x30
 8005f5c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f60:	1bf3      	subs	r3, r6, r7
 8005f62:	459a      	cmp	sl, r3
 8005f64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005f68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005f6c:	f040 80f8 	bne.w	8006160 <_dtoa_r+0x600>
 8005f70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7c:	f300 80dd 	bgt.w	800613a <_dtoa_r+0x5da>
 8005f80:	eeb4 7b46 	vcmp.f64	d7, d6
 8005f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f88:	d104      	bne.n	8005f94 <_dtoa_r+0x434>
 8005f8a:	ee15 3a10 	vmov	r3, s10
 8005f8e:	07db      	lsls	r3, r3, #31
 8005f90:	f100 80d3 	bmi.w	800613a <_dtoa_r+0x5da>
 8005f94:	9901      	ldr	r1, [sp, #4]
 8005f96:	4648      	mov	r0, r9
 8005f98:	f000 fd1a 	bl	80069d0 <_Bfree>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fa0:	7033      	strb	r3, [r6, #0]
 8005fa2:	f108 0301 	add.w	r3, r8, #1
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8304 	beq.w	80065b8 <_dtoa_r+0xa58>
 8005fb0:	601e      	str	r6, [r3, #0]
 8005fb2:	e301      	b.n	80065b8 <_dtoa_r+0xa58>
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	e75e      	b.n	8005e76 <_dtoa_r+0x316>
 8005fb8:	07cc      	lsls	r4, r1, #31
 8005fba:	d504      	bpl.n	8005fc6 <_dtoa_r+0x466>
 8005fbc:	ed90 6b00 	vldr	d6, [r0]
 8005fc0:	3201      	adds	r2, #1
 8005fc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fc6:	1049      	asrs	r1, r1, #1
 8005fc8:	3008      	adds	r0, #8
 8005fca:	e755      	b.n	8005e78 <_dtoa_r+0x318>
 8005fcc:	d022      	beq.n	8006014 <_dtoa_r+0x4b4>
 8005fce:	f1c8 0100 	rsb	r1, r8, #0
 8005fd2:	4a68      	ldr	r2, [pc, #416]	@ (8006174 <_dtoa_r+0x614>)
 8005fd4:	f001 000f 	and.w	r0, r1, #15
 8005fd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005fdc:	ed92 7b00 	vldr	d7, [r2]
 8005fe0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005fe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fe8:	4863      	ldr	r0, [pc, #396]	@ (8006178 <_dtoa_r+0x618>)
 8005fea:	1109      	asrs	r1, r1, #4
 8005fec:	2400      	movs	r4, #0
 8005fee:	2202      	movs	r2, #2
 8005ff0:	b929      	cbnz	r1, 8005ffe <_dtoa_r+0x49e>
 8005ff2:	2c00      	cmp	r4, #0
 8005ff4:	f43f af49 	beq.w	8005e8a <_dtoa_r+0x32a>
 8005ff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ffc:	e745      	b.n	8005e8a <_dtoa_r+0x32a>
 8005ffe:	07ce      	lsls	r6, r1, #31
 8006000:	d505      	bpl.n	800600e <_dtoa_r+0x4ae>
 8006002:	ed90 6b00 	vldr	d6, [r0]
 8006006:	3201      	adds	r2, #1
 8006008:	2401      	movs	r4, #1
 800600a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800600e:	1049      	asrs	r1, r1, #1
 8006010:	3008      	adds	r0, #8
 8006012:	e7ed      	b.n	8005ff0 <_dtoa_r+0x490>
 8006014:	2202      	movs	r2, #2
 8006016:	e738      	b.n	8005e8a <_dtoa_r+0x32a>
 8006018:	f8cd 8010 	str.w	r8, [sp, #16]
 800601c:	4654      	mov	r4, sl
 800601e:	e754      	b.n	8005eca <_dtoa_r+0x36a>
 8006020:	4a54      	ldr	r2, [pc, #336]	@ (8006174 <_dtoa_r+0x614>)
 8006022:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006026:	ed12 4b02 	vldr	d4, [r2, #-8]
 800602a:	9a08      	ldr	r2, [sp, #32]
 800602c:	ec41 0b17 	vmov	d7, r0, r1
 8006030:	443c      	add	r4, r7
 8006032:	b34a      	cbz	r2, 8006088 <_dtoa_r+0x528>
 8006034:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006038:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800603c:	463e      	mov	r6, r7
 800603e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006042:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006046:	ee35 7b47 	vsub.f64	d7, d5, d7
 800604a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800604e:	ee14 2a90 	vmov	r2, s9
 8006052:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006056:	3230      	adds	r2, #48	@ 0x30
 8006058:	ee36 6b45 	vsub.f64	d6, d6, d5
 800605c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	f806 2b01 	strb.w	r2, [r6], #1
 8006068:	d438      	bmi.n	80060dc <_dtoa_r+0x57c>
 800606a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800606e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006076:	d462      	bmi.n	800613e <_dtoa_r+0x5de>
 8006078:	42a6      	cmp	r6, r4
 800607a:	f43f af4d 	beq.w	8005f18 <_dtoa_r+0x3b8>
 800607e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006082:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006086:	e7e0      	b.n	800604a <_dtoa_r+0x4ea>
 8006088:	4621      	mov	r1, r4
 800608a:	463e      	mov	r6, r7
 800608c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006090:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006094:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006098:	ee14 2a90 	vmov	r2, s9
 800609c:	3230      	adds	r2, #48	@ 0x30
 800609e:	f806 2b01 	strb.w	r2, [r6], #1
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80060a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80060ac:	d119      	bne.n	80060e2 <_dtoa_r+0x582>
 80060ae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80060b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80060b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	dc3e      	bgt.n	800613e <_dtoa_r+0x5de>
 80060c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80060c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	f57f af24 	bpl.w	8005f18 <_dtoa_r+0x3b8>
 80060d0:	460e      	mov	r6, r1
 80060d2:	3901      	subs	r1, #1
 80060d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d0f9      	beq.n	80060d0 <_dtoa_r+0x570>
 80060dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80060e0:	e758      	b.n	8005f94 <_dtoa_r+0x434>
 80060e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80060e6:	e7d5      	b.n	8006094 <_dtoa_r+0x534>
 80060e8:	d10b      	bne.n	8006102 <_dtoa_r+0x5a2>
 80060ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80060ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80060f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80060fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fe:	f2c0 8161 	blt.w	80063c4 <_dtoa_r+0x864>
 8006102:	2400      	movs	r4, #0
 8006104:	4625      	mov	r5, r4
 8006106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006108:	43db      	mvns	r3, r3
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	463e      	mov	r6, r7
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	4621      	mov	r1, r4
 8006114:	4648      	mov	r0, r9
 8006116:	f000 fc5b 	bl	80069d0 <_Bfree>
 800611a:	2d00      	cmp	r5, #0
 800611c:	d0de      	beq.n	80060dc <_dtoa_r+0x57c>
 800611e:	f1b8 0f00 	cmp.w	r8, #0
 8006122:	d005      	beq.n	8006130 <_dtoa_r+0x5d0>
 8006124:	45a8      	cmp	r8, r5
 8006126:	d003      	beq.n	8006130 <_dtoa_r+0x5d0>
 8006128:	4641      	mov	r1, r8
 800612a:	4648      	mov	r0, r9
 800612c:	f000 fc50 	bl	80069d0 <_Bfree>
 8006130:	4629      	mov	r1, r5
 8006132:	4648      	mov	r0, r9
 8006134:	f000 fc4c 	bl	80069d0 <_Bfree>
 8006138:	e7d0      	b.n	80060dc <_dtoa_r+0x57c>
 800613a:	f8cd 8010 	str.w	r8, [sp, #16]
 800613e:	4633      	mov	r3, r6
 8006140:	461e      	mov	r6, r3
 8006142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006146:	2a39      	cmp	r2, #57	@ 0x39
 8006148:	d106      	bne.n	8006158 <_dtoa_r+0x5f8>
 800614a:	429f      	cmp	r7, r3
 800614c:	d1f8      	bne.n	8006140 <_dtoa_r+0x5e0>
 800614e:	9a04      	ldr	r2, [sp, #16]
 8006150:	3201      	adds	r2, #1
 8006152:	9204      	str	r2, [sp, #16]
 8006154:	2230      	movs	r2, #48	@ 0x30
 8006156:	703a      	strb	r2, [r7, #0]
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	3201      	adds	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e7bd      	b.n	80060dc <_dtoa_r+0x57c>
 8006160:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006164:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	f47f aeef 	bne.w	8005f4e <_dtoa_r+0x3ee>
 8006170:	e710      	b.n	8005f94 <_dtoa_r+0x434>
 8006172:	bf00      	nop
 8006174:	08036038 	.word	0x08036038
 8006178:	08036010 	.word	0x08036010
 800617c:	9908      	ldr	r1, [sp, #32]
 800617e:	2900      	cmp	r1, #0
 8006180:	f000 80e3 	beq.w	800634a <_dtoa_r+0x7ea>
 8006184:	9907      	ldr	r1, [sp, #28]
 8006186:	2901      	cmp	r1, #1
 8006188:	f300 80c8 	bgt.w	800631c <_dtoa_r+0x7bc>
 800618c:	2d00      	cmp	r5, #0
 800618e:	f000 80c1 	beq.w	8006314 <_dtoa_r+0x7b4>
 8006192:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006196:	9e05      	ldr	r6, [sp, #20]
 8006198:	461c      	mov	r4, r3
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	9b05      	ldr	r3, [sp, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	2101      	movs	r1, #1
 80061a6:	4413      	add	r3, r2
 80061a8:	4648      	mov	r0, r9
 80061aa:	9306      	str	r3, [sp, #24]
 80061ac:	f000 fcc4 	bl	8006b38 <__i2b>
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	4605      	mov	r5, r0
 80061b4:	b166      	cbz	r6, 80061d0 <_dtoa_r+0x670>
 80061b6:	9a06      	ldr	r2, [sp, #24]
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	dd09      	ble.n	80061d0 <_dtoa_r+0x670>
 80061bc:	42b2      	cmp	r2, r6
 80061be:	9905      	ldr	r1, [sp, #20]
 80061c0:	bfa8      	it	ge
 80061c2:	4632      	movge	r2, r6
 80061c4:	1a89      	subs	r1, r1, r2
 80061c6:	9105      	str	r1, [sp, #20]
 80061c8:	9906      	ldr	r1, [sp, #24]
 80061ca:	1ab6      	subs	r6, r6, r2
 80061cc:	1a8a      	subs	r2, r1, r2
 80061ce:	9206      	str	r2, [sp, #24]
 80061d0:	b1fb      	cbz	r3, 8006212 <_dtoa_r+0x6b2>
 80061d2:	9a08      	ldr	r2, [sp, #32]
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	f000 80bc 	beq.w	8006352 <_dtoa_r+0x7f2>
 80061da:	b19c      	cbz	r4, 8006204 <_dtoa_r+0x6a4>
 80061dc:	4629      	mov	r1, r5
 80061de:	4622      	mov	r2, r4
 80061e0:	4648      	mov	r0, r9
 80061e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061e4:	f000 fd68 	bl	8006cb8 <__pow5mult>
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	4601      	mov	r1, r0
 80061ec:	4605      	mov	r5, r0
 80061ee:	4648      	mov	r0, r9
 80061f0:	f000 fcb8 	bl	8006b64 <__multiply>
 80061f4:	9901      	ldr	r1, [sp, #4]
 80061f6:	9004      	str	r0, [sp, #16]
 80061f8:	4648      	mov	r0, r9
 80061fa:	f000 fbe9 	bl	80069d0 <_Bfree>
 80061fe:	9a04      	ldr	r2, [sp, #16]
 8006200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006202:	9201      	str	r2, [sp, #4]
 8006204:	1b1a      	subs	r2, r3, r4
 8006206:	d004      	beq.n	8006212 <_dtoa_r+0x6b2>
 8006208:	9901      	ldr	r1, [sp, #4]
 800620a:	4648      	mov	r0, r9
 800620c:	f000 fd54 	bl	8006cb8 <__pow5mult>
 8006210:	9001      	str	r0, [sp, #4]
 8006212:	2101      	movs	r1, #1
 8006214:	4648      	mov	r0, r9
 8006216:	f000 fc8f 	bl	8006b38 <__i2b>
 800621a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800621c:	4604      	mov	r4, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 81d0 	beq.w	80065c4 <_dtoa_r+0xa64>
 8006224:	461a      	mov	r2, r3
 8006226:	4601      	mov	r1, r0
 8006228:	4648      	mov	r0, r9
 800622a:	f000 fd45 	bl	8006cb8 <__pow5mult>
 800622e:	9b07      	ldr	r3, [sp, #28]
 8006230:	2b01      	cmp	r3, #1
 8006232:	4604      	mov	r4, r0
 8006234:	f300 8095 	bgt.w	8006362 <_dtoa_r+0x802>
 8006238:	9b02      	ldr	r3, [sp, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 808b 	bne.w	8006356 <_dtoa_r+0x7f6>
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006246:	2a00      	cmp	r2, #0
 8006248:	f040 8087 	bne.w	800635a <_dtoa_r+0x7fa>
 800624c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006250:	0d12      	lsrs	r2, r2, #20
 8006252:	0512      	lsls	r2, r2, #20
 8006254:	2a00      	cmp	r2, #0
 8006256:	f000 8082 	beq.w	800635e <_dtoa_r+0x7fe>
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	3301      	adds	r3, #1
 800625e:	9305      	str	r3, [sp, #20]
 8006260:	9b06      	ldr	r3, [sp, #24]
 8006262:	3301      	adds	r3, #1
 8006264:	9306      	str	r3, [sp, #24]
 8006266:	2301      	movs	r3, #1
 8006268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800626a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 81af 	beq.w	80065d0 <_dtoa_r+0xa70>
 8006272:	6922      	ldr	r2, [r4, #16]
 8006274:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006278:	6910      	ldr	r0, [r2, #16]
 800627a:	f000 fc11 	bl	8006aa0 <__hi0bits>
 800627e:	f1c0 0020 	rsb	r0, r0, #32
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	4418      	add	r0, r3
 8006286:	f010 001f 	ands.w	r0, r0, #31
 800628a:	d076      	beq.n	800637a <_dtoa_r+0x81a>
 800628c:	f1c0 0220 	rsb	r2, r0, #32
 8006290:	2a04      	cmp	r2, #4
 8006292:	dd69      	ble.n	8006368 <_dtoa_r+0x808>
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	f1c0 001c 	rsb	r0, r0, #28
 800629a:	4403      	add	r3, r0
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	9b06      	ldr	r3, [sp, #24]
 80062a0:	4406      	add	r6, r0
 80062a2:	4403      	add	r3, r0
 80062a4:	9306      	str	r3, [sp, #24]
 80062a6:	9b05      	ldr	r3, [sp, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dd05      	ble.n	80062b8 <_dtoa_r+0x758>
 80062ac:	9901      	ldr	r1, [sp, #4]
 80062ae:	461a      	mov	r2, r3
 80062b0:	4648      	mov	r0, r9
 80062b2:	f000 fd5b 	bl	8006d6c <__lshift>
 80062b6:	9001      	str	r0, [sp, #4]
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dd05      	ble.n	80062ca <_dtoa_r+0x76a>
 80062be:	4621      	mov	r1, r4
 80062c0:	461a      	mov	r2, r3
 80062c2:	4648      	mov	r0, r9
 80062c4:	f000 fd52 	bl	8006d6c <__lshift>
 80062c8:	4604      	mov	r4, r0
 80062ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d056      	beq.n	800637e <_dtoa_r+0x81e>
 80062d0:	9801      	ldr	r0, [sp, #4]
 80062d2:	4621      	mov	r1, r4
 80062d4:	f000 fdb6 	bl	8006e44 <__mcmp>
 80062d8:	2800      	cmp	r0, #0
 80062da:	da50      	bge.n	800637e <_dtoa_r+0x81e>
 80062dc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	9901      	ldr	r1, [sp, #4]
 80062e4:	2300      	movs	r3, #0
 80062e6:	220a      	movs	r2, #10
 80062e8:	4648      	mov	r0, r9
 80062ea:	f000 fb93 	bl	8006a14 <__multadd>
 80062ee:	9b08      	ldr	r3, [sp, #32]
 80062f0:	9001      	str	r0, [sp, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 816e 	beq.w	80065d4 <_dtoa_r+0xa74>
 80062f8:	4629      	mov	r1, r5
 80062fa:	2300      	movs	r3, #0
 80062fc:	220a      	movs	r2, #10
 80062fe:	4648      	mov	r0, r9
 8006300:	f000 fb88 	bl	8006a14 <__multadd>
 8006304:	f1bb 0f00 	cmp.w	fp, #0
 8006308:	4605      	mov	r5, r0
 800630a:	dc64      	bgt.n	80063d6 <_dtoa_r+0x876>
 800630c:	9b07      	ldr	r3, [sp, #28]
 800630e:	2b02      	cmp	r3, #2
 8006310:	dc3e      	bgt.n	8006390 <_dtoa_r+0x830>
 8006312:	e060      	b.n	80063d6 <_dtoa_r+0x876>
 8006314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006316:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800631a:	e73c      	b.n	8006196 <_dtoa_r+0x636>
 800631c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8006320:	42a3      	cmp	r3, r4
 8006322:	bfbf      	itttt	lt
 8006324:	1ae2      	sublt	r2, r4, r3
 8006326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006328:	189b      	addlt	r3, r3, r2
 800632a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800632c:	bfae      	itee	ge
 800632e:	1b1c      	subge	r4, r3, r4
 8006330:	4623      	movlt	r3, r4
 8006332:	2400      	movlt	r4, #0
 8006334:	f1ba 0f00 	cmp.w	sl, #0
 8006338:	bfb5      	itete	lt
 800633a:	9a05      	ldrlt	r2, [sp, #20]
 800633c:	9e05      	ldrge	r6, [sp, #20]
 800633e:	eba2 060a 	sublt.w	r6, r2, sl
 8006342:	4652      	movge	r2, sl
 8006344:	bfb8      	it	lt
 8006346:	2200      	movlt	r2, #0
 8006348:	e727      	b.n	800619a <_dtoa_r+0x63a>
 800634a:	9e05      	ldr	r6, [sp, #20]
 800634c:	9d08      	ldr	r5, [sp, #32]
 800634e:	461c      	mov	r4, r3
 8006350:	e730      	b.n	80061b4 <_dtoa_r+0x654>
 8006352:	461a      	mov	r2, r3
 8006354:	e758      	b.n	8006208 <_dtoa_r+0x6a8>
 8006356:	2300      	movs	r3, #0
 8006358:	e786      	b.n	8006268 <_dtoa_r+0x708>
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	e784      	b.n	8006268 <_dtoa_r+0x708>
 800635e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006360:	e783      	b.n	800626a <_dtoa_r+0x70a>
 8006362:	2300      	movs	r3, #0
 8006364:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006366:	e784      	b.n	8006272 <_dtoa_r+0x712>
 8006368:	d09d      	beq.n	80062a6 <_dtoa_r+0x746>
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	321c      	adds	r2, #28
 800636e:	4413      	add	r3, r2
 8006370:	9305      	str	r3, [sp, #20]
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	4416      	add	r6, r2
 8006376:	4413      	add	r3, r2
 8006378:	e794      	b.n	80062a4 <_dtoa_r+0x744>
 800637a:	4602      	mov	r2, r0
 800637c:	e7f5      	b.n	800636a <_dtoa_r+0x80a>
 800637e:	f1ba 0f00 	cmp.w	sl, #0
 8006382:	f8cd 8010 	str.w	r8, [sp, #16]
 8006386:	46d3      	mov	fp, sl
 8006388:	dc21      	bgt.n	80063ce <_dtoa_r+0x86e>
 800638a:	9b07      	ldr	r3, [sp, #28]
 800638c:	2b02      	cmp	r3, #2
 800638e:	dd1e      	ble.n	80063ce <_dtoa_r+0x86e>
 8006390:	f1bb 0f00 	cmp.w	fp, #0
 8006394:	f47f aeb7 	bne.w	8006106 <_dtoa_r+0x5a6>
 8006398:	4621      	mov	r1, r4
 800639a:	465b      	mov	r3, fp
 800639c:	2205      	movs	r2, #5
 800639e:	4648      	mov	r0, r9
 80063a0:	f000 fb38 	bl	8006a14 <__multadd>
 80063a4:	4601      	mov	r1, r0
 80063a6:	4604      	mov	r4, r0
 80063a8:	9801      	ldr	r0, [sp, #4]
 80063aa:	f000 fd4b 	bl	8006e44 <__mcmp>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f77f aea9 	ble.w	8006106 <_dtoa_r+0x5a6>
 80063b4:	463e      	mov	r6, r7
 80063b6:	2331      	movs	r3, #49	@ 0x31
 80063b8:	f806 3b01 	strb.w	r3, [r6], #1
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	3301      	adds	r3, #1
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	e6a4      	b.n	800610e <_dtoa_r+0x5ae>
 80063c4:	f8cd 8010 	str.w	r8, [sp, #16]
 80063c8:	4654      	mov	r4, sl
 80063ca:	4625      	mov	r5, r4
 80063cc:	e7f2      	b.n	80063b4 <_dtoa_r+0x854>
 80063ce:	9b08      	ldr	r3, [sp, #32]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8103 	beq.w	80065dc <_dtoa_r+0xa7c>
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	dd05      	ble.n	80063e6 <_dtoa_r+0x886>
 80063da:	4629      	mov	r1, r5
 80063dc:	4632      	mov	r2, r6
 80063de:	4648      	mov	r0, r9
 80063e0:	f000 fcc4 	bl	8006d6c <__lshift>
 80063e4:	4605      	mov	r5, r0
 80063e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d058      	beq.n	800649e <_dtoa_r+0x93e>
 80063ec:	6869      	ldr	r1, [r5, #4]
 80063ee:	4648      	mov	r0, r9
 80063f0:	f000 faae 	bl	8006950 <_Balloc>
 80063f4:	4606      	mov	r6, r0
 80063f6:	b928      	cbnz	r0, 8006404 <_dtoa_r+0x8a4>
 80063f8:	4b82      	ldr	r3, [pc, #520]	@ (8006604 <_dtoa_r+0xaa4>)
 80063fa:	4602      	mov	r2, r0
 80063fc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006400:	f7ff bbc7 	b.w	8005b92 <_dtoa_r+0x32>
 8006404:	692a      	ldr	r2, [r5, #16]
 8006406:	3202      	adds	r2, #2
 8006408:	0092      	lsls	r2, r2, #2
 800640a:	f105 010c 	add.w	r1, r5, #12
 800640e:	300c      	adds	r0, #12
 8006410:	f7ff faf1 	bl	80059f6 <memcpy>
 8006414:	2201      	movs	r2, #1
 8006416:	4631      	mov	r1, r6
 8006418:	4648      	mov	r0, r9
 800641a:	f000 fca7 	bl	8006d6c <__lshift>
 800641e:	1c7b      	adds	r3, r7, #1
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	eb07 030b 	add.w	r3, r7, fp
 8006426:	9309      	str	r3, [sp, #36]	@ 0x24
 8006428:	9b02      	ldr	r3, [sp, #8]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	46a8      	mov	r8, r5
 8006430:	9308      	str	r3, [sp, #32]
 8006432:	4605      	mov	r5, r0
 8006434:	9b05      	ldr	r3, [sp, #20]
 8006436:	9801      	ldr	r0, [sp, #4]
 8006438:	4621      	mov	r1, r4
 800643a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800643e:	f7ff fb07 	bl	8005a50 <quorem>
 8006442:	4641      	mov	r1, r8
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800644a:	9801      	ldr	r0, [sp, #4]
 800644c:	f000 fcfa 	bl	8006e44 <__mcmp>
 8006450:	462a      	mov	r2, r5
 8006452:	9006      	str	r0, [sp, #24]
 8006454:	4621      	mov	r1, r4
 8006456:	4648      	mov	r0, r9
 8006458:	f000 fd10 	bl	8006e7c <__mdiff>
 800645c:	68c2      	ldr	r2, [r0, #12]
 800645e:	4606      	mov	r6, r0
 8006460:	b9fa      	cbnz	r2, 80064a2 <_dtoa_r+0x942>
 8006462:	4601      	mov	r1, r0
 8006464:	9801      	ldr	r0, [sp, #4]
 8006466:	f000 fced 	bl	8006e44 <__mcmp>
 800646a:	4602      	mov	r2, r0
 800646c:	4631      	mov	r1, r6
 800646e:	4648      	mov	r0, r9
 8006470:	920a      	str	r2, [sp, #40]	@ 0x28
 8006472:	f000 faad 	bl	80069d0 <_Bfree>
 8006476:	9b07      	ldr	r3, [sp, #28]
 8006478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800647a:	9e05      	ldr	r6, [sp, #20]
 800647c:	ea43 0102 	orr.w	r1, r3, r2
 8006480:	9b08      	ldr	r3, [sp, #32]
 8006482:	4319      	orrs	r1, r3
 8006484:	d10f      	bne.n	80064a6 <_dtoa_r+0x946>
 8006486:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800648a:	d028      	beq.n	80064de <_dtoa_r+0x97e>
 800648c:	9b06      	ldr	r3, [sp, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	dd02      	ble.n	8006498 <_dtoa_r+0x938>
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006498:	f88b a000 	strb.w	sl, [fp]
 800649c:	e639      	b.n	8006112 <_dtoa_r+0x5b2>
 800649e:	4628      	mov	r0, r5
 80064a0:	e7bd      	b.n	800641e <_dtoa_r+0x8be>
 80064a2:	2201      	movs	r2, #1
 80064a4:	e7e2      	b.n	800646c <_dtoa_r+0x90c>
 80064a6:	9b06      	ldr	r3, [sp, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db04      	blt.n	80064b6 <_dtoa_r+0x956>
 80064ac:	9907      	ldr	r1, [sp, #28]
 80064ae:	430b      	orrs	r3, r1
 80064b0:	9908      	ldr	r1, [sp, #32]
 80064b2:	430b      	orrs	r3, r1
 80064b4:	d120      	bne.n	80064f8 <_dtoa_r+0x998>
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	ddee      	ble.n	8006498 <_dtoa_r+0x938>
 80064ba:	9901      	ldr	r1, [sp, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	4648      	mov	r0, r9
 80064c0:	f000 fc54 	bl	8006d6c <__lshift>
 80064c4:	4621      	mov	r1, r4
 80064c6:	9001      	str	r0, [sp, #4]
 80064c8:	f000 fcbc 	bl	8006e44 <__mcmp>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	dc03      	bgt.n	80064d8 <_dtoa_r+0x978>
 80064d0:	d1e2      	bne.n	8006498 <_dtoa_r+0x938>
 80064d2:	f01a 0f01 	tst.w	sl, #1
 80064d6:	d0df      	beq.n	8006498 <_dtoa_r+0x938>
 80064d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80064dc:	d1d9      	bne.n	8006492 <_dtoa_r+0x932>
 80064de:	2339      	movs	r3, #57	@ 0x39
 80064e0:	f88b 3000 	strb.w	r3, [fp]
 80064e4:	4633      	mov	r3, r6
 80064e6:	461e      	mov	r6, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064ee:	2a39      	cmp	r2, #57	@ 0x39
 80064f0:	d053      	beq.n	800659a <_dtoa_r+0xa3a>
 80064f2:	3201      	adds	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	e60c      	b.n	8006112 <_dtoa_r+0x5b2>
 80064f8:	2a00      	cmp	r2, #0
 80064fa:	dd07      	ble.n	800650c <_dtoa_r+0x9ac>
 80064fc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006500:	d0ed      	beq.n	80064de <_dtoa_r+0x97e>
 8006502:	f10a 0301 	add.w	r3, sl, #1
 8006506:	f88b 3000 	strb.w	r3, [fp]
 800650a:	e602      	b.n	8006112 <_dtoa_r+0x5b2>
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	9a05      	ldr	r2, [sp, #20]
 8006510:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006516:	4293      	cmp	r3, r2
 8006518:	d029      	beq.n	800656e <_dtoa_r+0xa0e>
 800651a:	9901      	ldr	r1, [sp, #4]
 800651c:	2300      	movs	r3, #0
 800651e:	220a      	movs	r2, #10
 8006520:	4648      	mov	r0, r9
 8006522:	f000 fa77 	bl	8006a14 <__multadd>
 8006526:	45a8      	cmp	r8, r5
 8006528:	9001      	str	r0, [sp, #4]
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	f04f 020a 	mov.w	r2, #10
 8006532:	4641      	mov	r1, r8
 8006534:	4648      	mov	r0, r9
 8006536:	d107      	bne.n	8006548 <_dtoa_r+0x9e8>
 8006538:	f000 fa6c 	bl	8006a14 <__multadd>
 800653c:	4680      	mov	r8, r0
 800653e:	4605      	mov	r5, r0
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	3301      	adds	r3, #1
 8006544:	9305      	str	r3, [sp, #20]
 8006546:	e775      	b.n	8006434 <_dtoa_r+0x8d4>
 8006548:	f000 fa64 	bl	8006a14 <__multadd>
 800654c:	4629      	mov	r1, r5
 800654e:	4680      	mov	r8, r0
 8006550:	2300      	movs	r3, #0
 8006552:	220a      	movs	r2, #10
 8006554:	4648      	mov	r0, r9
 8006556:	f000 fa5d 	bl	8006a14 <__multadd>
 800655a:	4605      	mov	r5, r0
 800655c:	e7f0      	b.n	8006540 <_dtoa_r+0x9e0>
 800655e:	f1bb 0f00 	cmp.w	fp, #0
 8006562:	bfcc      	ite	gt
 8006564:	465e      	movgt	r6, fp
 8006566:	2601      	movle	r6, #1
 8006568:	443e      	add	r6, r7
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	9901      	ldr	r1, [sp, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	4648      	mov	r0, r9
 8006574:	f000 fbfa 	bl	8006d6c <__lshift>
 8006578:	4621      	mov	r1, r4
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	f000 fc62 	bl	8006e44 <__mcmp>
 8006580:	2800      	cmp	r0, #0
 8006582:	dcaf      	bgt.n	80064e4 <_dtoa_r+0x984>
 8006584:	d102      	bne.n	800658c <_dtoa_r+0xa2c>
 8006586:	f01a 0f01 	tst.w	sl, #1
 800658a:	d1ab      	bne.n	80064e4 <_dtoa_r+0x984>
 800658c:	4633      	mov	r3, r6
 800658e:	461e      	mov	r6, r3
 8006590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006594:	2a30      	cmp	r2, #48	@ 0x30
 8006596:	d0fa      	beq.n	800658e <_dtoa_r+0xa2e>
 8006598:	e5bb      	b.n	8006112 <_dtoa_r+0x5b2>
 800659a:	429f      	cmp	r7, r3
 800659c:	d1a3      	bne.n	80064e6 <_dtoa_r+0x986>
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	3301      	adds	r3, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	2331      	movs	r3, #49	@ 0x31
 80065a6:	703b      	strb	r3, [r7, #0]
 80065a8:	e5b3      	b.n	8006112 <_dtoa_r+0x5b2>
 80065aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065ac:	4f16      	ldr	r7, [pc, #88]	@ (8006608 <_dtoa_r+0xaa8>)
 80065ae:	b11b      	cbz	r3, 80065b8 <_dtoa_r+0xa58>
 80065b0:	f107 0308 	add.w	r3, r7, #8
 80065b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	4638      	mov	r0, r7
 80065ba:	b011      	add	sp, #68	@ 0x44
 80065bc:	ecbd 8b02 	vpop	{d8}
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	9b07      	ldr	r3, [sp, #28]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	f77f ae36 	ble.w	8006238 <_dtoa_r+0x6d8>
 80065cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d0:	2001      	movs	r0, #1
 80065d2:	e656      	b.n	8006282 <_dtoa_r+0x722>
 80065d4:	f1bb 0f00 	cmp.w	fp, #0
 80065d8:	f77f aed7 	ble.w	800638a <_dtoa_r+0x82a>
 80065dc:	463e      	mov	r6, r7
 80065de:	9801      	ldr	r0, [sp, #4]
 80065e0:	4621      	mov	r1, r4
 80065e2:	f7ff fa35 	bl	8005a50 <quorem>
 80065e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80065ea:	f806 ab01 	strb.w	sl, [r6], #1
 80065ee:	1bf2      	subs	r2, r6, r7
 80065f0:	4593      	cmp	fp, r2
 80065f2:	ddb4      	ble.n	800655e <_dtoa_r+0x9fe>
 80065f4:	9901      	ldr	r1, [sp, #4]
 80065f6:	2300      	movs	r3, #0
 80065f8:	220a      	movs	r2, #10
 80065fa:	4648      	mov	r0, r9
 80065fc:	f000 fa0a 	bl	8006a14 <__multadd>
 8006600:	9001      	str	r0, [sp, #4]
 8006602:	e7ec      	b.n	80065de <_dtoa_r+0xa7e>
 8006604:	08035f82 	.word	0x08035f82
 8006608:	08035f06 	.word	0x08035f06

0800660c <_free_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4605      	mov	r5, r0
 8006610:	2900      	cmp	r1, #0
 8006612:	d041      	beq.n	8006698 <_free_r+0x8c>
 8006614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006618:	1f0c      	subs	r4, r1, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	bfb8      	it	lt
 800661e:	18e4      	addlt	r4, r4, r3
 8006620:	f7ff f884 	bl	800572c <__malloc_lock>
 8006624:	4a1d      	ldr	r2, [pc, #116]	@ (800669c <_free_r+0x90>)
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	b933      	cbnz	r3, 8006638 <_free_r+0x2c>
 800662a:	6063      	str	r3, [r4, #4]
 800662c:	6014      	str	r4, [r2, #0]
 800662e:	4628      	mov	r0, r5
 8006630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006634:	f7ff b880 	b.w	8005738 <__malloc_unlock>
 8006638:	42a3      	cmp	r3, r4
 800663a:	d908      	bls.n	800664e <_free_r+0x42>
 800663c:	6820      	ldr	r0, [r4, #0]
 800663e:	1821      	adds	r1, r4, r0
 8006640:	428b      	cmp	r3, r1
 8006642:	bf01      	itttt	eq
 8006644:	6819      	ldreq	r1, [r3, #0]
 8006646:	685b      	ldreq	r3, [r3, #4]
 8006648:	1809      	addeq	r1, r1, r0
 800664a:	6021      	streq	r1, [r4, #0]
 800664c:	e7ed      	b.n	800662a <_free_r+0x1e>
 800664e:	461a      	mov	r2, r3
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	b10b      	cbz	r3, 8006658 <_free_r+0x4c>
 8006654:	42a3      	cmp	r3, r4
 8006656:	d9fa      	bls.n	800664e <_free_r+0x42>
 8006658:	6811      	ldr	r1, [r2, #0]
 800665a:	1850      	adds	r0, r2, r1
 800665c:	42a0      	cmp	r0, r4
 800665e:	d10b      	bne.n	8006678 <_free_r+0x6c>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	4401      	add	r1, r0
 8006664:	1850      	adds	r0, r2, r1
 8006666:	4283      	cmp	r3, r0
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	d1e0      	bne.n	800662e <_free_r+0x22>
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	6053      	str	r3, [r2, #4]
 8006672:	4408      	add	r0, r1
 8006674:	6010      	str	r0, [r2, #0]
 8006676:	e7da      	b.n	800662e <_free_r+0x22>
 8006678:	d902      	bls.n	8006680 <_free_r+0x74>
 800667a:	230c      	movs	r3, #12
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	e7d6      	b.n	800662e <_free_r+0x22>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	1821      	adds	r1, r4, r0
 8006684:	428b      	cmp	r3, r1
 8006686:	bf04      	itt	eq
 8006688:	6819      	ldreq	r1, [r3, #0]
 800668a:	685b      	ldreq	r3, [r3, #4]
 800668c:	6063      	str	r3, [r4, #4]
 800668e:	bf04      	itt	eq
 8006690:	1809      	addeq	r1, r1, r0
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	6054      	str	r4, [r2, #4]
 8006696:	e7ca      	b.n	800662e <_free_r+0x22>
 8006698:	bd38      	pop	{r3, r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	20001d84 	.word	0x20001d84

080066a0 <__ssputs_r>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	688e      	ldr	r6, [r1, #8]
 80066a6:	461f      	mov	r7, r3
 80066a8:	42be      	cmp	r6, r7
 80066aa:	680b      	ldr	r3, [r1, #0]
 80066ac:	4682      	mov	sl, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	4690      	mov	r8, r2
 80066b2:	d82d      	bhi.n	8006710 <__ssputs_r+0x70>
 80066b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066bc:	d026      	beq.n	800670c <__ssputs_r+0x6c>
 80066be:	6965      	ldr	r5, [r4, #20]
 80066c0:	6909      	ldr	r1, [r1, #16]
 80066c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066c6:	eba3 0901 	sub.w	r9, r3, r1
 80066ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066ce:	1c7b      	adds	r3, r7, #1
 80066d0:	444b      	add	r3, r9
 80066d2:	106d      	asrs	r5, r5, #1
 80066d4:	429d      	cmp	r5, r3
 80066d6:	bf38      	it	cc
 80066d8:	461d      	movcc	r5, r3
 80066da:	0553      	lsls	r3, r2, #21
 80066dc:	d527      	bpl.n	800672e <__ssputs_r+0x8e>
 80066de:	4629      	mov	r1, r5
 80066e0:	f7fe fd6a 	bl	80051b8 <_malloc_r>
 80066e4:	4606      	mov	r6, r0
 80066e6:	b360      	cbz	r0, 8006742 <__ssputs_r+0xa2>
 80066e8:	6921      	ldr	r1, [r4, #16]
 80066ea:	464a      	mov	r2, r9
 80066ec:	f7ff f983 	bl	80059f6 <memcpy>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	6126      	str	r6, [r4, #16]
 80066fe:	6165      	str	r5, [r4, #20]
 8006700:	444e      	add	r6, r9
 8006702:	eba5 0509 	sub.w	r5, r5, r9
 8006706:	6026      	str	r6, [r4, #0]
 8006708:	60a5      	str	r5, [r4, #8]
 800670a:	463e      	mov	r6, r7
 800670c:	42be      	cmp	r6, r7
 800670e:	d900      	bls.n	8006712 <__ssputs_r+0x72>
 8006710:	463e      	mov	r6, r7
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	4632      	mov	r2, r6
 8006716:	4641      	mov	r1, r8
 8006718:	f000 fcfa 	bl	8007110 <memmove>
 800671c:	68a3      	ldr	r3, [r4, #8]
 800671e:	1b9b      	subs	r3, r3, r6
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	4433      	add	r3, r6
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	2000      	movs	r0, #0
 800672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672e:	462a      	mov	r2, r5
 8006730:	f7ff f8cc 	bl	80058cc <_realloc_r>
 8006734:	4606      	mov	r6, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	d1e0      	bne.n	80066fc <__ssputs_r+0x5c>
 800673a:	6921      	ldr	r1, [r4, #16]
 800673c:	4650      	mov	r0, sl
 800673e:	f7ff ff65 	bl	800660c <_free_r>
 8006742:	230c      	movs	r3, #12
 8006744:	f8ca 3000 	str.w	r3, [sl]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006754:	e7e9      	b.n	800672a <__ssputs_r+0x8a>
	...

08006758 <_svfiprintf_r>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	4698      	mov	r8, r3
 800675e:	898b      	ldrh	r3, [r1, #12]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	b09d      	sub	sp, #116	@ 0x74
 8006764:	4607      	mov	r7, r0
 8006766:	460d      	mov	r5, r1
 8006768:	4614      	mov	r4, r2
 800676a:	d510      	bpl.n	800678e <_svfiprintf_r+0x36>
 800676c:	690b      	ldr	r3, [r1, #16]
 800676e:	b973      	cbnz	r3, 800678e <_svfiprintf_r+0x36>
 8006770:	2140      	movs	r1, #64	@ 0x40
 8006772:	f7fe fd21 	bl	80051b8 <_malloc_r>
 8006776:	6028      	str	r0, [r5, #0]
 8006778:	6128      	str	r0, [r5, #16]
 800677a:	b930      	cbnz	r0, 800678a <_svfiprintf_r+0x32>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006784:	b01d      	add	sp, #116	@ 0x74
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	2340      	movs	r3, #64	@ 0x40
 800678c:	616b      	str	r3, [r5, #20]
 800678e:	2300      	movs	r3, #0
 8006790:	9309      	str	r3, [sp, #36]	@ 0x24
 8006792:	2320      	movs	r3, #32
 8006794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006798:	f8cd 800c 	str.w	r8, [sp, #12]
 800679c:	2330      	movs	r3, #48	@ 0x30
 800679e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800693c <_svfiprintf_r+0x1e4>
 80067a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067a6:	f04f 0901 	mov.w	r9, #1
 80067aa:	4623      	mov	r3, r4
 80067ac:	469a      	mov	sl, r3
 80067ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b2:	b10a      	cbz	r2, 80067b8 <_svfiprintf_r+0x60>
 80067b4:	2a25      	cmp	r2, #37	@ 0x25
 80067b6:	d1f9      	bne.n	80067ac <_svfiprintf_r+0x54>
 80067b8:	ebba 0b04 	subs.w	fp, sl, r4
 80067bc:	d00b      	beq.n	80067d6 <_svfiprintf_r+0x7e>
 80067be:	465b      	mov	r3, fp
 80067c0:	4622      	mov	r2, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	4638      	mov	r0, r7
 80067c6:	f7ff ff6b 	bl	80066a0 <__ssputs_r>
 80067ca:	3001      	adds	r0, #1
 80067cc:	f000 80a7 	beq.w	800691e <_svfiprintf_r+0x1c6>
 80067d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d2:	445a      	add	r2, fp
 80067d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067d6:	f89a 3000 	ldrb.w	r3, [sl]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 809f 	beq.w	800691e <_svfiprintf_r+0x1c6>
 80067e0:	2300      	movs	r3, #0
 80067e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ea:	f10a 0a01 	add.w	sl, sl, #1
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	9307      	str	r3, [sp, #28]
 80067f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80067f8:	4654      	mov	r4, sl
 80067fa:	2205      	movs	r2, #5
 80067fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006800:	484e      	ldr	r0, [pc, #312]	@ (800693c <_svfiprintf_r+0x1e4>)
 8006802:	f7f9 fd1d 	bl	8000240 <memchr>
 8006806:	9a04      	ldr	r2, [sp, #16]
 8006808:	b9d8      	cbnz	r0, 8006842 <_svfiprintf_r+0xea>
 800680a:	06d0      	lsls	r0, r2, #27
 800680c:	bf44      	itt	mi
 800680e:	2320      	movmi	r3, #32
 8006810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006814:	0711      	lsls	r1, r2, #28
 8006816:	bf44      	itt	mi
 8006818:	232b      	movmi	r3, #43	@ 0x2b
 800681a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800681e:	f89a 3000 	ldrb.w	r3, [sl]
 8006822:	2b2a      	cmp	r3, #42	@ 0x2a
 8006824:	d015      	beq.n	8006852 <_svfiprintf_r+0xfa>
 8006826:	9a07      	ldr	r2, [sp, #28]
 8006828:	4654      	mov	r4, sl
 800682a:	2000      	movs	r0, #0
 800682c:	f04f 0c0a 	mov.w	ip, #10
 8006830:	4621      	mov	r1, r4
 8006832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006836:	3b30      	subs	r3, #48	@ 0x30
 8006838:	2b09      	cmp	r3, #9
 800683a:	d94b      	bls.n	80068d4 <_svfiprintf_r+0x17c>
 800683c:	b1b0      	cbz	r0, 800686c <_svfiprintf_r+0x114>
 800683e:	9207      	str	r2, [sp, #28]
 8006840:	e014      	b.n	800686c <_svfiprintf_r+0x114>
 8006842:	eba0 0308 	sub.w	r3, r0, r8
 8006846:	fa09 f303 	lsl.w	r3, r9, r3
 800684a:	4313      	orrs	r3, r2
 800684c:	9304      	str	r3, [sp, #16]
 800684e:	46a2      	mov	sl, r4
 8006850:	e7d2      	b.n	80067f8 <_svfiprintf_r+0xa0>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	1d19      	adds	r1, r3, #4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	9103      	str	r1, [sp, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfbb      	ittet	lt
 800685e:	425b      	neglt	r3, r3
 8006860:	f042 0202 	orrlt.w	r2, r2, #2
 8006864:	9307      	strge	r3, [sp, #28]
 8006866:	9307      	strlt	r3, [sp, #28]
 8006868:	bfb8      	it	lt
 800686a:	9204      	strlt	r2, [sp, #16]
 800686c:	7823      	ldrb	r3, [r4, #0]
 800686e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006870:	d10a      	bne.n	8006888 <_svfiprintf_r+0x130>
 8006872:	7863      	ldrb	r3, [r4, #1]
 8006874:	2b2a      	cmp	r3, #42	@ 0x2a
 8006876:	d132      	bne.n	80068de <_svfiprintf_r+0x186>
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	1d1a      	adds	r2, r3, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	9203      	str	r2, [sp, #12]
 8006880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006884:	3402      	adds	r4, #2
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800694c <_svfiprintf_r+0x1f4>
 800688c:	7821      	ldrb	r1, [r4, #0]
 800688e:	2203      	movs	r2, #3
 8006890:	4650      	mov	r0, sl
 8006892:	f7f9 fcd5 	bl	8000240 <memchr>
 8006896:	b138      	cbz	r0, 80068a8 <_svfiprintf_r+0x150>
 8006898:	9b04      	ldr	r3, [sp, #16]
 800689a:	eba0 000a 	sub.w	r0, r0, sl
 800689e:	2240      	movs	r2, #64	@ 0x40
 80068a0:	4082      	lsls	r2, r0
 80068a2:	4313      	orrs	r3, r2
 80068a4:	3401      	adds	r4, #1
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ac:	4824      	ldr	r0, [pc, #144]	@ (8006940 <_svfiprintf_r+0x1e8>)
 80068ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068b2:	2206      	movs	r2, #6
 80068b4:	f7f9 fcc4 	bl	8000240 <memchr>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d036      	beq.n	800692a <_svfiprintf_r+0x1d2>
 80068bc:	4b21      	ldr	r3, [pc, #132]	@ (8006944 <_svfiprintf_r+0x1ec>)
 80068be:	bb1b      	cbnz	r3, 8006908 <_svfiprintf_r+0x1b0>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	3307      	adds	r3, #7
 80068c4:	f023 0307 	bic.w	r3, r3, #7
 80068c8:	3308      	adds	r3, #8
 80068ca:	9303      	str	r3, [sp, #12]
 80068cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ce:	4433      	add	r3, r6
 80068d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d2:	e76a      	b.n	80067aa <_svfiprintf_r+0x52>
 80068d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d8:	460c      	mov	r4, r1
 80068da:	2001      	movs	r0, #1
 80068dc:	e7a8      	b.n	8006830 <_svfiprintf_r+0xd8>
 80068de:	2300      	movs	r3, #0
 80068e0:	3401      	adds	r4, #1
 80068e2:	9305      	str	r3, [sp, #20]
 80068e4:	4619      	mov	r1, r3
 80068e6:	f04f 0c0a 	mov.w	ip, #10
 80068ea:	4620      	mov	r0, r4
 80068ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068f0:	3a30      	subs	r2, #48	@ 0x30
 80068f2:	2a09      	cmp	r2, #9
 80068f4:	d903      	bls.n	80068fe <_svfiprintf_r+0x1a6>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0c6      	beq.n	8006888 <_svfiprintf_r+0x130>
 80068fa:	9105      	str	r1, [sp, #20]
 80068fc:	e7c4      	b.n	8006888 <_svfiprintf_r+0x130>
 80068fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006902:	4604      	mov	r4, r0
 8006904:	2301      	movs	r3, #1
 8006906:	e7f0      	b.n	80068ea <_svfiprintf_r+0x192>
 8006908:	ab03      	add	r3, sp, #12
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	462a      	mov	r2, r5
 800690e:	4b0e      	ldr	r3, [pc, #56]	@ (8006948 <_svfiprintf_r+0x1f0>)
 8006910:	a904      	add	r1, sp, #16
 8006912:	4638      	mov	r0, r7
 8006914:	f7fe fa0c 	bl	8004d30 <_printf_float>
 8006918:	1c42      	adds	r2, r0, #1
 800691a:	4606      	mov	r6, r0
 800691c:	d1d6      	bne.n	80068cc <_svfiprintf_r+0x174>
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	065b      	lsls	r3, r3, #25
 8006922:	f53f af2d 	bmi.w	8006780 <_svfiprintf_r+0x28>
 8006926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006928:	e72c      	b.n	8006784 <_svfiprintf_r+0x2c>
 800692a:	ab03      	add	r3, sp, #12
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	462a      	mov	r2, r5
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <_svfiprintf_r+0x1f0>)
 8006932:	a904      	add	r1, sp, #16
 8006934:	4638      	mov	r0, r7
 8006936:	f7fe fd2d 	bl	8005394 <_printf_i>
 800693a:	e7ed      	b.n	8006918 <_svfiprintf_r+0x1c0>
 800693c:	08035f93 	.word	0x08035f93
 8006940:	08035f9d 	.word	0x08035f9d
 8006944:	08004d31 	.word	0x08004d31
 8006948:	080066a1 	.word	0x080066a1
 800694c:	08035f99 	.word	0x08035f99

08006950 <_Balloc>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	69c6      	ldr	r6, [r0, #28]
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
 8006958:	b976      	cbnz	r6, 8006978 <_Balloc+0x28>
 800695a:	2010      	movs	r0, #16
 800695c:	f7fc fb36 	bl	8002fcc <__wrap_malloc>
 8006960:	4602      	mov	r2, r0
 8006962:	61e0      	str	r0, [r4, #28]
 8006964:	b920      	cbnz	r0, 8006970 <_Balloc+0x20>
 8006966:	4b18      	ldr	r3, [pc, #96]	@ (80069c8 <_Balloc+0x78>)
 8006968:	4818      	ldr	r0, [pc, #96]	@ (80069cc <_Balloc+0x7c>)
 800696a:	216b      	movs	r1, #107	@ 0x6b
 800696c:	f7ff f852 	bl	8005a14 <__assert_func>
 8006970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006974:	6006      	str	r6, [r0, #0]
 8006976:	60c6      	str	r6, [r0, #12]
 8006978:	69e6      	ldr	r6, [r4, #28]
 800697a:	68f3      	ldr	r3, [r6, #12]
 800697c:	b183      	cbz	r3, 80069a0 <_Balloc+0x50>
 800697e:	69e3      	ldr	r3, [r4, #28]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006986:	b9b8      	cbnz	r0, 80069b8 <_Balloc+0x68>
 8006988:	2101      	movs	r1, #1
 800698a:	fa01 f605 	lsl.w	r6, r1, r5
 800698e:	1d72      	adds	r2, r6, #5
 8006990:	0092      	lsls	r2, r2, #2
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fc23 	bl	80071de <_calloc_r>
 8006998:	b160      	cbz	r0, 80069b4 <_Balloc+0x64>
 800699a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800699e:	e00e      	b.n	80069be <_Balloc+0x6e>
 80069a0:	2221      	movs	r2, #33	@ 0x21
 80069a2:	2104      	movs	r1, #4
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 fc1a 	bl	80071de <_calloc_r>
 80069aa:	69e3      	ldr	r3, [r4, #28]
 80069ac:	60f0      	str	r0, [r6, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e4      	bne.n	800697e <_Balloc+0x2e>
 80069b4:	2000      	movs	r0, #0
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	6802      	ldr	r2, [r0, #0]
 80069ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069be:	2300      	movs	r3, #0
 80069c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069c4:	e7f7      	b.n	80069b6 <_Balloc+0x66>
 80069c6:	bf00      	nop
 80069c8:	08035f13 	.word	0x08035f13
 80069cc:	08035fa4 	.word	0x08035fa4

080069d0 <_Bfree>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	69c6      	ldr	r6, [r0, #28]
 80069d4:	4605      	mov	r5, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	b976      	cbnz	r6, 80069f8 <_Bfree+0x28>
 80069da:	2010      	movs	r0, #16
 80069dc:	f7fc faf6 	bl	8002fcc <__wrap_malloc>
 80069e0:	4602      	mov	r2, r0
 80069e2:	61e8      	str	r0, [r5, #28]
 80069e4:	b920      	cbnz	r0, 80069f0 <_Bfree+0x20>
 80069e6:	4b09      	ldr	r3, [pc, #36]	@ (8006a0c <_Bfree+0x3c>)
 80069e8:	4809      	ldr	r0, [pc, #36]	@ (8006a10 <_Bfree+0x40>)
 80069ea:	218f      	movs	r1, #143	@ 0x8f
 80069ec:	f7ff f812 	bl	8005a14 <__assert_func>
 80069f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f4:	6006      	str	r6, [r0, #0]
 80069f6:	60c6      	str	r6, [r0, #12]
 80069f8:	b13c      	cbz	r4, 8006a0a <_Bfree+0x3a>
 80069fa:	69eb      	ldr	r3, [r5, #28]
 80069fc:	6862      	ldr	r2, [r4, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a04:	6021      	str	r1, [r4, #0]
 8006a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	08035f13 	.word	0x08035f13
 8006a10:	08035fa4 	.word	0x08035fa4

08006a14 <__multadd>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	690d      	ldr	r5, [r1, #16]
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	461e      	mov	r6, r3
 8006a20:	f101 0c14 	add.w	ip, r1, #20
 8006a24:	2000      	movs	r0, #0
 8006a26:	f8dc 3000 	ldr.w	r3, [ip]
 8006a2a:	b299      	uxth	r1, r3
 8006a2c:	fb02 6101 	mla	r1, r2, r1, r6
 8006a30:	0c1e      	lsrs	r6, r3, #16
 8006a32:	0c0b      	lsrs	r3, r1, #16
 8006a34:	fb02 3306 	mla	r3, r2, r6, r3
 8006a38:	b289      	uxth	r1, r1
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a40:	4285      	cmp	r5, r0
 8006a42:	f84c 1b04 	str.w	r1, [ip], #4
 8006a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a4a:	dcec      	bgt.n	8006a26 <__multadd+0x12>
 8006a4c:	b30e      	cbz	r6, 8006a92 <__multadd+0x7e>
 8006a4e:	68a3      	ldr	r3, [r4, #8]
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dc19      	bgt.n	8006a88 <__multadd+0x74>
 8006a54:	6861      	ldr	r1, [r4, #4]
 8006a56:	4638      	mov	r0, r7
 8006a58:	3101      	adds	r1, #1
 8006a5a:	f7ff ff79 	bl	8006950 <_Balloc>
 8006a5e:	4680      	mov	r8, r0
 8006a60:	b928      	cbnz	r0, 8006a6e <__multadd+0x5a>
 8006a62:	4602      	mov	r2, r0
 8006a64:	4b0c      	ldr	r3, [pc, #48]	@ (8006a98 <__multadd+0x84>)
 8006a66:	480d      	ldr	r0, [pc, #52]	@ (8006a9c <__multadd+0x88>)
 8006a68:	21ba      	movs	r1, #186	@ 0xba
 8006a6a:	f7fe ffd3 	bl	8005a14 <__assert_func>
 8006a6e:	6922      	ldr	r2, [r4, #16]
 8006a70:	3202      	adds	r2, #2
 8006a72:	f104 010c 	add.w	r1, r4, #12
 8006a76:	0092      	lsls	r2, r2, #2
 8006a78:	300c      	adds	r0, #12
 8006a7a:	f7fe ffbc 	bl	80059f6 <memcpy>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff ffa5 	bl	80069d0 <_Bfree>
 8006a86:	4644      	mov	r4, r8
 8006a88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	615e      	str	r6, [r3, #20]
 8006a90:	6125      	str	r5, [r4, #16]
 8006a92:	4620      	mov	r0, r4
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	08035f82 	.word	0x08035f82
 8006a9c:	08035fa4 	.word	0x08035fa4

08006aa0 <__hi0bits>:
 8006aa0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	bf36      	itet	cc
 8006aa8:	0403      	lslcc	r3, r0, #16
 8006aaa:	2000      	movcs	r0, #0
 8006aac:	2010      	movcc	r0, #16
 8006aae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab2:	bf3c      	itt	cc
 8006ab4:	021b      	lslcc	r3, r3, #8
 8006ab6:	3008      	addcc	r0, #8
 8006ab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006abc:	bf3c      	itt	cc
 8006abe:	011b      	lslcc	r3, r3, #4
 8006ac0:	3004      	addcc	r0, #4
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac6:	bf3c      	itt	cc
 8006ac8:	009b      	lslcc	r3, r3, #2
 8006aca:	3002      	addcc	r0, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	db05      	blt.n	8006adc <__hi0bits+0x3c>
 8006ad0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ad4:	f100 0001 	add.w	r0, r0, #1
 8006ad8:	bf08      	it	eq
 8006ada:	2020      	moveq	r0, #32
 8006adc:	4770      	bx	lr

08006ade <__lo0bits>:
 8006ade:	6803      	ldr	r3, [r0, #0]
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	f013 0007 	ands.w	r0, r3, #7
 8006ae6:	d00b      	beq.n	8006b00 <__lo0bits+0x22>
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	d421      	bmi.n	8006b30 <__lo0bits+0x52>
 8006aec:	0798      	lsls	r0, r3, #30
 8006aee:	bf49      	itett	mi
 8006af0:	085b      	lsrmi	r3, r3, #1
 8006af2:	089b      	lsrpl	r3, r3, #2
 8006af4:	2001      	movmi	r0, #1
 8006af6:	6013      	strmi	r3, [r2, #0]
 8006af8:	bf5c      	itt	pl
 8006afa:	6013      	strpl	r3, [r2, #0]
 8006afc:	2002      	movpl	r0, #2
 8006afe:	4770      	bx	lr
 8006b00:	b299      	uxth	r1, r3
 8006b02:	b909      	cbnz	r1, 8006b08 <__lo0bits+0x2a>
 8006b04:	0c1b      	lsrs	r3, r3, #16
 8006b06:	2010      	movs	r0, #16
 8006b08:	b2d9      	uxtb	r1, r3
 8006b0a:	b909      	cbnz	r1, 8006b10 <__lo0bits+0x32>
 8006b0c:	3008      	adds	r0, #8
 8006b0e:	0a1b      	lsrs	r3, r3, #8
 8006b10:	0719      	lsls	r1, r3, #28
 8006b12:	bf04      	itt	eq
 8006b14:	091b      	lsreq	r3, r3, #4
 8006b16:	3004      	addeq	r0, #4
 8006b18:	0799      	lsls	r1, r3, #30
 8006b1a:	bf04      	itt	eq
 8006b1c:	089b      	lsreq	r3, r3, #2
 8006b1e:	3002      	addeq	r0, #2
 8006b20:	07d9      	lsls	r1, r3, #31
 8006b22:	d403      	bmi.n	8006b2c <__lo0bits+0x4e>
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	f100 0001 	add.w	r0, r0, #1
 8006b2a:	d003      	beq.n	8006b34 <__lo0bits+0x56>
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	4770      	bx	lr
 8006b30:	2000      	movs	r0, #0
 8006b32:	4770      	bx	lr
 8006b34:	2020      	movs	r0, #32
 8006b36:	4770      	bx	lr

08006b38 <__i2b>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	f7ff ff07 	bl	8006950 <_Balloc>
 8006b42:	4602      	mov	r2, r0
 8006b44:	b928      	cbnz	r0, 8006b52 <__i2b+0x1a>
 8006b46:	4b05      	ldr	r3, [pc, #20]	@ (8006b5c <__i2b+0x24>)
 8006b48:	4805      	ldr	r0, [pc, #20]	@ (8006b60 <__i2b+0x28>)
 8006b4a:	f240 1145 	movw	r1, #325	@ 0x145
 8006b4e:	f7fe ff61 	bl	8005a14 <__assert_func>
 8006b52:	2301      	movs	r3, #1
 8006b54:	6144      	str	r4, [r0, #20]
 8006b56:	6103      	str	r3, [r0, #16]
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08035f82 	.word	0x08035f82
 8006b60:	08035fa4 	.word	0x08035fa4

08006b64 <__multiply>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	4614      	mov	r4, r2
 8006b6a:	690a      	ldr	r2, [r1, #16]
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	bfa8      	it	ge
 8006b72:	4623      	movge	r3, r4
 8006b74:	460f      	mov	r7, r1
 8006b76:	bfa4      	itt	ge
 8006b78:	460c      	movge	r4, r1
 8006b7a:	461f      	movge	r7, r3
 8006b7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b84:	68a3      	ldr	r3, [r4, #8]
 8006b86:	6861      	ldr	r1, [r4, #4]
 8006b88:	eb0a 0609 	add.w	r6, sl, r9
 8006b8c:	42b3      	cmp	r3, r6
 8006b8e:	b085      	sub	sp, #20
 8006b90:	bfb8      	it	lt
 8006b92:	3101      	addlt	r1, #1
 8006b94:	f7ff fedc 	bl	8006950 <_Balloc>
 8006b98:	b930      	cbnz	r0, 8006ba8 <__multiply+0x44>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	4b44      	ldr	r3, [pc, #272]	@ (8006cb0 <__multiply+0x14c>)
 8006b9e:	4845      	ldr	r0, [pc, #276]	@ (8006cb4 <__multiply+0x150>)
 8006ba0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ba4:	f7fe ff36 	bl	8005a14 <__assert_func>
 8006ba8:	f100 0514 	add.w	r5, r0, #20
 8006bac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4543      	cmp	r3, r8
 8006bb6:	d321      	bcc.n	8006bfc <__multiply+0x98>
 8006bb8:	f107 0114 	add.w	r1, r7, #20
 8006bbc:	f104 0214 	add.w	r2, r4, #20
 8006bc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006bc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006bc8:	9302      	str	r3, [sp, #8]
 8006bca:	1b13      	subs	r3, r2, r4
 8006bcc:	3b15      	subs	r3, #21
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	f104 0715 	add.w	r7, r4, #21
 8006bd8:	42ba      	cmp	r2, r7
 8006bda:	bf38      	it	cc
 8006bdc:	2304      	movcc	r3, #4
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	9b02      	ldr	r3, [sp, #8]
 8006be2:	9103      	str	r1, [sp, #12]
 8006be4:	428b      	cmp	r3, r1
 8006be6:	d80c      	bhi.n	8006c02 <__multiply+0x9e>
 8006be8:	2e00      	cmp	r6, #0
 8006bea:	dd03      	ble.n	8006bf4 <__multiply+0x90>
 8006bec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05b      	beq.n	8006cac <__multiply+0x148>
 8006bf4:	6106      	str	r6, [r0, #16]
 8006bf6:	b005      	add	sp, #20
 8006bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	f843 2b04 	str.w	r2, [r3], #4
 8006c00:	e7d8      	b.n	8006bb4 <__multiply+0x50>
 8006c02:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c06:	f1ba 0f00 	cmp.w	sl, #0
 8006c0a:	d024      	beq.n	8006c56 <__multiply+0xf2>
 8006c0c:	f104 0e14 	add.w	lr, r4, #20
 8006c10:	46a9      	mov	r9, r5
 8006c12:	f04f 0c00 	mov.w	ip, #0
 8006c16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c1a:	f8d9 3000 	ldr.w	r3, [r9]
 8006c1e:	fa1f fb87 	uxth.w	fp, r7
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c2c:	f8d9 7000 	ldr.w	r7, [r9]
 8006c30:	4463      	add	r3, ip
 8006c32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c36:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c44:	4572      	cmp	r2, lr
 8006c46:	f849 3b04 	str.w	r3, [r9], #4
 8006c4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c4e:	d8e2      	bhi.n	8006c16 <__multiply+0xb2>
 8006c50:	9b01      	ldr	r3, [sp, #4]
 8006c52:	f845 c003 	str.w	ip, [r5, r3]
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c5c:	3104      	adds	r1, #4
 8006c5e:	f1b9 0f00 	cmp.w	r9, #0
 8006c62:	d021      	beq.n	8006ca8 <__multiply+0x144>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	f104 0c14 	add.w	ip, r4, #20
 8006c6a:	46ae      	mov	lr, r5
 8006c6c:	f04f 0a00 	mov.w	sl, #0
 8006c70:	f8bc b000 	ldrh.w	fp, [ip]
 8006c74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c78:	fb09 770b 	mla	r7, r9, fp, r7
 8006c7c:	4457      	add	r7, sl
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c84:	f84e 3b04 	str.w	r3, [lr], #4
 8006c88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c90:	f8be 3000 	ldrh.w	r3, [lr]
 8006c94:	fb09 330a 	mla	r3, r9, sl, r3
 8006c98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c9c:	4562      	cmp	r2, ip
 8006c9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ca2:	d8e5      	bhi.n	8006c70 <__multiply+0x10c>
 8006ca4:	9f01      	ldr	r7, [sp, #4]
 8006ca6:	51eb      	str	r3, [r5, r7]
 8006ca8:	3504      	adds	r5, #4
 8006caa:	e799      	b.n	8006be0 <__multiply+0x7c>
 8006cac:	3e01      	subs	r6, #1
 8006cae:	e79b      	b.n	8006be8 <__multiply+0x84>
 8006cb0:	08035f82 	.word	0x08035f82
 8006cb4:	08035fa4 	.word	0x08035fa4

08006cb8 <__pow5mult>:
 8006cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	f012 0203 	ands.w	r2, r2, #3
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	460e      	mov	r6, r1
 8006cc6:	d007      	beq.n	8006cd8 <__pow5mult+0x20>
 8006cc8:	4c25      	ldr	r4, [pc, #148]	@ (8006d60 <__pow5mult+0xa8>)
 8006cca:	3a01      	subs	r2, #1
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cd2:	f7ff fe9f 	bl	8006a14 <__multadd>
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	10ad      	asrs	r5, r5, #2
 8006cda:	d03d      	beq.n	8006d58 <__pow5mult+0xa0>
 8006cdc:	69fc      	ldr	r4, [r7, #28]
 8006cde:	b97c      	cbnz	r4, 8006d00 <__pow5mult+0x48>
 8006ce0:	2010      	movs	r0, #16
 8006ce2:	f7fc f973 	bl	8002fcc <__wrap_malloc>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	61f8      	str	r0, [r7, #28]
 8006cea:	b928      	cbnz	r0, 8006cf8 <__pow5mult+0x40>
 8006cec:	4b1d      	ldr	r3, [pc, #116]	@ (8006d64 <__pow5mult+0xac>)
 8006cee:	481e      	ldr	r0, [pc, #120]	@ (8006d68 <__pow5mult+0xb0>)
 8006cf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006cf4:	f7fe fe8e 	bl	8005a14 <__assert_func>
 8006cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cfc:	6004      	str	r4, [r0, #0]
 8006cfe:	60c4      	str	r4, [r0, #12]
 8006d00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d08:	b94c      	cbnz	r4, 8006d1e <__pow5mult+0x66>
 8006d0a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff ff12 	bl	8006b38 <__i2b>
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	6003      	str	r3, [r0, #0]
 8006d1e:	f04f 0900 	mov.w	r9, #0
 8006d22:	07eb      	lsls	r3, r5, #31
 8006d24:	d50a      	bpl.n	8006d3c <__pow5mult+0x84>
 8006d26:	4631      	mov	r1, r6
 8006d28:	4622      	mov	r2, r4
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7ff ff1a 	bl	8006b64 <__multiply>
 8006d30:	4631      	mov	r1, r6
 8006d32:	4680      	mov	r8, r0
 8006d34:	4638      	mov	r0, r7
 8006d36:	f7ff fe4b 	bl	80069d0 <_Bfree>
 8006d3a:	4646      	mov	r6, r8
 8006d3c:	106d      	asrs	r5, r5, #1
 8006d3e:	d00b      	beq.n	8006d58 <__pow5mult+0xa0>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	b938      	cbnz	r0, 8006d54 <__pow5mult+0x9c>
 8006d44:	4622      	mov	r2, r4
 8006d46:	4621      	mov	r1, r4
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ff0b 	bl	8006b64 <__multiply>
 8006d4e:	6020      	str	r0, [r4, #0]
 8006d50:	f8c0 9000 	str.w	r9, [r0]
 8006d54:	4604      	mov	r4, r0
 8006d56:	e7e4      	b.n	8006d22 <__pow5mult+0x6a>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5e:	bf00      	nop
 8006d60:	08036000 	.word	0x08036000
 8006d64:	08035f13 	.word	0x08035f13
 8006d68:	08035fa4 	.word	0x08035fa4

08006d6c <__lshift>:
 8006d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	460c      	mov	r4, r1
 8006d72:	6849      	ldr	r1, [r1, #4]
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	4691      	mov	r9, r2
 8006d80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d84:	f108 0601 	add.w	r6, r8, #1
 8006d88:	42b3      	cmp	r3, r6
 8006d8a:	db0b      	blt.n	8006da4 <__lshift+0x38>
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7ff fddf 	bl	8006950 <_Balloc>
 8006d92:	4605      	mov	r5, r0
 8006d94:	b948      	cbnz	r0, 8006daa <__lshift+0x3e>
 8006d96:	4602      	mov	r2, r0
 8006d98:	4b28      	ldr	r3, [pc, #160]	@ (8006e3c <__lshift+0xd0>)
 8006d9a:	4829      	ldr	r0, [pc, #164]	@ (8006e40 <__lshift+0xd4>)
 8006d9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006da0:	f7fe fe38 	bl	8005a14 <__assert_func>
 8006da4:	3101      	adds	r1, #1
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	e7ee      	b.n	8006d88 <__lshift+0x1c>
 8006daa:	2300      	movs	r3, #0
 8006dac:	f100 0114 	add.w	r1, r0, #20
 8006db0:	f100 0210 	add.w	r2, r0, #16
 8006db4:	4618      	mov	r0, r3
 8006db6:	4553      	cmp	r3, sl
 8006db8:	db33      	blt.n	8006e22 <__lshift+0xb6>
 8006dba:	6920      	ldr	r0, [r4, #16]
 8006dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dc0:	f104 0314 	add.w	r3, r4, #20
 8006dc4:	f019 091f 	ands.w	r9, r9, #31
 8006dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dd0:	d02b      	beq.n	8006e2a <__lshift+0xbe>
 8006dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8006dd6:	468a      	mov	sl, r1
 8006dd8:	2200      	movs	r2, #0
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	fa00 f009 	lsl.w	r0, r0, r9
 8006de0:	4310      	orrs	r0, r2
 8006de2:	f84a 0b04 	str.w	r0, [sl], #4
 8006de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dea:	459c      	cmp	ip, r3
 8006dec:	fa22 f20e 	lsr.w	r2, r2, lr
 8006df0:	d8f3      	bhi.n	8006dda <__lshift+0x6e>
 8006df2:	ebac 0304 	sub.w	r3, ip, r4
 8006df6:	3b15      	subs	r3, #21
 8006df8:	f023 0303 	bic.w	r3, r3, #3
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	f104 0015 	add.w	r0, r4, #21
 8006e02:	4584      	cmp	ip, r0
 8006e04:	bf38      	it	cc
 8006e06:	2304      	movcc	r3, #4
 8006e08:	50ca      	str	r2, [r1, r3]
 8006e0a:	b10a      	cbz	r2, 8006e10 <__lshift+0xa4>
 8006e0c:	f108 0602 	add.w	r6, r8, #2
 8006e10:	3e01      	subs	r6, #1
 8006e12:	4638      	mov	r0, r7
 8006e14:	612e      	str	r6, [r5, #16]
 8006e16:	4621      	mov	r1, r4
 8006e18:	f7ff fdda 	bl	80069d0 <_Bfree>
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e26:	3301      	adds	r3, #1
 8006e28:	e7c5      	b.n	8006db6 <__lshift+0x4a>
 8006e2a:	3904      	subs	r1, #4
 8006e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e34:	459c      	cmp	ip, r3
 8006e36:	d8f9      	bhi.n	8006e2c <__lshift+0xc0>
 8006e38:	e7ea      	b.n	8006e10 <__lshift+0xa4>
 8006e3a:	bf00      	nop
 8006e3c:	08035f82 	.word	0x08035f82
 8006e40:	08035fa4 	.word	0x08035fa4

08006e44 <__mcmp>:
 8006e44:	690a      	ldr	r2, [r1, #16]
 8006e46:	4603      	mov	r3, r0
 8006e48:	6900      	ldr	r0, [r0, #16]
 8006e4a:	1a80      	subs	r0, r0, r2
 8006e4c:	b530      	push	{r4, r5, lr}
 8006e4e:	d10e      	bne.n	8006e6e <__mcmp+0x2a>
 8006e50:	3314      	adds	r3, #20
 8006e52:	3114      	adds	r1, #20
 8006e54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e64:	4295      	cmp	r5, r2
 8006e66:	d003      	beq.n	8006e70 <__mcmp+0x2c>
 8006e68:	d205      	bcs.n	8006e76 <__mcmp+0x32>
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e6e:	bd30      	pop	{r4, r5, pc}
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	d3f3      	bcc.n	8006e5c <__mcmp+0x18>
 8006e74:	e7fb      	b.n	8006e6e <__mcmp+0x2a>
 8006e76:	2001      	movs	r0, #1
 8006e78:	e7f9      	b.n	8006e6e <__mcmp+0x2a>
	...

08006e7c <__mdiff>:
 8006e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	4689      	mov	r9, r1
 8006e82:	4606      	mov	r6, r0
 8006e84:	4611      	mov	r1, r2
 8006e86:	4648      	mov	r0, r9
 8006e88:	4614      	mov	r4, r2
 8006e8a:	f7ff ffdb 	bl	8006e44 <__mcmp>
 8006e8e:	1e05      	subs	r5, r0, #0
 8006e90:	d112      	bne.n	8006eb8 <__mdiff+0x3c>
 8006e92:	4629      	mov	r1, r5
 8006e94:	4630      	mov	r0, r6
 8006e96:	f7ff fd5b 	bl	8006950 <_Balloc>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	b928      	cbnz	r0, 8006eaa <__mdiff+0x2e>
 8006e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8006f9c <__mdiff+0x120>)
 8006ea0:	f240 2137 	movw	r1, #567	@ 0x237
 8006ea4:	483e      	ldr	r0, [pc, #248]	@ (8006fa0 <__mdiff+0x124>)
 8006ea6:	f7fe fdb5 	bl	8005a14 <__assert_func>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	b003      	add	sp, #12
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	bfbc      	itt	lt
 8006eba:	464b      	movlt	r3, r9
 8006ebc:	46a1      	movlt	r9, r4
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ec4:	bfba      	itte	lt
 8006ec6:	461c      	movlt	r4, r3
 8006ec8:	2501      	movlt	r5, #1
 8006eca:	2500      	movge	r5, #0
 8006ecc:	f7ff fd40 	bl	8006950 <_Balloc>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	b918      	cbnz	r0, 8006edc <__mdiff+0x60>
 8006ed4:	4b31      	ldr	r3, [pc, #196]	@ (8006f9c <__mdiff+0x120>)
 8006ed6:	f240 2145 	movw	r1, #581	@ 0x245
 8006eda:	e7e3      	b.n	8006ea4 <__mdiff+0x28>
 8006edc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ee0:	6926      	ldr	r6, [r4, #16]
 8006ee2:	60c5      	str	r5, [r0, #12]
 8006ee4:	f109 0310 	add.w	r3, r9, #16
 8006ee8:	f109 0514 	add.w	r5, r9, #20
 8006eec:	f104 0e14 	add.w	lr, r4, #20
 8006ef0:	f100 0b14 	add.w	fp, r0, #20
 8006ef4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ef8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	46d9      	mov	r9, fp
 8006f00:	f04f 0c00 	mov.w	ip, #0
 8006f04:	9b01      	ldr	r3, [sp, #4]
 8006f06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	fa1f f38a 	uxth.w	r3, sl
 8006f14:	4619      	mov	r1, r3
 8006f16:	b283      	uxth	r3, r0
 8006f18:	1acb      	subs	r3, r1, r3
 8006f1a:	0c00      	lsrs	r0, r0, #16
 8006f1c:	4463      	add	r3, ip
 8006f1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f2c:	4576      	cmp	r6, lr
 8006f2e:	f849 3b04 	str.w	r3, [r9], #4
 8006f32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f36:	d8e5      	bhi.n	8006f04 <__mdiff+0x88>
 8006f38:	1b33      	subs	r3, r6, r4
 8006f3a:	3b15      	subs	r3, #21
 8006f3c:	f023 0303 	bic.w	r3, r3, #3
 8006f40:	3415      	adds	r4, #21
 8006f42:	3304      	adds	r3, #4
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	bf38      	it	cc
 8006f48:	2304      	movcc	r3, #4
 8006f4a:	441d      	add	r5, r3
 8006f4c:	445b      	add	r3, fp
 8006f4e:	461e      	mov	r6, r3
 8006f50:	462c      	mov	r4, r5
 8006f52:	4544      	cmp	r4, r8
 8006f54:	d30e      	bcc.n	8006f74 <__mdiff+0xf8>
 8006f56:	f108 0103 	add.w	r1, r8, #3
 8006f5a:	1b49      	subs	r1, r1, r5
 8006f5c:	f021 0103 	bic.w	r1, r1, #3
 8006f60:	3d03      	subs	r5, #3
 8006f62:	45a8      	cmp	r8, r5
 8006f64:	bf38      	it	cc
 8006f66:	2100      	movcc	r1, #0
 8006f68:	440b      	add	r3, r1
 8006f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f6e:	b191      	cbz	r1, 8006f96 <__mdiff+0x11a>
 8006f70:	6117      	str	r7, [r2, #16]
 8006f72:	e79d      	b.n	8006eb0 <__mdiff+0x34>
 8006f74:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f78:	46e6      	mov	lr, ip
 8006f7a:	0c08      	lsrs	r0, r1, #16
 8006f7c:	fa1c fc81 	uxtah	ip, ip, r1
 8006f80:	4471      	add	r1, lr
 8006f82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f86:	b289      	uxth	r1, r1
 8006f88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f8c:	f846 1b04 	str.w	r1, [r6], #4
 8006f90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f94:	e7dd      	b.n	8006f52 <__mdiff+0xd6>
 8006f96:	3f01      	subs	r7, #1
 8006f98:	e7e7      	b.n	8006f6a <__mdiff+0xee>
 8006f9a:	bf00      	nop
 8006f9c:	08035f82 	.word	0x08035f82
 8006fa0:	08035fa4 	.word	0x08035fa4

08006fa4 <__d2b>:
 8006fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fa8:	460f      	mov	r7, r1
 8006faa:	2101      	movs	r1, #1
 8006fac:	ec59 8b10 	vmov	r8, r9, d0
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	f7ff fccd 	bl	8006950 <_Balloc>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	b930      	cbnz	r0, 8006fc8 <__d2b+0x24>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4b23      	ldr	r3, [pc, #140]	@ (800704c <__d2b+0xa8>)
 8006fbe:	4824      	ldr	r0, [pc, #144]	@ (8007050 <__d2b+0xac>)
 8006fc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fc4:	f7fe fd26 	bl	8005a14 <__assert_func>
 8006fc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fd0:	b10d      	cbz	r5, 8006fd6 <__d2b+0x32>
 8006fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8006fdc:	d023      	beq.n	8007026 <__d2b+0x82>
 8006fde:	4668      	mov	r0, sp
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	f7ff fd7c 	bl	8006ade <__lo0bits>
 8006fe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fea:	b1d0      	cbz	r0, 8007022 <__d2b+0x7e>
 8006fec:	f1c0 0320 	rsb	r3, r0, #32
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	40c2      	lsrs	r2, r0
 8006ff8:	6163      	str	r3, [r4, #20]
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	9b01      	ldr	r3, [sp, #4]
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2201      	moveq	r2, #1
 8007006:	2202      	movne	r2, #2
 8007008:	6122      	str	r2, [r4, #16]
 800700a:	b1a5      	cbz	r5, 8007036 <__d2b+0x92>
 800700c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007010:	4405      	add	r5, r0
 8007012:	603d      	str	r5, [r7, #0]
 8007014:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4620      	mov	r0, r4
 800701c:	b003      	add	sp, #12
 800701e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007022:	6161      	str	r1, [r4, #20]
 8007024:	e7ea      	b.n	8006ffc <__d2b+0x58>
 8007026:	a801      	add	r0, sp, #4
 8007028:	f7ff fd59 	bl	8006ade <__lo0bits>
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	6163      	str	r3, [r4, #20]
 8007030:	3020      	adds	r0, #32
 8007032:	2201      	movs	r2, #1
 8007034:	e7e8      	b.n	8007008 <__d2b+0x64>
 8007036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800703a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800703e:	6038      	str	r0, [r7, #0]
 8007040:	6918      	ldr	r0, [r3, #16]
 8007042:	f7ff fd2d 	bl	8006aa0 <__hi0bits>
 8007046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800704a:	e7e5      	b.n	8007018 <__d2b+0x74>
 800704c:	08035f82 	.word	0x08035f82
 8007050:	08035fa4 	.word	0x08035fa4

08007054 <_malloc_usable_size_r>:
 8007054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007058:	1f18      	subs	r0, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	bfbc      	itt	lt
 800705e:	580b      	ldrlt	r3, [r1, r0]
 8007060:	18c0      	addlt	r0, r0, r3
 8007062:	4770      	bx	lr

08007064 <__sread>:
 8007064:	b510      	push	{r4, lr}
 8007066:	460c      	mov	r4, r1
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	f000 f88c 	bl	8007188 <_read_r>
 8007070:	2800      	cmp	r0, #0
 8007072:	bfab      	itete	ge
 8007074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007076:	89a3      	ldrhlt	r3, [r4, #12]
 8007078:	181b      	addge	r3, r3, r0
 800707a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800707e:	bfac      	ite	ge
 8007080:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007082:	81a3      	strhlt	r3, [r4, #12]
 8007084:	bd10      	pop	{r4, pc}

08007086 <__swrite>:
 8007086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708a:	461f      	mov	r7, r3
 800708c:	898b      	ldrh	r3, [r1, #12]
 800708e:	05db      	lsls	r3, r3, #23
 8007090:	4605      	mov	r5, r0
 8007092:	460c      	mov	r4, r1
 8007094:	4616      	mov	r6, r2
 8007096:	d505      	bpl.n	80070a4 <__swrite+0x1e>
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	2302      	movs	r3, #2
 800709e:	2200      	movs	r2, #0
 80070a0:	f000 f860 	bl	8007164 <_lseek_r>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	4632      	mov	r2, r6
 80070b2:	463b      	mov	r3, r7
 80070b4:	4628      	mov	r0, r5
 80070b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ba:	f000 b877 	b.w	80071ac <_write_r>

080070be <__sseek>:
 80070be:	b510      	push	{r4, lr}
 80070c0:	460c      	mov	r4, r1
 80070c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c6:	f000 f84d 	bl	8007164 <_lseek_r>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	bf15      	itete	ne
 80070d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070da:	81a3      	strheq	r3, [r4, #12]
 80070dc:	bf18      	it	ne
 80070de:	81a3      	strhne	r3, [r4, #12]
 80070e0:	bd10      	pop	{r4, pc}

080070e2 <__sclose>:
 80070e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e6:	f000 b82d 	b.w	8007144 <_close_r>
	...

080070ec <fiprintf>:
 80070ec:	b40e      	push	{r1, r2, r3}
 80070ee:	b503      	push	{r0, r1, lr}
 80070f0:	4601      	mov	r1, r0
 80070f2:	ab03      	add	r3, sp, #12
 80070f4:	4805      	ldr	r0, [pc, #20]	@ (800710c <fiprintf+0x20>)
 80070f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	f000 f8ab 	bl	8007258 <_vfiprintf_r>
 8007102:	b002      	add	sp, #8
 8007104:	f85d eb04 	ldr.w	lr, [sp], #4
 8007108:	b003      	add	sp, #12
 800710a:	4770      	bx	lr
 800710c:	200014f8 	.word	0x200014f8

08007110 <memmove>:
 8007110:	4288      	cmp	r0, r1
 8007112:	b510      	push	{r4, lr}
 8007114:	eb01 0402 	add.w	r4, r1, r2
 8007118:	d902      	bls.n	8007120 <memmove+0x10>
 800711a:	4284      	cmp	r4, r0
 800711c:	4623      	mov	r3, r4
 800711e:	d807      	bhi.n	8007130 <memmove+0x20>
 8007120:	1e43      	subs	r3, r0, #1
 8007122:	42a1      	cmp	r1, r4
 8007124:	d008      	beq.n	8007138 <memmove+0x28>
 8007126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800712a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800712e:	e7f8      	b.n	8007122 <memmove+0x12>
 8007130:	4402      	add	r2, r0
 8007132:	4601      	mov	r1, r0
 8007134:	428a      	cmp	r2, r1
 8007136:	d100      	bne.n	800713a <memmove+0x2a>
 8007138:	bd10      	pop	{r4, pc}
 800713a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800713e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007142:	e7f7      	b.n	8007134 <memmove+0x24>

08007144 <_close_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d06      	ldr	r5, [pc, #24]	@ (8007160 <_close_r+0x1c>)
 8007148:	2300      	movs	r3, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	f7fa f8c6 	bl	80012e0 <_close>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_close_r+0x1a>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_close_r+0x1a>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20001ec8 	.word	0x20001ec8

08007164 <_lseek_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	@ (8007184 <_lseek_r+0x20>)
 8007168:	4604      	mov	r4, r0
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	2200      	movs	r2, #0
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7fa f8be 	bl	80012f4 <_lseek>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_lseek_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_lseek_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20001ec8 	.word	0x20001ec8

08007188 <_read_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	@ (80071a8 <_read_r+0x20>)
 800718c:	4604      	mov	r4, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	2200      	movs	r2, #0
 8007194:	602a      	str	r2, [r5, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f7fa f894 	bl	80012c4 <_read>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_read_r+0x1e>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_read_r+0x1e>
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20001ec8 	.word	0x20001ec8

080071ac <_write_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d07      	ldr	r5, [pc, #28]	@ (80071cc <_write_r+0x20>)
 80071b0:	4604      	mov	r4, r0
 80071b2:	4608      	mov	r0, r1
 80071b4:	4611      	mov	r1, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	602a      	str	r2, [r5, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	f7fb fee6 	bl	8002f8c <_write>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_write_r+0x1e>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_write_r+0x1e>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20001ec8 	.word	0x20001ec8

080071d0 <abort>:
 80071d0:	b508      	push	{r3, lr}
 80071d2:	2006      	movs	r0, #6
 80071d4:	f000 fab8 	bl	8007748 <raise>
 80071d8:	2001      	movs	r0, #1
 80071da:	f7fa f86d 	bl	80012b8 <_exit>

080071de <_calloc_r>:
 80071de:	b570      	push	{r4, r5, r6, lr}
 80071e0:	fba1 5402 	umull	r5, r4, r1, r2
 80071e4:	b93c      	cbnz	r4, 80071f6 <_calloc_r+0x18>
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7fd ffe6 	bl	80051b8 <_malloc_r>
 80071ec:	4606      	mov	r6, r0
 80071ee:	b928      	cbnz	r0, 80071fc <_calloc_r+0x1e>
 80071f0:	2600      	movs	r6, #0
 80071f2:	4630      	mov	r0, r6
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	220c      	movs	r2, #12
 80071f8:	6002      	str	r2, [r0, #0]
 80071fa:	e7f9      	b.n	80071f0 <_calloc_r+0x12>
 80071fc:	462a      	mov	r2, r5
 80071fe:	4621      	mov	r1, r4
 8007200:	f7fe fbb0 	bl	8005964 <memset>
 8007204:	e7f5      	b.n	80071f2 <_calloc_r+0x14>

08007206 <__sfputc_r>:
 8007206:	6893      	ldr	r3, [r2, #8]
 8007208:	3b01      	subs	r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	b410      	push	{r4}
 800720e:	6093      	str	r3, [r2, #8]
 8007210:	da08      	bge.n	8007224 <__sfputc_r+0x1e>
 8007212:	6994      	ldr	r4, [r2, #24]
 8007214:	42a3      	cmp	r3, r4
 8007216:	db01      	blt.n	800721c <__sfputc_r+0x16>
 8007218:	290a      	cmp	r1, #10
 800721a:	d103      	bne.n	8007224 <__sfputc_r+0x1e>
 800721c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007220:	f000 b944 	b.w	80074ac <__swbuf_r>
 8007224:	6813      	ldr	r3, [r2, #0]
 8007226:	1c58      	adds	r0, r3, #1
 8007228:	6010      	str	r0, [r2, #0]
 800722a:	7019      	strb	r1, [r3, #0]
 800722c:	4608      	mov	r0, r1
 800722e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007232:	4770      	bx	lr

08007234 <__sfputs_r>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	4606      	mov	r6, r0
 8007238:	460f      	mov	r7, r1
 800723a:	4614      	mov	r4, r2
 800723c:	18d5      	adds	r5, r2, r3
 800723e:	42ac      	cmp	r4, r5
 8007240:	d101      	bne.n	8007246 <__sfputs_r+0x12>
 8007242:	2000      	movs	r0, #0
 8007244:	e007      	b.n	8007256 <__sfputs_r+0x22>
 8007246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724a:	463a      	mov	r2, r7
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff ffda 	bl	8007206 <__sfputc_r>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d1f3      	bne.n	800723e <__sfputs_r+0xa>
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007258 <_vfiprintf_r>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	460d      	mov	r5, r1
 800725e:	b09d      	sub	sp, #116	@ 0x74
 8007260:	4614      	mov	r4, r2
 8007262:	4698      	mov	r8, r3
 8007264:	4606      	mov	r6, r0
 8007266:	b118      	cbz	r0, 8007270 <_vfiprintf_r+0x18>
 8007268:	6a03      	ldr	r3, [r0, #32]
 800726a:	b90b      	cbnz	r3, 8007270 <_vfiprintf_r+0x18>
 800726c:	f7fe fb16 	bl	800589c <__sinit>
 8007270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	d405      	bmi.n	8007282 <_vfiprintf_r+0x2a>
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	059a      	lsls	r2, r3, #22
 800727a:	d402      	bmi.n	8007282 <_vfiprintf_r+0x2a>
 800727c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800727e:	f7fe fbb8 	bl	80059f2 <__retarget_lock_acquire_recursive>
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	071b      	lsls	r3, r3, #28
 8007286:	d501      	bpl.n	800728c <_vfiprintf_r+0x34>
 8007288:	692b      	ldr	r3, [r5, #16]
 800728a:	b99b      	cbnz	r3, 80072b4 <_vfiprintf_r+0x5c>
 800728c:	4629      	mov	r1, r5
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f94a 	bl	8007528 <__swsetup_r>
 8007294:	b170      	cbz	r0, 80072b4 <_vfiprintf_r+0x5c>
 8007296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007298:	07dc      	lsls	r4, r3, #31
 800729a:	d504      	bpl.n	80072a6 <_vfiprintf_r+0x4e>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072a0:	b01d      	add	sp, #116	@ 0x74
 80072a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	0598      	lsls	r0, r3, #22
 80072aa:	d4f7      	bmi.n	800729c <_vfiprintf_r+0x44>
 80072ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ae:	f7fe fba1 	bl	80059f4 <__retarget_lock_release_recursive>
 80072b2:	e7f3      	b.n	800729c <_vfiprintf_r+0x44>
 80072b4:	2300      	movs	r3, #0
 80072b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b8:	2320      	movs	r3, #32
 80072ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072be:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c2:	2330      	movs	r3, #48	@ 0x30
 80072c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007474 <_vfiprintf_r+0x21c>
 80072c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072cc:	f04f 0901 	mov.w	r9, #1
 80072d0:	4623      	mov	r3, r4
 80072d2:	469a      	mov	sl, r3
 80072d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d8:	b10a      	cbz	r2, 80072de <_vfiprintf_r+0x86>
 80072da:	2a25      	cmp	r2, #37	@ 0x25
 80072dc:	d1f9      	bne.n	80072d2 <_vfiprintf_r+0x7a>
 80072de:	ebba 0b04 	subs.w	fp, sl, r4
 80072e2:	d00b      	beq.n	80072fc <_vfiprintf_r+0xa4>
 80072e4:	465b      	mov	r3, fp
 80072e6:	4622      	mov	r2, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff ffa2 	bl	8007234 <__sfputs_r>
 80072f0:	3001      	adds	r0, #1
 80072f2:	f000 80a7 	beq.w	8007444 <_vfiprintf_r+0x1ec>
 80072f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072f8:	445a      	add	r2, fp
 80072fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80072fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 809f 	beq.w	8007444 <_vfiprintf_r+0x1ec>
 8007306:	2300      	movs	r3, #0
 8007308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800730c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007310:	f10a 0a01 	add.w	sl, sl, #1
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	9307      	str	r3, [sp, #28]
 8007318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800731c:	931a      	str	r3, [sp, #104]	@ 0x68
 800731e:	4654      	mov	r4, sl
 8007320:	2205      	movs	r2, #5
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4853      	ldr	r0, [pc, #332]	@ (8007474 <_vfiprintf_r+0x21c>)
 8007328:	f7f8 ff8a 	bl	8000240 <memchr>
 800732c:	9a04      	ldr	r2, [sp, #16]
 800732e:	b9d8      	cbnz	r0, 8007368 <_vfiprintf_r+0x110>
 8007330:	06d1      	lsls	r1, r2, #27
 8007332:	bf44      	itt	mi
 8007334:	2320      	movmi	r3, #32
 8007336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733a:	0713      	lsls	r3, r2, #28
 800733c:	bf44      	itt	mi
 800733e:	232b      	movmi	r3, #43	@ 0x2b
 8007340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007344:	f89a 3000 	ldrb.w	r3, [sl]
 8007348:	2b2a      	cmp	r3, #42	@ 0x2a
 800734a:	d015      	beq.n	8007378 <_vfiprintf_r+0x120>
 800734c:	9a07      	ldr	r2, [sp, #28]
 800734e:	4654      	mov	r4, sl
 8007350:	2000      	movs	r0, #0
 8007352:	f04f 0c0a 	mov.w	ip, #10
 8007356:	4621      	mov	r1, r4
 8007358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800735c:	3b30      	subs	r3, #48	@ 0x30
 800735e:	2b09      	cmp	r3, #9
 8007360:	d94b      	bls.n	80073fa <_vfiprintf_r+0x1a2>
 8007362:	b1b0      	cbz	r0, 8007392 <_vfiprintf_r+0x13a>
 8007364:	9207      	str	r2, [sp, #28]
 8007366:	e014      	b.n	8007392 <_vfiprintf_r+0x13a>
 8007368:	eba0 0308 	sub.w	r3, r0, r8
 800736c:	fa09 f303 	lsl.w	r3, r9, r3
 8007370:	4313      	orrs	r3, r2
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	46a2      	mov	sl, r4
 8007376:	e7d2      	b.n	800731e <_vfiprintf_r+0xc6>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	1d19      	adds	r1, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	9103      	str	r1, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bfbb      	ittet	lt
 8007384:	425b      	neglt	r3, r3
 8007386:	f042 0202 	orrlt.w	r2, r2, #2
 800738a:	9307      	strge	r3, [sp, #28]
 800738c:	9307      	strlt	r3, [sp, #28]
 800738e:	bfb8      	it	lt
 8007390:	9204      	strlt	r2, [sp, #16]
 8007392:	7823      	ldrb	r3, [r4, #0]
 8007394:	2b2e      	cmp	r3, #46	@ 0x2e
 8007396:	d10a      	bne.n	80073ae <_vfiprintf_r+0x156>
 8007398:	7863      	ldrb	r3, [r4, #1]
 800739a:	2b2a      	cmp	r3, #42	@ 0x2a
 800739c:	d132      	bne.n	8007404 <_vfiprintf_r+0x1ac>
 800739e:	9b03      	ldr	r3, [sp, #12]
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	9203      	str	r2, [sp, #12]
 80073a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073aa:	3402      	adds	r4, #2
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007484 <_vfiprintf_r+0x22c>
 80073b2:	7821      	ldrb	r1, [r4, #0]
 80073b4:	2203      	movs	r2, #3
 80073b6:	4650      	mov	r0, sl
 80073b8:	f7f8 ff42 	bl	8000240 <memchr>
 80073bc:	b138      	cbz	r0, 80073ce <_vfiprintf_r+0x176>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	eba0 000a 	sub.w	r0, r0, sl
 80073c4:	2240      	movs	r2, #64	@ 0x40
 80073c6:	4082      	lsls	r2, r0
 80073c8:	4313      	orrs	r3, r2
 80073ca:	3401      	adds	r4, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	4829      	ldr	r0, [pc, #164]	@ (8007478 <_vfiprintf_r+0x220>)
 80073d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073d8:	2206      	movs	r2, #6
 80073da:	f7f8 ff31 	bl	8000240 <memchr>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d03f      	beq.n	8007462 <_vfiprintf_r+0x20a>
 80073e2:	4b26      	ldr	r3, [pc, #152]	@ (800747c <_vfiprintf_r+0x224>)
 80073e4:	bb1b      	cbnz	r3, 800742e <_vfiprintf_r+0x1d6>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	3307      	adds	r3, #7
 80073ea:	f023 0307 	bic.w	r3, r3, #7
 80073ee:	3308      	adds	r3, #8
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f4:	443b      	add	r3, r7
 80073f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f8:	e76a      	b.n	80072d0 <_vfiprintf_r+0x78>
 80073fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fe:	460c      	mov	r4, r1
 8007400:	2001      	movs	r0, #1
 8007402:	e7a8      	b.n	8007356 <_vfiprintf_r+0xfe>
 8007404:	2300      	movs	r3, #0
 8007406:	3401      	adds	r4, #1
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	4619      	mov	r1, r3
 800740c:	f04f 0c0a 	mov.w	ip, #10
 8007410:	4620      	mov	r0, r4
 8007412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007416:	3a30      	subs	r2, #48	@ 0x30
 8007418:	2a09      	cmp	r2, #9
 800741a:	d903      	bls.n	8007424 <_vfiprintf_r+0x1cc>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0c6      	beq.n	80073ae <_vfiprintf_r+0x156>
 8007420:	9105      	str	r1, [sp, #20]
 8007422:	e7c4      	b.n	80073ae <_vfiprintf_r+0x156>
 8007424:	fb0c 2101 	mla	r1, ip, r1, r2
 8007428:	4604      	mov	r4, r0
 800742a:	2301      	movs	r3, #1
 800742c:	e7f0      	b.n	8007410 <_vfiprintf_r+0x1b8>
 800742e:	ab03      	add	r3, sp, #12
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	462a      	mov	r2, r5
 8007434:	4b12      	ldr	r3, [pc, #72]	@ (8007480 <_vfiprintf_r+0x228>)
 8007436:	a904      	add	r1, sp, #16
 8007438:	4630      	mov	r0, r6
 800743a:	f7fd fc79 	bl	8004d30 <_printf_float>
 800743e:	4607      	mov	r7, r0
 8007440:	1c78      	adds	r0, r7, #1
 8007442:	d1d6      	bne.n	80073f2 <_vfiprintf_r+0x19a>
 8007444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007446:	07d9      	lsls	r1, r3, #31
 8007448:	d405      	bmi.n	8007456 <_vfiprintf_r+0x1fe>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	059a      	lsls	r2, r3, #22
 800744e:	d402      	bmi.n	8007456 <_vfiprintf_r+0x1fe>
 8007450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007452:	f7fe facf 	bl	80059f4 <__retarget_lock_release_recursive>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	065b      	lsls	r3, r3, #25
 800745a:	f53f af1f 	bmi.w	800729c <_vfiprintf_r+0x44>
 800745e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007460:	e71e      	b.n	80072a0 <_vfiprintf_r+0x48>
 8007462:	ab03      	add	r3, sp, #12
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	462a      	mov	r2, r5
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <_vfiprintf_r+0x228>)
 800746a:	a904      	add	r1, sp, #16
 800746c:	4630      	mov	r0, r6
 800746e:	f7fd ff91 	bl	8005394 <_printf_i>
 8007472:	e7e4      	b.n	800743e <_vfiprintf_r+0x1e6>
 8007474:	08035f93 	.word	0x08035f93
 8007478:	08035f9d 	.word	0x08035f9d
 800747c:	08004d31 	.word	0x08004d31
 8007480:	08007235 	.word	0x08007235
 8007484:	08035f99 	.word	0x08035f99

08007488 <__ascii_mbtowc>:
 8007488:	b082      	sub	sp, #8
 800748a:	b901      	cbnz	r1, 800748e <__ascii_mbtowc+0x6>
 800748c:	a901      	add	r1, sp, #4
 800748e:	b142      	cbz	r2, 80074a2 <__ascii_mbtowc+0x1a>
 8007490:	b14b      	cbz	r3, 80074a6 <__ascii_mbtowc+0x1e>
 8007492:	7813      	ldrb	r3, [r2, #0]
 8007494:	600b      	str	r3, [r1, #0]
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	1e10      	subs	r0, r2, #0
 800749a:	bf18      	it	ne
 800749c:	2001      	movne	r0, #1
 800749e:	b002      	add	sp, #8
 80074a0:	4770      	bx	lr
 80074a2:	4610      	mov	r0, r2
 80074a4:	e7fb      	b.n	800749e <__ascii_mbtowc+0x16>
 80074a6:	f06f 0001 	mvn.w	r0, #1
 80074aa:	e7f8      	b.n	800749e <__ascii_mbtowc+0x16>

080074ac <__swbuf_r>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	460e      	mov	r6, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	4605      	mov	r5, r0
 80074b4:	b118      	cbz	r0, 80074be <__swbuf_r+0x12>
 80074b6:	6a03      	ldr	r3, [r0, #32]
 80074b8:	b90b      	cbnz	r3, 80074be <__swbuf_r+0x12>
 80074ba:	f7fe f9ef 	bl	800589c <__sinit>
 80074be:	69a3      	ldr	r3, [r4, #24]
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	071a      	lsls	r2, r3, #28
 80074c6:	d501      	bpl.n	80074cc <__swbuf_r+0x20>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	b943      	cbnz	r3, 80074de <__swbuf_r+0x32>
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f82a 	bl	8007528 <__swsetup_r>
 80074d4:	b118      	cbz	r0, 80074de <__swbuf_r+0x32>
 80074d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80074da:	4638      	mov	r0, r7
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	1a98      	subs	r0, r3, r2
 80074e4:	6963      	ldr	r3, [r4, #20]
 80074e6:	b2f6      	uxtb	r6, r6
 80074e8:	4283      	cmp	r3, r0
 80074ea:	4637      	mov	r7, r6
 80074ec:	dc05      	bgt.n	80074fa <__swbuf_r+0x4e>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7fe f8f3 	bl	80056dc <_fflush_r>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d1ed      	bne.n	80074d6 <__swbuf_r+0x2a>
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	6022      	str	r2, [r4, #0]
 8007506:	701e      	strb	r6, [r3, #0]
 8007508:	6962      	ldr	r2, [r4, #20]
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	429a      	cmp	r2, r3
 800750e:	d004      	beq.n	800751a <__swbuf_r+0x6e>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	07db      	lsls	r3, r3, #31
 8007514:	d5e1      	bpl.n	80074da <__swbuf_r+0x2e>
 8007516:	2e0a      	cmp	r6, #10
 8007518:	d1df      	bne.n	80074da <__swbuf_r+0x2e>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f7fe f8dd 	bl	80056dc <_fflush_r>
 8007522:	2800      	cmp	r0, #0
 8007524:	d0d9      	beq.n	80074da <__swbuf_r+0x2e>
 8007526:	e7d6      	b.n	80074d6 <__swbuf_r+0x2a>

08007528 <__swsetup_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4b29      	ldr	r3, [pc, #164]	@ (80075d0 <__swsetup_r+0xa8>)
 800752c:	4605      	mov	r5, r0
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	460c      	mov	r4, r1
 8007532:	b118      	cbz	r0, 800753c <__swsetup_r+0x14>
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b90b      	cbnz	r3, 800753c <__swsetup_r+0x14>
 8007538:	f7fe f9b0 	bl	800589c <__sinit>
 800753c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007540:	0719      	lsls	r1, r3, #28
 8007542:	d422      	bmi.n	800758a <__swsetup_r+0x62>
 8007544:	06da      	lsls	r2, r3, #27
 8007546:	d407      	bmi.n	8007558 <__swsetup_r+0x30>
 8007548:	2209      	movs	r2, #9
 800754a:	602a      	str	r2, [r5, #0]
 800754c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007556:	e033      	b.n	80075c0 <__swsetup_r+0x98>
 8007558:	0758      	lsls	r0, r3, #29
 800755a:	d512      	bpl.n	8007582 <__swsetup_r+0x5a>
 800755c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800755e:	b141      	cbz	r1, 8007572 <__swsetup_r+0x4a>
 8007560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__swsetup_r+0x46>
 8007568:	4628      	mov	r0, r5
 800756a:	f7ff f84f 	bl	800660c <_free_r>
 800756e:	2300      	movs	r3, #0
 8007570:	6363      	str	r3, [r4, #52]	@ 0x34
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0308 	orr.w	r3, r3, #8
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	b94b      	cbnz	r3, 80075a2 <__swsetup_r+0x7a>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007598:	d003      	beq.n	80075a2 <__swsetup_r+0x7a>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f84c 	bl	800763a <__smakebuf_r>
 80075a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a6:	f013 0201 	ands.w	r2, r3, #1
 80075aa:	d00a      	beq.n	80075c2 <__swsetup_r+0x9a>
 80075ac:	2200      	movs	r2, #0
 80075ae:	60a2      	str	r2, [r4, #8]
 80075b0:	6962      	ldr	r2, [r4, #20]
 80075b2:	4252      	negs	r2, r2
 80075b4:	61a2      	str	r2, [r4, #24]
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	b942      	cbnz	r2, 80075cc <__swsetup_r+0xa4>
 80075ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075be:	d1c5      	bne.n	800754c <__swsetup_r+0x24>
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	0799      	lsls	r1, r3, #30
 80075c4:	bf58      	it	pl
 80075c6:	6962      	ldrpl	r2, [r4, #20]
 80075c8:	60a2      	str	r2, [r4, #8]
 80075ca:	e7f4      	b.n	80075b6 <__swsetup_r+0x8e>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7f7      	b.n	80075c0 <__swsetup_r+0x98>
 80075d0:	200014f8 	.word	0x200014f8

080075d4 <__ascii_wctomb>:
 80075d4:	4603      	mov	r3, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	b141      	cbz	r1, 80075ec <__ascii_wctomb+0x18>
 80075da:	2aff      	cmp	r2, #255	@ 0xff
 80075dc:	d904      	bls.n	80075e8 <__ascii_wctomb+0x14>
 80075de:	228a      	movs	r2, #138	@ 0x8a
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e6:	4770      	bx	lr
 80075e8:	700a      	strb	r2, [r1, #0]
 80075ea:	2001      	movs	r0, #1
 80075ec:	4770      	bx	lr

080075ee <__swhatbuf_r>:
 80075ee:	b570      	push	{r4, r5, r6, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f6:	2900      	cmp	r1, #0
 80075f8:	b096      	sub	sp, #88	@ 0x58
 80075fa:	4615      	mov	r5, r2
 80075fc:	461e      	mov	r6, r3
 80075fe:	da0d      	bge.n	800761c <__swhatbuf_r+0x2e>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007606:	f04f 0100 	mov.w	r1, #0
 800760a:	bf14      	ite	ne
 800760c:	2340      	movne	r3, #64	@ 0x40
 800760e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007612:	2000      	movs	r0, #0
 8007614:	6031      	str	r1, [r6, #0]
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	b016      	add	sp, #88	@ 0x58
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	466a      	mov	r2, sp
 800761e:	f000 f849 	bl	80076b4 <_fstat_r>
 8007622:	2800      	cmp	r0, #0
 8007624:	dbec      	blt.n	8007600 <__swhatbuf_r+0x12>
 8007626:	9901      	ldr	r1, [sp, #4]
 8007628:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800762c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007630:	4259      	negs	r1, r3
 8007632:	4159      	adcs	r1, r3
 8007634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007638:	e7eb      	b.n	8007612 <__swhatbuf_r+0x24>

0800763a <__smakebuf_r>:
 800763a:	898b      	ldrh	r3, [r1, #12]
 800763c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763e:	079d      	lsls	r5, r3, #30
 8007640:	4606      	mov	r6, r0
 8007642:	460c      	mov	r4, r1
 8007644:	d507      	bpl.n	8007656 <__smakebuf_r+0x1c>
 8007646:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	2301      	movs	r3, #1
 8007650:	6163      	str	r3, [r4, #20]
 8007652:	b003      	add	sp, #12
 8007654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007656:	ab01      	add	r3, sp, #4
 8007658:	466a      	mov	r2, sp
 800765a:	f7ff ffc8 	bl	80075ee <__swhatbuf_r>
 800765e:	9f00      	ldr	r7, [sp, #0]
 8007660:	4605      	mov	r5, r0
 8007662:	4639      	mov	r1, r7
 8007664:	4630      	mov	r0, r6
 8007666:	f7fd fda7 	bl	80051b8 <_malloc_r>
 800766a:	b948      	cbnz	r0, 8007680 <__smakebuf_r+0x46>
 800766c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007670:	059a      	lsls	r2, r3, #22
 8007672:	d4ee      	bmi.n	8007652 <__smakebuf_r+0x18>
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	e7e2      	b.n	8007646 <__smakebuf_r+0xc>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	6020      	str	r0, [r4, #0]
 8007684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007690:	b15b      	cbz	r3, 80076aa <__smakebuf_r+0x70>
 8007692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007696:	4630      	mov	r0, r6
 8007698:	f000 f81e 	bl	80076d8 <_isatty_r>
 800769c:	b128      	cbz	r0, 80076aa <__smakebuf_r+0x70>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f023 0303 	bic.w	r3, r3, #3
 80076a4:	f043 0301 	orr.w	r3, r3, #1
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	431d      	orrs	r5, r3
 80076ae:	81a5      	strh	r5, [r4, #12]
 80076b0:	e7cf      	b.n	8007652 <__smakebuf_r+0x18>
	...

080076b4 <_fstat_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	@ (80076d4 <_fstat_r+0x20>)
 80076b8:	2300      	movs	r3, #0
 80076ba:	4604      	mov	r4, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	f7f9 fe10 	bl	80012e6 <_fstat>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d102      	bne.n	80076d0 <_fstat_r+0x1c>
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	b103      	cbz	r3, 80076d0 <_fstat_r+0x1c>
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	bd38      	pop	{r3, r4, r5, pc}
 80076d2:	bf00      	nop
 80076d4:	20001ec8 	.word	0x20001ec8

080076d8 <_isatty_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d06      	ldr	r5, [pc, #24]	@ (80076f4 <_isatty_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7f9 fe04 	bl	80012f0 <_isatty>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_isatty_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_isatty_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20001ec8 	.word	0x20001ec8

080076f8 <_raise_r>:
 80076f8:	291f      	cmp	r1, #31
 80076fa:	b538      	push	{r3, r4, r5, lr}
 80076fc:	4605      	mov	r5, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	d904      	bls.n	800770c <_raise_r+0x14>
 8007702:	2316      	movs	r3, #22
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800770e:	b112      	cbz	r2, 8007716 <_raise_r+0x1e>
 8007710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007714:	b94b      	cbnz	r3, 800772a <_raise_r+0x32>
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f830 	bl	800777c <_getpid_r>
 800771c:	4622      	mov	r2, r4
 800771e:	4601      	mov	r1, r0
 8007720:	4628      	mov	r0, r5
 8007722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007726:	f000 b817 	b.w	8007758 <_kill_r>
 800772a:	2b01      	cmp	r3, #1
 800772c:	d00a      	beq.n	8007744 <_raise_r+0x4c>
 800772e:	1c59      	adds	r1, r3, #1
 8007730:	d103      	bne.n	800773a <_raise_r+0x42>
 8007732:	2316      	movs	r3, #22
 8007734:	6003      	str	r3, [r0, #0]
 8007736:	2001      	movs	r0, #1
 8007738:	e7e7      	b.n	800770a <_raise_r+0x12>
 800773a:	2100      	movs	r1, #0
 800773c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007740:	4620      	mov	r0, r4
 8007742:	4798      	blx	r3
 8007744:	2000      	movs	r0, #0
 8007746:	e7e0      	b.n	800770a <_raise_r+0x12>

08007748 <raise>:
 8007748:	4b02      	ldr	r3, [pc, #8]	@ (8007754 <raise+0xc>)
 800774a:	4601      	mov	r1, r0
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	f7ff bfd3 	b.w	80076f8 <_raise_r>
 8007752:	bf00      	nop
 8007754:	200014f8 	.word	0x200014f8

08007758 <_kill_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	@ (8007778 <_kill_r+0x20>)
 800775c:	2300      	movs	r3, #0
 800775e:	4604      	mov	r4, r0
 8007760:	4608      	mov	r0, r1
 8007762:	4611      	mov	r1, r2
 8007764:	602b      	str	r3, [r5, #0]
 8007766:	f7f9 fd9f 	bl	80012a8 <_kill>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d102      	bne.n	8007774 <_kill_r+0x1c>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	b103      	cbz	r3, 8007774 <_kill_r+0x1c>
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	bf00      	nop
 8007778:	20001ec8 	.word	0x20001ec8

0800777c <_getpid_r>:
 800777c:	f7f9 bd92 	b.w	80012a4 <_getpid>

08007780 <_init>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr

0800778c <_fini>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr
